{"version":3,"file":"buble.es.js","sources":["../node_modules/acorn-jsx/xhtml.js","../node_modules/acorn-jsx/inject.js","../node_modules/acorn-object-spread/inject.js","../src/program/keys.js","../src/program/Node.js","../src/utils/spread.js","../src/program/types/ArrayExpression.js","../src/program/types/ArrowFunctionExpression.js","../src/utils/locate.js","../src/utils/getSnippet.js","../src/utils/CompileError.js","../src/program/types/AssignmentExpression.js","../src/program/types/BinaryExpression.js","../src/utils/patterns.js","../src/program/types/BreakStatement.js","../src/program/types/CallExpression.js","../src/utils/array.js","../src/utils/reserved.js","../src/program/types/ClassBody.js","../src/utils/deindent.js","../src/program/types/ClassDeclaration.js","../src/program/types/ClassExpression.js","../src/program/types/ContinueStatement.js","../src/program/types/ExportDefaultDeclaration.js","../src/program/types/ExportNamedDeclaration.js","../src/program/types/shared/LoopStatement.js","../src/program/extractNames.js","../src/program/types/ForStatement.js","../src/program/types/ForInStatement.js","../src/utils/destructure.js","../src/program/types/ForOfStatement.js","../src/program/types/FunctionDeclaration.js","../src/program/types/FunctionExpression.js","../src/utils/isReference.js","../src/program/types/Identifier.js","../src/program/types/IfStatement.js","../src/program/types/ImportDeclaration.js","../src/program/types/ImportDefaultSpecifier.js","../src/program/types/ImportSpecifier.js","../src/program/types/JSXAttribute.js","../src/program/types/JSXClosingElement.js","../src/program/types/JSXElement.js","../src/program/types/JSXExpressionContainer.js","../src/program/types/JSXOpeningElement.js","../src/program/types/JSXSpreadAttribute.js","../node_modules/regenerate/regenerate.js","../node_modules/regexpu-core/data/character-class-escape-sets.js","../node_modules/regjsparser/parser.js","../node_modules/regjsgen/regjsgen.js","../node_modules/regexpu-core/rewrite-pattern.js","../src/program/types/Literal.js","../src/program/types/MemberExpression.js","../src/program/types/NewExpression.js","../src/program/types/ObjectExpression.js","../src/program/types/Property.js","../src/program/types/ReturnStatement.js","../src/program/types/SpreadProperty.js","../src/program/types/Super.js","../src/program/types/TaggedTemplateExpression.js","../src/program/types/TemplateElement.js","../src/program/types/TemplateLiteral.js","../src/program/types/ThisExpression.js","../src/program/types/UpdateExpression.js","../src/program/types/VariableDeclaration.js","../src/program/types/VariableDeclarator.js","../src/program/types/index.js","../src/program/wrap.js","../src/program/Scope.js","../src/program/BlockStatement.js","../src/program/Program.js","../src/support.js","../src/index.js"],"sourcesContent":["module.exports = {\n  quot: '\\u0022',\n  amp: '&',\n  apos: '\\u0027',\n  lt: '<',\n  gt: '>',\n  nbsp: '\\u00A0',\n  iexcl: '\\u00A1',\n  cent: '\\u00A2',\n  pound: '\\u00A3',\n  curren: '\\u00A4',\n  yen: '\\u00A5',\n  brvbar: '\\u00A6',\n  sect: '\\u00A7',\n  uml: '\\u00A8',\n  copy: '\\u00A9',\n  ordf: '\\u00AA',\n  laquo: '\\u00AB',\n  not: '\\u00AC',\n  shy: '\\u00AD',\n  reg: '\\u00AE',\n  macr: '\\u00AF',\n  deg: '\\u00B0',\n  plusmn: '\\u00B1',\n  sup2: '\\u00B2',\n  sup3: '\\u00B3',\n  acute: '\\u00B4',\n  micro: '\\u00B5',\n  para: '\\u00B6',\n  middot: '\\u00B7',\n  cedil: '\\u00B8',\n  sup1: '\\u00B9',\n  ordm: '\\u00BA',\n  raquo: '\\u00BB',\n  frac14: '\\u00BC',\n  frac12: '\\u00BD',\n  frac34: '\\u00BE',\n  iquest: '\\u00BF',\n  Agrave: '\\u00C0',\n  Aacute: '\\u00C1',\n  Acirc: '\\u00C2',\n  Atilde: '\\u00C3',\n  Auml: '\\u00C4',\n  Aring: '\\u00C5',\n  AElig: '\\u00C6',\n  Ccedil: '\\u00C7',\n  Egrave: '\\u00C8',\n  Eacute: '\\u00C9',\n  Ecirc: '\\u00CA',\n  Euml: '\\u00CB',\n  Igrave: '\\u00CC',\n  Iacute: '\\u00CD',\n  Icirc: '\\u00CE',\n  Iuml: '\\u00CF',\n  ETH: '\\u00D0',\n  Ntilde: '\\u00D1',\n  Ograve: '\\u00D2',\n  Oacute: '\\u00D3',\n  Ocirc: '\\u00D4',\n  Otilde: '\\u00D5',\n  Ouml: '\\u00D6',\n  times: '\\u00D7',\n  Oslash: '\\u00D8',\n  Ugrave: '\\u00D9',\n  Uacute: '\\u00DA',\n  Ucirc: '\\u00DB',\n  Uuml: '\\u00DC',\n  Yacute: '\\u00DD',\n  THORN: '\\u00DE',\n  szlig: '\\u00DF',\n  agrave: '\\u00E0',\n  aacute: '\\u00E1',\n  acirc: '\\u00E2',\n  atilde: '\\u00E3',\n  auml: '\\u00E4',\n  aring: '\\u00E5',\n  aelig: '\\u00E6',\n  ccedil: '\\u00E7',\n  egrave: '\\u00E8',\n  eacute: '\\u00E9',\n  ecirc: '\\u00EA',\n  euml: '\\u00EB',\n  igrave: '\\u00EC',\n  iacute: '\\u00ED',\n  icirc: '\\u00EE',\n  iuml: '\\u00EF',\n  eth: '\\u00F0',\n  ntilde: '\\u00F1',\n  ograve: '\\u00F2',\n  oacute: '\\u00F3',\n  ocirc: '\\u00F4',\n  otilde: '\\u00F5',\n  ouml: '\\u00F6',\n  divide: '\\u00F7',\n  oslash: '\\u00F8',\n  ugrave: '\\u00F9',\n  uacute: '\\u00FA',\n  ucirc: '\\u00FB',\n  uuml: '\\u00FC',\n  yacute: '\\u00FD',\n  thorn: '\\u00FE',\n  yuml: '\\u00FF',\n  OElig: '\\u0152',\n  oelig: '\\u0153',\n  Scaron: '\\u0160',\n  scaron: '\\u0161',\n  Yuml: '\\u0178',\n  fnof: '\\u0192',\n  circ: '\\u02C6',\n  tilde: '\\u02DC',\n  Alpha: '\\u0391',\n  Beta: '\\u0392',\n  Gamma: '\\u0393',\n  Delta: '\\u0394',\n  Epsilon: '\\u0395',\n  Zeta: '\\u0396',\n  Eta: '\\u0397',\n  Theta: '\\u0398',\n  Iota: '\\u0399',\n  Kappa: '\\u039A',\n  Lambda: '\\u039B',\n  Mu: '\\u039C',\n  Nu: '\\u039D',\n  Xi: '\\u039E',\n  Omicron: '\\u039F',\n  Pi: '\\u03A0',\n  Rho: '\\u03A1',\n  Sigma: '\\u03A3',\n  Tau: '\\u03A4',\n  Upsilon: '\\u03A5',\n  Phi: '\\u03A6',\n  Chi: '\\u03A7',\n  Psi: '\\u03A8',\n  Omega: '\\u03A9',\n  alpha: '\\u03B1',\n  beta: '\\u03B2',\n  gamma: '\\u03B3',\n  delta: '\\u03B4',\n  epsilon: '\\u03B5',\n  zeta: '\\u03B6',\n  eta: '\\u03B7',\n  theta: '\\u03B8',\n  iota: '\\u03B9',\n  kappa: '\\u03BA',\n  lambda: '\\u03BB',\n  mu: '\\u03BC',\n  nu: '\\u03BD',\n  xi: '\\u03BE',\n  omicron: '\\u03BF',\n  pi: '\\u03C0',\n  rho: '\\u03C1',\n  sigmaf: '\\u03C2',\n  sigma: '\\u03C3',\n  tau: '\\u03C4',\n  upsilon: '\\u03C5',\n  phi: '\\u03C6',\n  chi: '\\u03C7',\n  psi: '\\u03C8',\n  omega: '\\u03C9',\n  thetasym: '\\u03D1',\n  upsih: '\\u03D2',\n  piv: '\\u03D6',\n  ensp: '\\u2002',\n  emsp: '\\u2003',\n  thinsp: '\\u2009',\n  zwnj: '\\u200C',\n  zwj: '\\u200D',\n  lrm: '\\u200E',\n  rlm: '\\u200F',\n  ndash: '\\u2013',\n  mdash: '\\u2014',\n  lsquo: '\\u2018',\n  rsquo: '\\u2019',\n  sbquo: '\\u201A',\n  ldquo: '\\u201C',\n  rdquo: '\\u201D',\n  bdquo: '\\u201E',\n  dagger: '\\u2020',\n  Dagger: '\\u2021',\n  bull: '\\u2022',\n  hellip: '\\u2026',\n  permil: '\\u2030',\n  prime: '\\u2032',\n  Prime: '\\u2033',\n  lsaquo: '\\u2039',\n  rsaquo: '\\u203A',\n  oline: '\\u203E',\n  frasl: '\\u2044',\n  euro: '\\u20AC',\n  image: '\\u2111',\n  weierp: '\\u2118',\n  real: '\\u211C',\n  trade: '\\u2122',\n  alefsym: '\\u2135',\n  larr: '\\u2190',\n  uarr: '\\u2191',\n  rarr: '\\u2192',\n  darr: '\\u2193',\n  harr: '\\u2194',\n  crarr: '\\u21B5',\n  lArr: '\\u21D0',\n  uArr: '\\u21D1',\n  rArr: '\\u21D2',\n  dArr: '\\u21D3',\n  hArr: '\\u21D4',\n  forall: '\\u2200',\n  part: '\\u2202',\n  exist: '\\u2203',\n  empty: '\\u2205',\n  nabla: '\\u2207',\n  isin: '\\u2208',\n  notin: '\\u2209',\n  ni: '\\u220B',\n  prod: '\\u220F',\n  sum: '\\u2211',\n  minus: '\\u2212',\n  lowast: '\\u2217',\n  radic: '\\u221A',\n  prop: '\\u221D',\n  infin: '\\u221E',\n  ang: '\\u2220',\n  and: '\\u2227',\n  or: '\\u2228',\n  cap: '\\u2229',\n  cup: '\\u222A',\n  'int': '\\u222B',\n  there4: '\\u2234',\n  sim: '\\u223C',\n  cong: '\\u2245',\n  asymp: '\\u2248',\n  ne: '\\u2260',\n  equiv: '\\u2261',\n  le: '\\u2264',\n  ge: '\\u2265',\n  sub: '\\u2282',\n  sup: '\\u2283',\n  nsub: '\\u2284',\n  sube: '\\u2286',\n  supe: '\\u2287',\n  oplus: '\\u2295',\n  otimes: '\\u2297',\n  perp: '\\u22A5',\n  sdot: '\\u22C5',\n  lceil: '\\u2308',\n  rceil: '\\u2309',\n  lfloor: '\\u230A',\n  rfloor: '\\u230B',\n  lang: '\\u2329',\n  rang: '\\u232A',\n  loz: '\\u25CA',\n  spades: '\\u2660',\n  clubs: '\\u2663',\n  hearts: '\\u2665',\n  diams: '\\u2666'\n};\n","'use strict';\n\nvar XHTMLEntities = require('./xhtml');\n\nvar hexNumber = /^[\\da-fA-F]+$/;\nvar decimalNumber = /^\\d+$/;\n\nmodule.exports = function(acorn) {\n  var tt = acorn.tokTypes;\n  var tc = acorn.tokContexts;\n\n  tc.j_oTag = new acorn.TokContext('<tag', false);\n  tc.j_cTag = new acorn.TokContext('</tag', false);\n  tc.j_expr = new acorn.TokContext('<tag>...</tag>', true, true);\n\n  tt.jsxName = new acorn.TokenType('jsxName');\n  tt.jsxText = new acorn.TokenType('jsxText', {beforeExpr: true});\n  tt.jsxTagStart = new acorn.TokenType('jsxTagStart');\n  tt.jsxTagEnd = new acorn.TokenType('jsxTagEnd');\n\n  tt.jsxTagStart.updateContext = function() {\n    this.context.push(tc.j_expr); // treat as beginning of JSX expression\n    this.context.push(tc.j_oTag); // start opening tag context\n    this.exprAllowed = false;\n  };\n  tt.jsxTagEnd.updateContext = function(prevType) {\n    var out = this.context.pop();\n    if (out === tc.j_oTag && prevType === tt.slash || out === tc.j_cTag) {\n      this.context.pop();\n      this.exprAllowed = this.curContext() === tc.j_expr;\n    } else {\n      this.exprAllowed = true;\n    }\n  };\n\n  var pp = acorn.Parser.prototype;\n\n  // Reads inline JSX contents token.\n\n  pp.jsx_readToken = function() {\n    var out = '', chunkStart = this.pos;\n    for (;;) {\n      if (this.pos >= this.input.length)\n        this.raise(this.start, 'Unterminated JSX contents');\n      var ch = this.input.charCodeAt(this.pos);\n\n      switch (ch) {\n      case 60: // '<'\n      case 123: // '{'\n        if (this.pos === this.start) {\n          if (ch === 60 && this.exprAllowed) {\n            ++this.pos;\n            return this.finishToken(tt.jsxTagStart);\n          }\n          return this.getTokenFromCode(ch);\n        }\n        out += this.input.slice(chunkStart, this.pos);\n        return this.finishToken(tt.jsxText, out);\n\n      case 38: // '&'\n        out += this.input.slice(chunkStart, this.pos);\n        out += this.jsx_readEntity();\n        chunkStart = this.pos;\n        break;\n\n      default:\n        if (acorn.isNewLine(ch)) {\n          out += this.input.slice(chunkStart, this.pos);\n          out += this.jsx_readNewLine(true);\n          chunkStart = this.pos;\n        } else {\n          ++this.pos;\n        }\n      }\n    }\n  };\n\n  pp.jsx_readNewLine = function(normalizeCRLF) {\n    var ch = this.input.charCodeAt(this.pos);\n    var out;\n    ++this.pos;\n    if (ch === 13 && this.input.charCodeAt(this.pos) === 10) {\n      ++this.pos;\n      out = normalizeCRLF ? '\\n' : '\\r\\n';\n    } else {\n      out = String.fromCharCode(ch);\n    }\n    if (this.options.locations) {\n      ++this.curLine;\n      this.lineStart = this.pos;\n    }\n\n    return out;\n  };\n\n  pp.jsx_readString = function(quote) {\n    var out = '', chunkStart = ++this.pos;\n    for (;;) {\n      if (this.pos >= this.input.length)\n        this.raise(this.start, 'Unterminated string constant');\n      var ch = this.input.charCodeAt(this.pos);\n      if (ch === quote) break;\n      if (ch === 38) { // '&'\n        out += this.input.slice(chunkStart, this.pos);\n        out += this.jsx_readEntity();\n        chunkStart = this.pos;\n      } else if (acorn.isNewLine(ch)) {\n        out += this.input.slice(chunkStart, this.pos);\n        out += this.jsx_readNewLine(false);\n        chunkStart = this.pos;\n      } else {\n        ++this.pos;\n      }\n    }\n    out += this.input.slice(chunkStart, this.pos++);\n    return this.finishToken(tt.string, out);\n  };\n\n  pp.jsx_readEntity = function() {\n    var str = '', count = 0, entity;\n    var ch = this.input[this.pos];\n    if (ch !== '&')\n      this.raise(this.pos, 'Entity must start with an ampersand');\n    var startPos = ++this.pos;\n    while (this.pos < this.input.length && count++ < 10) {\n      ch = this.input[this.pos++];\n      if (ch === ';') {\n        if (str[0] === '#') {\n          if (str[1] === 'x') {\n            str = str.substr(2);\n            if (hexNumber.test(str))\n              entity = String.fromCharCode(parseInt(str, 16));\n          } else {\n            str = str.substr(1);\n            if (decimalNumber.test(str))\n              entity = String.fromCharCode(parseInt(str, 10));\n          }\n        } else {\n          entity = XHTMLEntities[str];\n        }\n        break;\n      }\n      str += ch;\n    }\n    if (!entity) {\n      this.pos = startPos;\n      return '&';\n    }\n    return entity;\n  };\n\n\n  // Read a JSX identifier (valid tag or attribute name).\n  //\n  // Optimized version since JSX identifiers can't contain\n  // escape characters and so can be read as single slice.\n  // Also assumes that first character was already checked\n  // by isIdentifierStart in readToken.\n\n  pp.jsx_readWord = function() {\n    var ch, start = this.pos;\n    do {\n      ch = this.input.charCodeAt(++this.pos);\n    } while (acorn.isIdentifierChar(ch) || ch === 45); // '-'\n    return this.finishToken(tt.jsxName, this.input.slice(start, this.pos));\n  };\n\n  // Transforms JSX element name to string.\n\n  function getQualifiedJSXName(object) {\n    if (object.type === 'JSXIdentifier')\n      return object.name;\n\n    if (object.type === 'JSXNamespacedName')\n      return object.namespace.name + ':' + object.name.name;\n\n    if (object.type === 'JSXMemberExpression')\n      return getQualifiedJSXName(object.object) + '.' +\n      getQualifiedJSXName(object.property);\n  }\n\n  // Parse next token as JSX identifier\n\n  pp.jsx_parseIdentifier = function() {\n    var node = this.startNode();\n    if (this.type === tt.jsxName)\n      node.name = this.value;\n    else if (this.type.keyword)\n      node.name = this.type.keyword;\n    else\n      this.unexpected();\n    this.next();\n    return this.finishNode(node, 'JSXIdentifier');\n  };\n\n  // Parse namespaced identifier.\n\n  pp.jsx_parseNamespacedName = function() {\n    var startPos = this.start, startLoc = this.startLoc;\n    var name = this.jsx_parseIdentifier();\n    if (!this.options.plugins.jsx.allowNamespaces || !this.eat(tt.colon)) return name;\n    var node = this.startNodeAt(startPos, startLoc);\n    node.namespace = name;\n    node.name = this.jsx_parseIdentifier();\n    return this.finishNode(node, 'JSXNamespacedName');\n  };\n\n  // Parses element name in any form - namespaced, member\n  // or single identifier.\n\n  pp.jsx_parseElementName = function() {\n    var startPos = this.start, startLoc = this.startLoc;\n    var node = this.jsx_parseNamespacedName();\n    if (this.type === tt.dot && node.type === 'JSXNamespacedName' && !this.options.plugins.jsx.allowNamespacedObjects) {\n      this.unexpected();\n    }\n    while (this.eat(tt.dot)) {\n      var newNode = this.startNodeAt(startPos, startLoc);\n      newNode.object = node;\n      newNode.property = this.jsx_parseIdentifier();\n      node = this.finishNode(newNode, 'JSXMemberExpression');\n    }\n    return node;\n  };\n\n  // Parses any type of JSX attribute value.\n\n  pp.jsx_parseAttributeValue = function() {\n    switch (this.type) {\n    case tt.braceL:\n      var node = this.jsx_parseExpressionContainer();\n      if (node.expression.type === 'JSXEmptyExpression')\n        this.raise(node.start, 'JSX attributes must only be assigned a non-empty expression');\n      return node;\n\n    case tt.jsxTagStart:\n    case tt.string:\n      return this.parseExprAtom();\n\n    default:\n      this.raise(this.start, 'JSX value should be either an expression or a quoted JSX text');\n    }\n  };\n\n  // JSXEmptyExpression is unique type since it doesn't actually parse anything,\n  // and so it should start at the end of last read token (left brace) and finish\n  // at the beginning of the next one (right brace).\n\n  pp.jsx_parseEmptyExpression = function() {\n    var node = this.startNodeAt(this.lastTokEnd, this.lastTokEndLoc);\n    return this.finishNodeAt(node, 'JSXEmptyExpression', this.start, this.startLoc);\n  };\n\n  // Parses JSX expression enclosed into curly brackets.\n\n\n  pp.jsx_parseExpressionContainer = function() {\n    var node = this.startNode();\n    this.next();\n    node.expression = this.type === tt.braceR\n      ? this.jsx_parseEmptyExpression()\n      : this.parseExpression();\n    this.expect(tt.braceR);\n    return this.finishNode(node, 'JSXExpressionContainer');\n  };\n\n  // Parses following JSX attribute name-value pair.\n\n  pp.jsx_parseAttribute = function() {\n    var node = this.startNode();\n    if (this.eat(tt.braceL)) {\n      this.expect(tt.ellipsis);\n      node.argument = this.parseMaybeAssign();\n      this.expect(tt.braceR);\n      return this.finishNode(node, 'JSXSpreadAttribute');\n    }\n    node.name = this.jsx_parseNamespacedName();\n    node.value = this.eat(tt.eq) ? this.jsx_parseAttributeValue() : null;\n    return this.finishNode(node, 'JSXAttribute');\n  };\n\n  // Parses JSX opening tag starting after '<'.\n\n  pp.jsx_parseOpeningElementAt = function(startPos, startLoc) {\n    var node = this.startNodeAt(startPos, startLoc);\n    node.attributes = [];\n    node.name = this.jsx_parseElementName();\n    while (this.type !== tt.slash && this.type !== tt.jsxTagEnd)\n      node.attributes.push(this.jsx_parseAttribute());\n    node.selfClosing = this.eat(tt.slash);\n    this.expect(tt.jsxTagEnd);\n    return this.finishNode(node, 'JSXOpeningElement');\n  };\n\n  // Parses JSX closing tag starting after '</'.\n\n  pp.jsx_parseClosingElementAt = function(startPos, startLoc) {\n    var node = this.startNodeAt(startPos, startLoc);\n    node.name = this.jsx_parseElementName();\n    this.expect(tt.jsxTagEnd);\n    return this.finishNode(node, 'JSXClosingElement');\n  };\n\n  // Parses entire JSX element, including it's opening tag\n  // (starting after '<'), attributes, contents and closing tag.\n\n  pp.jsx_parseElementAt = function(startPos, startLoc) {\n    var node = this.startNodeAt(startPos, startLoc);\n    var children = [];\n    var openingElement = this.jsx_parseOpeningElementAt(startPos, startLoc);\n    var closingElement = null;\n\n    if (!openingElement.selfClosing) {\n      contents: for (;;) {\n        switch (this.type) {\n        case tt.jsxTagStart:\n          startPos = this.start; startLoc = this.startLoc;\n          this.next();\n          if (this.eat(tt.slash)) {\n            closingElement = this.jsx_parseClosingElementAt(startPos, startLoc);\n            break contents;\n          }\n          children.push(this.jsx_parseElementAt(startPos, startLoc));\n          break;\n\n        case tt.jsxText:\n          children.push(this.parseExprAtom());\n          break;\n\n        case tt.braceL:\n          children.push(this.jsx_parseExpressionContainer());\n          break;\n\n        default:\n          this.unexpected();\n        }\n      }\n      if (getQualifiedJSXName(closingElement.name) !== getQualifiedJSXName(openingElement.name)) {\n        this.raise(\n          closingElement.start,\n          'Expected corresponding JSX closing tag for <' + getQualifiedJSXName(openingElement.name) + '>');\n      }\n    }\n\n    node.openingElement = openingElement;\n    node.closingElement = closingElement;\n    node.children = children;\n    if (this.type === tt.relational && this.value === \"<\") {\n      this.raise(this.start, \"Adjacent JSX elements must be wrapped in an enclosing tag\");\n    }\n    return this.finishNode(node, 'JSXElement');\n  };\n\n  // Parses entire JSX element from current position.\n\n  pp.jsx_parseElement = function() {\n    var startPos = this.start, startLoc = this.startLoc;\n    this.next();\n    return this.jsx_parseElementAt(startPos, startLoc);\n  };\n\n  acorn.plugins.jsx = function(instance, opts) {\n    if (!opts) {\n      return;\n    }\n\n    if (typeof opts !== 'object') {\n      opts = {};\n    }\n\n    instance.options.plugins.jsx = {\n      allowNamespaces: opts.allowNamespaces !== false,\n      allowNamespacedObjects: !!opts.allowNamespacedObjects\n    };\n\n    instance.extend('parseExprAtom', function(inner) {\n      return function(refShortHandDefaultPos) {\n        if (this.type === tt.jsxText)\n          return this.parseLiteral(this.value);\n        else if (this.type === tt.jsxTagStart)\n          return this.jsx_parseElement();\n        else\n          return inner.call(this, refShortHandDefaultPos);\n      };\n    });\n\n    instance.extend('readToken', function(inner) {\n      return function(code) {\n        var context = this.curContext();\n\n        if (context === tc.j_expr) return this.jsx_readToken();\n\n        if (context === tc.j_oTag || context === tc.j_cTag) {\n          if (acorn.isIdentifierStart(code)) return this.jsx_readWord();\n\n          if (code == 62) {\n            ++this.pos;\n            return this.finishToken(tt.jsxTagEnd);\n          }\n\n          if ((code === 34 || code === 39) && context == tc.j_oTag)\n            return this.jsx_readString(code);\n        }\n\n        if (code === 60 && this.exprAllowed) {\n          ++this.pos;\n          return this.finishToken(tt.jsxTagStart);\n        }\n        return inner.call(this, code);\n      };\n    });\n\n    instance.extend('updateContext', function(inner) {\n      return function(prevType) {\n        if (this.type == tt.braceL) {\n          var curContext = this.curContext();\n          if (curContext == tc.j_oTag) this.context.push(tc.b_expr);\n          else if (curContext == tc.j_expr) this.context.push(tc.b_tmpl);\n          else inner.call(this, prevType);\n          this.exprAllowed = true;\n        } else if (this.type === tt.slash && prevType === tt.jsxTagStart) {\n          this.context.length -= 2; // do not consider JSX expr -> JSX open tag -> ... anymore\n          this.context.push(tc.j_cTag); // reconsider as closing tag context\n          this.exprAllowed = false;\n        } else {\n          return inner.call(this, prevType);\n        }\n      };\n    });\n  };\n\n  return acorn;\n};\n","'use strict';\n\nmodule.exports = function(acorn) {\n  var tt = acorn.tokTypes;\n  var pp = acorn.Parser.prototype;\n\n  // this is the same parseObj that acorn has with...\n  function parseObj(isPattern, refDestructuringErrors) {\n    let node = this.startNode(), first = true, propHash = {}\n    node.properties = []\n    this.next()\n    while (!this.eat(tt.braceR)) {\n      if (!first) {\n        this.expect(tt.comma)\n        if (this.afterTrailingComma(tt.braceR)) break\n      } else first = false\n\n      let prop = this.startNode(), isGenerator, startPos, startLoc\n      if (this.options.ecmaVersion >= 6) {\n        // ...the spread logic borrowed from babylon :)\n        if (this.type === tt.ellipsis) {\n          prop = this.parseSpread()\n          prop.type = isPattern ? \"RestProperty\" : \"SpreadProperty\"\n          node.properties.push(prop)\n          continue\n        }\n\n        prop.method = false\n        prop.shorthand = false\n        if (isPattern || refDestructuringErrors) {\n          startPos = this.start\n          startLoc = this.startLoc\n        }\n        if (!isPattern)\n          isGenerator = this.eat(tt.star)\n      }\n      this.parsePropertyName(prop)\n      this.parsePropertyValue(prop, isPattern, isGenerator, startPos, startLoc, refDestructuringErrors)\n      this.checkPropClash(prop, propHash)\n      node.properties.push(this.finishNode(prop, \"Property\"))\n    }\n    return this.finishNode(node, isPattern ? \"ObjectPattern\" : \"ObjectExpression\")\n  }\n\n  acorn.plugins.objectSpread = function objectSpreadPlugin(instance) {\n    pp.parseObj = parseObj;\n  };\n\n  return acorn;\n};\n","export default {\n\tProgram: [ 'body' ],\n\tLiteral: []\n};\n","import wrap from './wrap.js';\nimport keys from './keys.js';\n\n// used for debugging, without the noise created by\n// circular references\nfunction toJSON ( node ) {\n\tvar obj = {};\n\n\tObject.keys( node ).forEach( key => {\n\t\tif ( key === 'parent' || key === 'program' || key === 'keys' || key === '__wrapped' ) return;\n\n\t\tif ( Array.isArray( node[ key ] ) ) {\n\t\t\tobj[ key ] = node[ key ].map( toJSON );\n\t\t} else if ( node[ key ] && node[ key ].toJSON ) {\n\t\t\tobj[ key ] = node[ key ].toJSON();\n\t\t} else {\n\t\t\tobj[ key ] = node[ key ];\n\t\t}\n\t});\n\n\treturn obj;\n}\n\nexport default class Node {\n\tconstructor ( raw, parent ) {\n\t\traw.parent = parent;\n\t\traw.program = parent.program || parent;\n\t\traw.depth = parent.depth + 1;\n\t\traw.keys = keys[ raw.type ];\n\t\traw.indentation = undefined;\n\n\t\tfor ( const key of keys[ raw.type ] ) {\n\t\t\twrap( raw[ key ], raw );\n\t\t}\n\n\t\traw.program.magicString.addSourcemapLocation( raw.start );\n\t\traw.program.magicString.addSourcemapLocation( raw.end );\n\t}\n\n\tancestor ( level ) {\n\t\tlet node = this;\n\t\twhile ( level-- ) {\n\t\t\tnode = node.parent;\n\t\t\tif ( !node ) return null;\n\t\t}\n\n\t\treturn node;\n\t}\n\n\tcontains ( node ) {\n\t\twhile ( node ) {\n\t\t\tif ( node === this ) return true;\n\t\t\tnode = node.parent;\n\t\t}\n\n\t\treturn false;\n\t}\n\n\tfindLexicalBoundary () {\n\t\treturn this.parent.findLexicalBoundary();\n\t}\n\n\tfindNearest ( type ) {\n\t\tif ( typeof type === 'string' ) type = new RegExp( `^${type}$` );\n\t\tif ( type.test( this.type ) ) return this;\n\t\treturn this.parent.findNearest( type );\n\t}\n\n\tunparenthesizedParent () {\n\t\tlet node = this.parent;\n\t\twhile ( node && node.type === 'ParenthesizedExpression' ) {\n\t\t\tnode = node.parent;\n\t\t}\n\t\treturn node;\n\t}\n\n\tunparenthesize () {\n\t\tlet node = this;\n\t\twhile ( node.type === 'ParenthesizedExpression' ) {\n\t\t\tnode = node.expression;\n\t\t}\n\t\treturn node;\n\t}\n\n\tfindScope ( functionScope ) {\n\t\treturn this.parent.findScope( functionScope );\n\t}\n\n\tgetIndentation () {\n\t\treturn this.parent.getIndentation();\n\t}\n\n\tinitialise ( transforms ) {\n\t\tfor ( var key of this.keys ) {\n\t\t\tconst value = this[ key ];\n\n\t\t\tif ( Array.isArray( value ) ) {\n\t\t\t\tvalue.forEach( node => node && node.initialise( transforms ) );\n\t\t\t} else if ( value && typeof value === 'object' ) {\n\t\t\t\tvalue.initialise( transforms );\n\t\t\t}\n\t\t}\n\t}\n\n\ttoJSON () {\n\t\treturn toJSON( this );\n\t}\n\n\ttoString () {\n\t\treturn this.program.magicString.original.slice( this.start, this.end );\n\t}\n\n\ttranspile ( code, transforms ) {\n\t\tfor ( const key of this.keys ) {\n\t\t\tconst value = this[ key ];\n\n\t\t\tif ( Array.isArray( value ) ) {\n\t\t\t\tvalue.forEach( node => node && node.transpile( code, transforms ) );\n\t\t\t} else if ( value && typeof value === 'object' ) {\n\t\t\t\tvalue.transpile( code, transforms );\n\t\t\t}\n\t\t}\n\t}\n}\n","export function isArguments ( node ) {\n\treturn node.type === 'Identifier' && node.name === 'arguments';\n}\n\nexport default function spread ( code, elements, start, argumentsArrayAlias, isNew ) {\n\tlet i = elements.length;\n\tlet firstSpreadIndex = -1;\n\n\twhile ( i-- ) {\n\t\tconst element = elements[i];\n\t\tif ( element && element.type === 'SpreadElement' ) {\n\t\t\tif ( isArguments( element.argument ) ) {\n\t\t\t\tcode.overwrite( element.argument.start, element.argument.end, argumentsArrayAlias );\n\t\t\t}\n\n\t\t\tfirstSpreadIndex = i;\n\t\t}\n\t}\n\n\tif ( firstSpreadIndex === -1 ) return false; // false indicates no spread elements\n\n\tif (isNew) {\n\t\tfor ( i = 0; i < elements.length; i += 1 ) {\n\t\t\tlet element = elements[i];\n\t\t\tif ( element.type === 'SpreadElement' ) {\n\t\t\t\tcode.remove( element.start, element.argument.start );\n\t\t\t} else {\n\t\t\t\tcode.insertRight( element.start, '[' );\n\t\t\t\tcode.insertRight( element.end, ']' );\n\t\t\t}\n\t\t}\n\n\t\treturn true; // true indicates some spread elements\n\t}\n\n\tlet element = elements[ firstSpreadIndex ];\n\tconst previousElement = elements[ firstSpreadIndex - 1 ];\n\n\tif ( !previousElement ) {\n\t\tcode.remove( start, element.start );\n\t\tcode.overwrite( element.end, elements[1].start, '.concat( ' );\n\t} else {\n\t\tcode.overwrite( previousElement.end, element.start, ' ].concat( ' );\n\t}\n\n\tfor ( i = firstSpreadIndex; i < elements.length; i += 1 ) {\n\t\telement = elements[i];\n\n\t\tif ( element ) {\n\t\t\tif ( element.type === 'SpreadElement' ) {\n\t\t\t\tcode.remove( element.start, element.argument.start );\n\t\t\t} else {\n\t\t\t\tcode.insertLeft( element.start, '[' );\n\t\t\t\tcode.insertLeft( element.end, ']' );\n\t\t\t}\n\t\t}\n\t}\n\n\treturn true; // true indicates some spread elements\n}\n","import Node from '../Node.js';\nimport spread, { isArguments } from '../../utils/spread.js';\n\nexport default class ArrayExpression extends Node {\n\tinitialise ( transforms ) {\n\t\tif ( transforms.spreadRest && this.elements.length ) {\n\t\t\tconst lexicalBoundary = this.findLexicalBoundary();\n\n\t\t\tlet i = this.elements.length;\n\t\t\twhile ( i-- ) {\n\t\t\t\tconst element = this.elements[i];\n\t\t\t\tif ( element && element.type === 'SpreadElement' && isArguments( element.argument ) ) {\n\t\t\t\t\tthis.argumentsArrayAlias = lexicalBoundary.getArgumentsArrayAlias();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tsuper.initialise( transforms );\n\t}\n\n\ttranspile ( code, transforms ) {\n\t\tif ( transforms.spreadRest ) {\n\t\t\t// erase trailing comma after last array element if not an array hole\n\t\t\tif ( this.elements.length ) {\n\t\t\t\tlet lastElement = this.elements[ this.elements.length - 1 ];\n\t\t\t\tif ( lastElement && /\\s*,/.test( code.original.slice( lastElement.end, this.end ) ) ) {\n\t\t\t\t\tcode.overwrite( lastElement.end, this.end - 1, ' ' );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ( this.elements.length === 1 ) {\n\t\t\t\tconst element = this.elements[0];\n\n\t\t\t\tif ( element && element.type === 'SpreadElement' ) {\n\t\t\t\t\t// special case – [ ...arguments ]\n\t\t\t\t\tif ( isArguments( element.argument ) ) {\n\t\t\t\t\t\tcode.overwrite( this.start, this.end, `[].concat( ${this.argumentsArrayAlias} )` ); // TODO if this is the only use of argsArray, don't bother concating\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcode.overwrite( this.start, element.argument.start, '[].concat( ' );\n\t\t\t\t\t\tcode.overwrite( element.end, this.end, ' )' );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tconst hasSpreadElements = spread( code, this.elements, this.start, this.argumentsArrayAlias );\n\n\t\t\t\tif ( hasSpreadElements ) {\n\t\t\t\t\tcode.overwrite( this.end - 1, this.end, ')' );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tsuper.transpile( code, transforms );\n\t}\n}\n","import Node from '../Node.js';\n\nexport default class ArrowFunctionExpression extends Node {\n\tinitialise ( transforms ) {\n\t\tthis.body.createScope();\n\t\tsuper.initialise( transforms );\n\t}\n\n\ttranspile ( code, transforms ) {\n\t\tif ( transforms.arrow ) {\n\t\t\t// remove arrow\n\t\t\tlet charIndex = this.body.start;\n\t\t\twhile ( code.original[ charIndex ] !== '=' ) {\n\t\t\t\tcharIndex -= 1;\n\t\t\t}\n\t\t\tcode.remove( charIndex, this.body.start );\n\n\t\t\t// wrap naked parameter\n\t\t\tif ( this.params.length === 1 && this.start === this.params[0].start ) {\n\t\t\t\tcode.insertRight( this.params[0].start, '(' );\n\t\t\t\tcode.insertLeft( this.params[0].end, ')' );\n\t\t\t}\n\n\t\t\t// add function\n\t\t\tif ( this.parent && this.parent.type === 'ExpressionStatement' ) {\n\t\t\t\t// standalone expression statement\n\t\t\t\tcode.insertRight( this.start, '(function' );\n\t\t\t\tcode.insertRight( this.end, ')' );\n\t\t\t} else {\n\t\t\t\tcode.insertRight( this.start, 'function ' );\n\t\t\t}\n\t\t}\n\n\t\tsuper.transpile( code, transforms );\n\t}\n}\n","export default function locate ( source, index ) {\n\tvar lines = source.split( '\\n' );\n\tvar len = lines.length;\n\n\tvar lineStart = 0;\n\tvar i;\n\n\tfor ( i = 0; i < len; i += 1 ) {\n\t\tvar line = lines[i];\n\t\tvar lineEnd =  lineStart + line.length + 1; // +1 for newline\n\n\t\tif ( lineEnd > index ) {\n\t\t\treturn { line: i + 1, column: index - lineStart, char: i };\n\t\t}\n\n\t\tlineStart = lineEnd;\n\t}\n\n\tthrow new Error( 'Could not determine location of character' );\n}\n","function pad ( num, len ) {\n\tlet result = String( num );\n\treturn result + repeat( ' ', len - result.length );\n}\n\nfunction repeat ( str, times ) {\n\tlet result = '';\n\twhile ( times-- ) result += str;\n\treturn result;\n}\n\nexport default function getSnippet ( source, loc, length = 1 ) {\n\tconst first = Math.max( loc.line - 5, 0 );\n\tconst last = loc.line;\n\n\tconst numDigits = String( last ).length;\n\n\tconst lines = source.split( '\\n' ).slice( first, last );\n\n\tconst lastLine = lines[ lines.length - 1 ];\n\tconst offset = lastLine.slice( 0, loc.column ).replace( /\\t/g, '  ' ).length;\n\n\tlet snippet = lines\n\t\t.map( ( line, i ) => `${pad( i + first + 1, numDigits )} : ${line.replace( /\\t/g, '  ')}` )\n\t\t.join( '\\n' );\n\n\tsnippet += '\\n' + repeat( ' ', numDigits + 3 + offset ) + repeat( '^', length );\n\n\treturn snippet;\n}\n","import locate from './locate.js';\nimport getSnippet from './getSnippet.js';\n\nexport default class CompileError extends Error {\n\tconstructor ( node, message ) {\n\t\tsuper();\n\n\t\tconst source = node.program.magicString.original;\n\t\tconst loc = locate( source, node.start );\n\n\t\tthis.name = 'CompileError';\n\t\tthis.message = message + ` (${loc.line}:${loc.column})`;\n\n\t\tthis.stack = new Error().stack.replace( new RegExp( `.+new ${this.name}.+\\\\n`, 'm' ), '' );\n\n\t\tthis.loc = loc;\n\t\tthis.snippet = getSnippet( source, loc, node.end - node.start );\n\t}\n\n\ttoString () {\n\t\treturn `${this.name}: ${this.message}\\n${this.snippet}`;\n\t}\n}\n","import Node from '../Node.js';\nimport CompileError from '../../utils/CompileError.js';\n\nexport default class AssignmentExpression extends Node {\n\tinitialise ( transforms ) {\n\t\tif ( this.left.type === 'Identifier' ) {\n\t\t\tconst declaration = this.findScope( false ).findDeclaration( this.left.name );\n\t\t\tif ( declaration && declaration.kind === 'const' ) {\n\t\t\t\tthrow new CompileError( this.left, `${this.left.name} is read-only` );\n\t\t\t}\n\n\t\t\t// special case – https://gitlab.com/Rich-Harris/buble/issues/11\n\t\t\tconst statement = declaration && declaration.node.ancestor( 3 );\n\t\t\tif ( statement && statement.type === 'ForStatement' && statement.body.contains( this ) ) {\n\t\t\t\tstatement.reassigned[ this.left.name ] = true;\n\t\t\t}\n\t\t}\n\n\t\tsuper.initialise( transforms );\n\t}\n\n\ttranspile ( code, transforms ) {\n\t\tif ( this.operator === '**=' && transforms.exponentiation ) {\n\t\t\tthis.transpileExponentiation( code, transforms );\n\t\t}\n\n\t\telse if ( /Pattern/.test( this.left.type ) && transforms.destructuring ) {\n\t\t\tthis.transpileDestructuring( code, transforms );\n\t\t}\n\n\t\tsuper.transpile( code, transforms );\n\t}\n\n\ttranspileDestructuring ( code ) {\n\t\tconst scope = this.findScope( true );\n\t\tconst assign = scope.createIdentifier( 'assign' );\n\t\tconst temporaries = [ assign ];\n\n\t\tconst start = this.start;\n\n\t\t// We need to pick out some elements from the original code,\n\t\t// interleaved with generated code. These helpers are used to\n\t\t// easily do that while keeping the order of the output\n\t\t// predictable.\n\t\tlet text = '';\n\t\tfunction use ( node ) {\n\t\t\tcode.insertRight( node.start, text );\n\t\t\tcode.move( node.start, node.end, start );\n\t\t\ttext = '';\n\t\t}\n\t\tfunction write ( string ) {\n\t\t\ttext += string;\n\t\t}\n\n\t\twrite( `(${assign} = ` );\n\t\tuse( this.right );\n\n\t\t// Walk `pattern`, generating code that assigns the value in\n\t\t// `ref` to it. When `mayDuplicate` is false, the function\n\t\t// must take care to only output `ref` once.\n\t\tfunction destructure ( pattern, ref, mayDuplicate ) {\n\t\t\tif ( pattern.type === 'Identifier' || pattern.type === 'MemberExpression' ) {\n\t\t\t\twrite( ', ' );\n\t\t\t\tuse( pattern );\n\t\t\t\twrite( ` = ${ref}` );\n\t\t\t}\n\n\t\t\telse if ( pattern.type === 'AssignmentPattern' ) {\n\t\t\t\tif ( pattern.left.type === 'Identifier' ) {\n\t\t\t\t\tconst target = pattern.left.name;\n\t\t\t\t\tlet source = ref;\n\t\t\t\t\tif ( !mayDuplicate ) {\n\t\t\t\t\t\twrite( `, ${target} = ${ref}` );\n\t\t\t\t\t\tsource = target;\n\t\t\t\t\t}\n\t\t\t\t\twrite( `, ${target} = ${source} === void 0 ? ` );\n\t\t\t\t\tuse( pattern.right );\n\t\t\t\t\twrite( ` : ${source}` );\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tconst target = scope.createIdentifier( 'temp' );\n\t\t\t\t\tlet source = ref;\n\t\t\t\t\ttemporaries.push( target );\n\t\t\t\t\tif ( !mayDuplicate ) {\n\t\t\t\t\t\twrite( `, ${target} = ${ref}` );\n\t\t\t\t\t\tsource = target;\n\t\t\t\t\t}\n\t\t\t\t\twrite( `, ${target} = ${source} === void 0 ? ` );\n\t\t\t\t\tuse( pattern.right );\n\t\t\t\t\twrite( ` : ${source}` );\n\t\t\t\t\tdestructure( pattern.left, target, true );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\telse if ( pattern.type === 'ArrayPattern' ) {\n\t\t\t\tconst elements = pattern.elements;\n\t\t\t\tif ( elements.length === 1 ) {\n\t\t\t\t\tdestructure( elements[0], `${ref}[0]`, false );\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tif ( !mayDuplicate ) {\n\t\t\t\t\t\tconst temp = scope.createIdentifier( 'array' );\n\t\t\t\t\t\ttemporaries.push( temp );\n\t\t\t\t\t\twrite( `, ${temp} = ${ref}` );\n\t\t\t\t\t\tref = temp;\n\t\t\t\t\t}\n\t\t\t\t\telements.forEach( ( element, i ) => {\n\t\t\t\t\t\tif ( element ) {\n\t\t\t\t\t\t\tif ( element.type === 'RestElement' ) {\n\t\t\t\t\t\t\t\tdestructure( element.argument, `${ref}.slice(${i})`, false );\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tdestructure( element, `${ref}[${i}]`, false );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\telse if ( pattern.type === 'ObjectPattern' ) {\n\t\t\t\tconst props = pattern.properties;\n\t\t\t\tif ( props.length == 1 ) {\n\t\t\t\t\tconst prop = props[0];\n\t\t\t\t\tconst value = prop.computed || prop.key.type !== 'Identifier' ? `${ref}[${code.slice(prop.key.start, prop.key.end)}]` : `${ref}.${prop.key.name}`;\n\t\t\t\t\tdestructure( prop.value, value, false );\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tif ( !mayDuplicate ) {\n\t\t\t\t\t\tconst temp = scope.createIdentifier( 'obj' );\n\t\t\t\t\t\ttemporaries.push( temp );\n\t\t\t\t\t\twrite( `, ${temp} = ${ref}` );\n\t\t\t\t\t\tref = temp;\n\t\t\t\t\t}\n\t\t\t\t\tprops.forEach( prop => {\n\t\t\t\t\t\tconst value = prop.computed || prop.key.type !== 'Identifier' ? `${ref}[${code.slice(prop.key.start, prop.key.end)}]` : `${ref}.${prop.key.name}`;\n\t\t\t\t\t\tdestructure( prop.value, value, false );\n\t\t\t\t\t} );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\telse {\n\t\t\t\tthrow new Error( `Unexpected node type in destructuring assignment (${pattern.type})` );\n\t\t\t}\n\t\t}\n\t\tdestructure( this.left, assign, true );\n\n\t\tif ( this.unparenthesizedParent().type === 'ExpressionStatement' ) {\n\t\t\t// no rvalue needed for expression statement\n\t\t\tcode.insertRight( start, `${text})` );\n\t\t} else {\n\t\t\t// destructuring is part of an expression - need an rvalue\n\t\t\tcode.insertRight( start, `${text}, ${assign})` );\n\t\t}\n\n\t\tcode.remove( start, this.right.start );\n\n\t\tconst statement = this.findNearest( /(?:Statement|Declaration)$/ );\n\t\tcode.insertLeft( statement.start, `var ${temporaries.join( ', ' )};\\n${statement.getIndentation()}` );\n\t}\n\n\ttranspileExponentiation ( code ) {\n\t\tconst scope = this.findScope( false );\n\t\tconst getAlias = name => {\n\t\t\tconst declaration = scope.findDeclaration( name );\n\t\t\treturn declaration ? declaration.name : name;\n\t\t};\n\n\t\t// first, the easy part – `**=` -> `=`\n\t\tlet charIndex = this.left.end;\n\t\twhile ( code.original[ charIndex ] !== '*' ) charIndex += 1;\n\t\tcode.remove( charIndex, charIndex + 2 );\n\n\t\t// how we do the next part depends on a number of factors – whether\n\t\t// this is a top-level statement, and whether we're updating a\n\t\t// simple or complex reference\n\t\tlet base;\n\n\t\tconst left = this.left.unparenthesize();\n\n\t\tif ( left.type === 'Identifier' ) {\n\t\t\tbase = getAlias( left.name );\n\t\t} else if ( left.type === 'MemberExpression' ) {\n\t\t\tlet object;\n\t\t\tlet needsObjectVar = false;\n\t\t\tlet property;\n\t\t\tlet needsPropertyVar = false;\n\n\t\t\tconst statement = this.findNearest( /(?:Statement|Declaration)$/ );\n\t\t\tconst i0 = statement.getIndentation();\n\n\t\t\tif ( left.property.type === 'Identifier' ) {\n\t\t\t\tproperty = left.computed ? getAlias( left.property.name ) : left.property.name;\n\t\t\t} else {\n\t\t\t\tproperty = scope.createIdentifier( 'property' );\n\t\t\t\tneedsPropertyVar = true;\n\t\t\t}\n\n\t\t\tif ( left.object.type === 'Identifier' ) {\n\t\t\t\tobject = getAlias( left.object.name );\n\t\t\t} else {\n\t\t\t\tobject = scope.createIdentifier( 'object' );\n\t\t\t\tneedsObjectVar = true;\n\t\t\t}\n\n\t\t\tif ( left.start === statement.start ) {\n\t\t\t\tif ( needsObjectVar && needsPropertyVar ) {\n\t\t\t\t\tcode.insertRight( statement.start, `var ${object} = ` );\n\t\t\t\t\tcode.overwrite( left.object.end, left.property.start, `;\\n${i0}var ${property} = ` );\n\t\t\t\t\tcode.overwrite( left.property.end, left.end, `;\\n${i0}${object}[${property}]` );\n\t\t\t\t}\n\n\t\t\t\telse if ( needsObjectVar ) {\n\t\t\t\t\tcode.insertRight( statement.start, `var ${object} = ` );\n\t\t\t\t\tcode.insertLeft( left.object.end, `;\\n${i0}` );\n\t\t\t\t\tcode.insertLeft( left.object.end, object );\n\t\t\t\t}\n\n\t\t\t\telse if ( needsPropertyVar ) {\n\t\t\t\t\tcode.insertRight( left.property.start, `var ${property} = ` );\n\t\t\t\t\tcode.insertLeft( left.property.end, `;\\n${i0}` );\n\t\t\t\t\tcode.move( left.property.start, left.property.end, this.start );\n\n\t\t\t\t\tcode.insertLeft( left.object.end, `[${property}]` );\n\t\t\t\t\tcode.remove( left.object.end, left.property.start );\n\t\t\t\t\tcode.remove( left.property.end, left.end );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\telse {\n\t\t\t\tlet declarators = [];\n\t\t\t\tif ( needsObjectVar ) declarators.push( object );\n\t\t\t\tif ( needsPropertyVar ) declarators.push( property );\n\n\t\t\t\tif ( declarators.length ) {\n\t\t\t\t\tcode.insertRight( statement.start, `var ${declarators.join( ', ' )};\\n${i0}` );\n\t\t\t\t}\n\n\t\t\t\tif ( needsObjectVar && needsPropertyVar ) {\n\t\t\t\t\tcode.insertRight( left.start, `( ${object} = ` );\n\t\t\t\t\tcode.overwrite( left.object.end, left.property.start, `, ${property} = ` );\n\t\t\t\t\tcode.overwrite( left.property.end, left.end, `, ${object}[${property}]` );\n\t\t\t\t}\n\n\t\t\t\telse if ( needsObjectVar ) {\n\t\t\t\t\tcode.insertRight( left.start, `( ${object} = ` );\n\t\t\t\t\tcode.insertLeft( left.object.end, `, ${object}` );\n\t\t\t\t}\n\n\t\t\t\telse if ( needsPropertyVar ) {\n\t\t\t\t\tcode.insertRight( left.property.start, `( ${property} = ` );\n\t\t\t\t\tcode.insertLeft( left.property.end, `, ` );\n\t\t\t\t\tcode.move( left.property.start, left.property.end, left.start );\n\n\t\t\t\t\tcode.overwrite( left.object.end, left.property.start, `[${property}]` );\n\t\t\t\t\tcode.remove( left.property.end, left.end );\n\t\t\t\t}\n\n\t\t\t\tif ( needsPropertyVar ) {\n\t\t\t\t\tcode.insertLeft( this.end, ` )` );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tbase = object + ( left.computed || needsPropertyVar ? `[${property}]` : `.${property}` );\n\t\t}\n\n\t\tcode.insertRight( this.right.start, `Math.pow( ${base}, ` );\n\t\tcode.insertLeft( this.right.end, ` )` );\n\t}\n}\n","import Node from '../Node.js';\n\nexport default class BinaryExpression extends Node {\n\ttranspile ( code, transforms ) {\n\t\tif ( this.operator === '**' && transforms.exponentiation ) {\n\t\t\tcode.insertRight( this.start, `Math.pow( ` );\n\t\t\tcode.overwrite( this.left.end, this.right.start, `, ` );\n\t\t\tcode.insertLeft( this.end, ` )` );\n\t\t}\n\t\tsuper.transpile( code, transforms );\n\t}\n}\n","export const loopStatement = /(?:For(?:In|Of)?|While)Statement/;\n","import Node from '../Node.js';\nimport CompileError from '../../utils/CompileError.js';\nimport { loopStatement } from '../../utils/patterns.js';\n\nexport default class BreakStatement extends Node {\n\tinitialise () {\n\t\tconst loop = this.findNearest( loopStatement );\n\t\tconst switchCase = this.findNearest( 'SwitchCase' );\n\n\t\tif ( loop && ( !switchCase || loop.depth > switchCase.depth ) ) {\n\t\t\tloop.canBreak = true;\n\t\t\tthis.loop = loop;\n\t\t}\n\t}\n\n\ttranspile ( code ) {\n\t\tif ( this.loop && this.loop.shouldRewriteAsFunction ) {\n\t\t\tif ( this.label ) throw new CompileError( this, 'Labels are not currently supported in a loop with locally-scoped variables' );\n\t\t\tcode.overwrite( this.start, this.start + 5, `return 'break'` );\n\t\t}\n\t}\n}\n","import Node from '../Node.js';\nimport spread, { isArguments } from '../../utils/spread.js';\n\nexport default class CallExpression extends Node {\n\tinitialise ( transforms ) {\n\t\tif ( transforms.spreadRest && this.arguments.length > 1 ) {\n\t\t\tconst lexicalBoundary = this.findLexicalBoundary();\n\n\t\t\tlet i = this.arguments.length;\n\t\t\twhile ( i-- ) {\n\t\t\t\tconst arg = this.arguments[i];\n\t\t\t\tif ( arg.type === 'SpreadElement' && isArguments( arg.argument ) ) {\n\t\t\t\t\tthis.argumentsArrayAlias = lexicalBoundary.getArgumentsArrayAlias();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tsuper.initialise( transforms );\n\t}\n\n\ttranspile ( code, transforms ) {\n\t\tif ( transforms.spreadRest && this.arguments.length ) {\n\t\t\tlet hasSpreadElements = false;\n\t\t\tlet context;\n\n\t\t\tconst firstArgument = this.arguments[0];\n\n\t\t\tif ( this.arguments.length === 1 ) {\n\t\t\t\tif ( firstArgument.type === 'SpreadElement' ) {\n\t\t\t\t\tcode.remove( firstArgument.start, firstArgument.argument.start );\n\t\t\t\t\thasSpreadElements = true;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\thasSpreadElements = spread( code, this.arguments, firstArgument.start, this.argumentsArrayAlias );\n\t\t\t}\n\n\t\t\tif ( hasSpreadElements ) {\n\n\t\t\t\t// we need to handle super() and super.method() differently\n\t\t\t\t// due to its instance\n\t\t\t\tlet _super = null;\n\t\t\t\tif ( this.callee.type === 'Super' ) {\n\t\t\t\t\t_super = this.callee;\n\t\t\t\t}\n\t\t\t\telse if ( this.callee.type === 'MemberExpression' && this.callee.object.type === 'Super' ) {\n\t\t\t\t\t_super = this.callee.object;\n\t\t\t\t}\n\n\t\t\t\tif ( !_super && this.callee.type === 'MemberExpression' ) {\n\t\t\t\t\tif ( this.callee.object.type === 'Identifier' ) {\n\t\t\t\t\t\tcontext = this.callee.object.name;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcontext = this.findScope( true ).createIdentifier( 'ref' );\n\t\t\t\t\t\tconst callExpression = this.callee.object;\n\t\t\t\t\t\tconst enclosure = callExpression.findNearest( /Function/ );\n\t\t\t\t\t\tconst block = enclosure ? enclosure.body.body\n\t\t\t\t\t\t\t: callExpression.findNearest( /^Program$/ ).body;\n\t\t\t\t\t\tconst lastStatementInBlock = block[ block.length - 1 ];\n\t\t\t\t\t\tconst i0 = lastStatementInBlock.getIndentation();\n\t\t\t\t\t\tcode.insertRight( callExpression.start, `(${context} = ` );\n\t\t\t\t\t\tcode.insertLeft( callExpression.end, `)` );\n\t\t\t\t\t\tcode.insertLeft( lastStatementInBlock.end, `\\n${i0}var ${context};` );\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tcontext = 'void 0';\n\t\t\t\t}\n\n\t\t\t\tcode.insertLeft( this.callee.end, '.apply' );\n\n\t\t\t\tif ( _super ) {\n\t\t\t\t\t_super.noCall = true; // bit hacky...\n\n\t\t\t\t\tif ( this.arguments.length > 1 ) {\n\t\t\t\t\t\tif ( firstArgument.type !== 'SpreadElement' ) {\n\t\t\t\t\t\t\tcode.insertRight( firstArgument.start, `[ ` );\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tcode.insertLeft( this.arguments[ this.arguments.length - 1 ].end, ' )' );\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\telse if ( this.arguments.length === 1 ) {\n\t\t\t\t\tcode.insertRight( firstArgument.start, `${context}, ` );\n\t\t\t\t} else {\n\t\t\t\t\tif ( firstArgument.type === 'SpreadElement' ) {\n\t\t\t\t\t\tcode.insertLeft( firstArgument.start, `${context}, ` );\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcode.insertLeft( firstArgument.start, `${context}, [ ` );\n\t\t\t\t\t}\n\n\t\t\t\t\tcode.insertLeft( this.arguments[ this.arguments.length - 1 ].end, ' )' );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tsuper.transpile( code, transforms );\n\t}\n}\n","export function findIndex ( array, fn ) {\n\tfor ( let i = 0; i < array.length; i += 1 ) {\n\t\tif ( fn( array[i], i ) ) return i;\n\t}\n\n\treturn -1;\n}\n\nexport function find ( array, fn ) {\n\treturn array[ findIndex( array, fn ) ];\n}\n","let reserved = Object.create( null );\n'do if in for let new try var case else enum eval null this true void with await break catch class const false super throw while yield delete export import public return static switch typeof default extends finally package private continue debugger function arguments interface protected implements instanceof'.split( ' ' )\n\t.forEach( word => reserved[ word ] = true );\n\nexport default reserved;\n","import Node from '../Node.js';\nimport { findIndex } from '../../utils/array.js';\nimport reserved from '../../utils/reserved.js';\n\n// TODO this code is pretty wild, tidy it up\nexport default class ClassBody extends Node {\n\ttranspile ( code, transforms, inFunctionExpression, superName ) {\n\t\tif ( transforms.classes ) {\n\t\t\tconst name = this.parent.name;\n\n\t\t\tconst indentStr = code.getIndentString();\n\t\t\tconst i0 = this.getIndentation() + ( inFunctionExpression ? indentStr : '' );\n\t\t\tconst i1 = i0 + indentStr;\n\n\t\t\tconst constructorIndex = findIndex( this.body, node => node.kind === 'constructor' );\n\t\t\tconst constructor = this.body[ constructorIndex ];\n\n\t\t\tlet introBlock = '';\n\t\t\tlet outroBlock = '';\n\n\t\t\tif ( this.body.length ) {\n\t\t\t\tcode.remove( this.start, this.body[0].start );\n\t\t\t\tcode.remove( this.body[ this.body.length - 1 ].end, this.end );\n\t\t\t} else {\n\t\t\t\tcode.remove( this.start, this.end );\n\t\t\t}\n\n\t\t\tif ( constructor ) {\n\t\t\t\tconstructor.value.body.isConstructorBody = true;\n\n\t\t\t\tconst previousMethod = this.body[ constructorIndex - 1 ];\n\t\t\t\tconst nextMethod = this.body[ constructorIndex + 1 ];\n\n\t\t\t\t// ensure constructor is first\n\t\t\t\tif ( constructorIndex > 0 ) {\n\t\t\t\t\tcode.remove( previousMethod.end, constructor.start );\n\t\t\t\t\tcode.move( constructor.start, nextMethod ? nextMethod.start : this.end - 1, this.body[0].start );\n\t\t\t\t}\n\n\t\t\t\tif ( !inFunctionExpression ) code.insertLeft( constructor.end, ';' );\n\t\t\t}\n\n\t\t\tlet namedFunctions = this.program.options.namedFunctionExpressions !== false;\n\t\t\tlet namedConstructor = namedFunctions || this.parent.superClass || this.parent.type !== 'ClassDeclaration';\n\t\t\tif ( this.parent.superClass ) {\n\t\t\t\tlet inheritanceBlock = `if ( ${superName} ) ${name}.__proto__ = ${superName};\\n${i0}${name}.prototype = Object.create( ${superName} && ${superName}.prototype );\\n${i0}${name}.prototype.constructor = ${name};`;\n\n\t\t\t\tif ( constructor ) {\n\t\t\t\t\tintroBlock += `\\n\\n${i0}` + inheritanceBlock;\n\t\t\t\t} else {\n\t\t\t\t\tconst fn = `function ${name} () {` + ( superName ?\n\t\t\t\t\t\t`\\n${i1}${superName}.apply(this, arguments);\\n${i0}}` :\n\t\t\t\t\t\t`}` ) + ( inFunctionExpression ? '' : ';' ) + ( this.body.length ? `\\n\\n${i0}` : '' );\n\n\t\t\t\t\tinheritanceBlock = fn + inheritanceBlock;\n\t\t\t\t\tintroBlock += inheritanceBlock + `\\n\\n${i0}`;\n\t\t\t\t}\n\t\t\t} else if ( !constructor ) {\n\t\t\t\tlet fn = 'function ' + (namedConstructor ? name + ' ' : '') + '() {}';\n\t\t\t\tif ( this.parent.type === 'ClassDeclaration' ) fn += ';';\n\t\t\t\tif ( this.body.length ) fn += `\\n\\n${i0}`;\n\n\t\t\t\tintroBlock += fn;\n\t\t\t}\n\n\t\t\tconst scope = this.findScope( false );\n\n\t\t\tlet prototypeGettersAndSetters = [];\n\t\t\tlet staticGettersAndSetters = [];\n\t\t\tlet prototypeAccessors;\n\t\t\tlet staticAccessors;\n\n\t\t\tthis.body.forEach( ( method, i ) => {\n\t\t\t\tif ( method.kind === 'constructor' ) {\n\t\t\t\t\tlet constructorName = namedConstructor ? ' ' + name : '';\n\t\t\t\t\tcode.overwrite( method.key.start, method.key.end, `function${constructorName}` );\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif ( method.static ) {\n\t\t\t\t\tconst len = code.original[ method.start + 6 ] == ' ' ? 7 : 6;\n\t\t\t\t\tcode.remove( method.start, method.start + len );\n\t\t\t\t}\n\n\t\t\t\tconst isAccessor = method.kind !== 'method';\n\t\t\t\tlet lhs;\n\n\t\t\t\tlet methodName = method.key.name;\n\t\t\t\tif ( reserved[ methodName ] || method.value.body.scope.references[methodName] ) {\n\t\t\t\t\tmethodName = scope.createIdentifier( methodName );\n\t\t\t\t}\n\n\t\t\t\t// when method name is a string or a number let's pretend it's a computed method\n\n\t\t\t\tlet fake_computed = false;\n\t\t\t\tif ( ! method.computed && method.key.type === 'Literal' ) {\n\t\t\t\t\tfake_computed = true;\n\t\t\t\t\tmethod.computed = true;\n\t\t\t\t}\n\n\t\t\t\tif ( isAccessor ) {\n\t\t\t\t\tif ( method.computed ) {\n\t\t\t\t\t\tthrow new Error( 'Computed accessor properties are not currently supported' );\n\t\t\t\t\t}\n\n\t\t\t\t\tcode.remove( method.start, method.key.start );\n\n\t\t\t\t\tif ( method.static ) {\n\t\t\t\t\t\tif ( !~staticGettersAndSetters.indexOf( method.key.name ) ) staticGettersAndSetters.push( method.key.name );\n\t\t\t\t\t\tif ( !staticAccessors ) staticAccessors = scope.createIdentifier( 'staticAccessors' );\n\n\t\t\t\t\t\tlhs = `${staticAccessors}`;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif ( !~prototypeGettersAndSetters.indexOf( method.key.name ) ) prototypeGettersAndSetters.push( method.key.name );\n\t\t\t\t\t\tif ( !prototypeAccessors ) prototypeAccessors = scope.createIdentifier( 'prototypeAccessors' );\n\n\t\t\t\t\t\tlhs = `${prototypeAccessors}`;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tlhs = method.static ?\n\t\t\t\t\t\t`${name}` :\n\t\t\t\t\t\t`${name}.prototype`;\n\t\t\t\t}\n\n\t\t\t\tif ( !method.computed ) lhs += '.';\n\n\t\t\t\tconst insertNewlines = ( constructorIndex > 0 && i === constructorIndex + 1 ) ||\n\t\t\t\t                       ( i === 0 && constructorIndex === this.body.length - 1 );\n\n\t\t\t\tif ( insertNewlines ) lhs = `\\n\\n${i0}${lhs}`;\n\n\t\t\t\tlet c = method.key.end;\n\t\t\t\tif ( method.computed ) {\n\t\t\t\t\tif ( fake_computed ) {\n\t\t\t\t\t\tcode.insertRight( method.key.start, '[' );\n\t\t\t\t\t\tcode.insertLeft( method.key.end, ']' );\n\t\t\t\t\t} else {\n\t\t\t\t\t\twhile ( code.original[c] !== ']' ) c += 1;\n\t\t\t\t\t\tc += 1;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tcode.insertRight( method.start, lhs );\n\n\t\t\t\tconst funcName = method.computed || isAccessor || !namedFunctions ? '' : `${methodName} `;\n\t\t\t\tconst rhs = ( isAccessor ? `.${method.kind}` : '' ) + ` = function` + ( method.value.generator ? '* ' : ' ' ) + funcName;\n\t\t\t\tcode.remove( c, method.value.start );\n\t\t\t\tcode.insertRight( method.value.start, rhs );\n\t\t\t\tcode.insertLeft( method.end, ';' );\n\n\t\t\t\tif ( method.value.generator ) code.remove( method.start, method.key.start );\n\t\t\t});\n\n\t\t\tif ( prototypeGettersAndSetters.length || staticGettersAndSetters.length ) {\n\t\t\t\tlet intro = [];\n\t\t\t\tlet outro = [];\n\n\t\t\t\tif ( prototypeGettersAndSetters.length ) {\n\t\t\t\t\tintro.push( `var ${prototypeAccessors} = { ${prototypeGettersAndSetters.map( name => `${name}: { configurable: true }` ).join( ',' )} };` );\n\t\t\t\t\toutro.push( `Object.defineProperties( ${name}.prototype, ${prototypeAccessors} );` );\n\t\t\t\t}\n\n\t\t\t\tif ( staticGettersAndSetters.length ) {\n\t\t\t\t\tintro.push( `var ${staticAccessors} = { ${staticGettersAndSetters.map( name => `${name}: { configurable: true }` ).join( ',' )} };` );\n\t\t\t\t\toutro.push( `Object.defineProperties( ${name}, ${staticAccessors} );` );\n\t\t\t\t}\n\n\t\t\t\tif ( constructor ) introBlock += `\\n\\n${i0}`;\n\t\t\t\tintroBlock += intro.join( `\\n${i0}` );\n\t\t\t\tif ( !constructor ) introBlock += `\\n\\n${i0}`;\n\n\t\t\t\toutroBlock += `\\n\\n${i0}` + outro.join( `\\n${i0}` );\n\t\t\t}\n\n\t\t\tif ( constructor ) {\n\t\t\t\tcode.insertLeft( constructor.end, introBlock );\n\t\t\t} else {\n\t\t\t\tcode.insertRight( this.start, introBlock );\n\t\t\t}\n\n\t\t\tcode.insertLeft( this.end, outroBlock );\n\t\t}\n\n\t\tsuper.transpile( code, transforms );\n\t}\n}\n","// TODO this function is slightly flawed – it works on the original string,\n// not its current edited state.\n// That's not a problem for the way that it's currently used, but it could\n// be in future...\nexport default function deindent ( node, code ) {\n\tconst start = node.start;\n\tconst end = node.end;\n\n\tconst indentStr = code.getIndentString();\n\tconst indentStrLen = indentStr.length;\n\tconst indentStart = start - indentStrLen;\n\n\tif ( !node.program.indentExclusions[ indentStart ]\n\t&& code.original.slice( indentStart, start ) === indentStr ) {\n\t\tcode.remove( indentStart, start );\n\t}\n\n\tconst pattern = new RegExp( indentStr + '\\\\S', 'g' );\n\tconst slice = code.original.slice( start, end );\n\tlet match;\n\n\twhile ( match = pattern.exec( slice ) ) {\n\t\tconst removeStart = start + match.index;\n\t\tif ( !node.program.indentExclusions[ removeStart ] ) {\n\t\t\tcode.remove( removeStart, removeStart + indentStrLen );\n\t\t}\n\t}\n}\n","import Node from '../Node.js';\nimport deindent from '../../utils/deindent.js';\n\nexport default class ClassDeclaration extends Node {\n\tinitialise ( transforms ) {\n\t\tthis.name = this.id.name;\n\t\tthis.findScope( true ).addDeclaration( this.id, 'class' );\n\n\t\tsuper.initialise( transforms );\n\t}\n\n\ttranspile ( code, transforms ) {\n\t\tif ( transforms.classes ) {\n\t\t\tif ( !this.superClass ) deindent( this.body, code );\n\n\t\t\tconst superName = this.superClass && ( this.superClass.name || 'superclass' );\n\n\t\t\tconst i0 = this.getIndentation();\n\t\t\tconst i1 = i0 + code.getIndentString();\n\n\t\t\t// if this is an export default statement, we have to move the export to\n\t\t\t// after the declaration, because `export default var Foo = ...` is illegal\n\t\t\tconst syntheticDefaultExport = this.parent.type === 'ExportDefaultDeclaration' ?\n\t\t\t\t`\\n\\n${i0}export default ${this.id.name};` :\n\t\t\t\t'';\n\n\t\t\tif ( syntheticDefaultExport ) code.remove( this.parent.start, this.start );\n\n\t\t\tcode.overwrite( this.start, this.id.start, 'var ' );\n\n\t\t\tif ( this.superClass ) {\n\t\t\t\tif ( this.superClass.end === this.body.start ) {\n\t\t\t\t\tcode.remove( this.id.end, this.superClass.start );\n\t\t\t\t\tcode.insertLeft( this.id.end, ` = (function (${superName}) {\\n${i1}` );\n\t\t\t\t} else {\n\t\t\t\t\tcode.overwrite( this.id.end, this.superClass.start, ' = ' );\n\t\t\t\t\tcode.overwrite( this.superClass.end, this.body.start, `(function (${superName}) {\\n${i1}` );\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif ( this.id.end === this.body.start ) {\n\t\t\t\t\tcode.insertLeft( this.id.end, ' = ' );\n\t\t\t\t} else {\n\t\t\t\t\tcode.overwrite( this.id.end, this.body.start, ' = ' );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.body.transpile( code, transforms, !!this.superClass, superName );\n\n\t\t\tif ( this.superClass ) {\n\t\t\t\tcode.insertLeft( this.end, `\\n\\n${i1}return ${this.name};\\n${i0}}(` );\n\t\t\t\tcode.move( this.superClass.start, this.superClass.end, this.end );\n\t\t\t\tcode.insertRight( this.end, `));${syntheticDefaultExport}` );\n\t\t\t} else if ( syntheticDefaultExport ) {\n\t\t\t\tcode.insertRight( this.end, syntheticDefaultExport );\n\t\t\t}\n\t\t}\n\n\t\telse {\n\t\t\tthis.body.transpile( code, transforms, false, null );\n\t\t}\n\t}\n}\n","import Node from '../Node.js';\n\nexport default class ClassExpression extends Node {\n\tinitialise ( transforms ) {\n\t\tthis.name = this.id ? this.id.name :\n\t\t            this.parent.type === 'VariableDeclarator' ? this.parent.id.name :\n\t\t            this.parent.type === 'AssignmentExpression' ? this.parent.left.name :\n\t\t            this.findScope( true ).createIdentifier( 'anonymous' );\n\n\t\tsuper.initialise( transforms );\n\t}\n\n\ttranspile ( code, transforms ) {\n\t\tif ( transforms.classes ) {\n\t\t\tconst superName = this.superClass && ( this.superClass.name || 'superclass' );\n\n\t\t\tconst i0 = this.getIndentation();\n\t\t\tconst i1 = i0 + code.getIndentString();\n\n\t\t\tif ( this.superClass ) {\n\t\t\t\tcode.remove( this.start, this.superClass.start );\n\t\t\t\tcode.remove( this.superClass.end, this.body.start );\n\t\t\t\tcode.insertLeft( this.start, `(function (${superName}) {\\n${i1}` );\n\t\t\t} else {\n\t\t\t\tcode.overwrite( this.start, this.body.start, `(function () {\\n${i1}` );\n\t\t\t}\n\n\t\t\tthis.body.transpile( code, transforms, true, superName );\n\n\t\t\tconst outro = `\\n\\n${i1}return ${this.name};\\n${i0}}(`;\n\n\t\t\tif ( this.superClass ) {\n\t\t\t\tcode.insertLeft( this.end, outro );\n\t\t\t\tcode.move( this.superClass.start, this.superClass.end, this.end );\n\t\t\t\tcode.insertRight( this.end, '))' );\n\t\t\t} else {\n\t\t\t\tcode.insertLeft( this.end, `\\n\\n${i1}return ${this.name};\\n${i0}}())` );\n\t\t\t}\n\t\t}\n\n\t\telse {\n\t\t\tthis.body.transpile( code, transforms, false );\n\t\t}\n\t}\n}\n","import Node from '../Node.js';\nimport CompileError from '../../utils/CompileError.js';\nimport { loopStatement } from '../../utils/patterns.js';\n\nexport default class ContinueStatement extends Node {\n\ttranspile ( code ) {\n\t\tconst loop = this.findNearest( loopStatement );\n\t\tif ( loop.shouldRewriteAsFunction ) {\n\t\t\tif ( this.label ) throw new CompileError( this, 'Labels are not currently supported in a loop with locally-scoped variables' );\n\t\t\tcode.overwrite( this.start, this.start + 8, 'return' );\n\t\t}\n\t}\n}\n","import Node from '../Node.js';\nimport CompileError from '../../utils/CompileError.js';\n\nexport default class ExportDefaultDeclaration extends Node {\n\tinitialise ( transforms ) {\n\t\tif ( transforms.moduleExport ) throw new CompileError( this, 'export is not supported' );\n\t\tsuper.initialise( transforms );\n\t}\n}\n","import Node from '../Node.js';\nimport CompileError from '../../utils/CompileError.js';\n\nexport default class ExportNamedDeclaration extends Node {\n\tinitialise ( transforms ) {\n\t\tif ( transforms.moduleExport ) throw new CompileError( this, 'export is not supported' );\n\t\tsuper.initialise( transforms );\n\t}\n}\n","import Node from '../../Node.js';\n\nexport default class LoopStatement extends Node {\n\tfindScope ( functionScope ) {\n\t\treturn functionScope || !this.createdScope ? this.parent.findScope( functionScope ) : this.body.scope;\n\t}\n\n\tinitialise ( transforms ) {\n\t\tthis.body.createScope();\n\t\tthis.createdScope = true;\n\n\t\t// this is populated as and when reassignments occur\n\t\tthis.reassigned = Object.create( null );\n\t\tthis.aliases = Object.create( null );\n\n\t\tsuper.initialise( transforms );\n\n\t\tif ( transforms.letConst ) {\n\t\t\t// see if any block-scoped declarations are referenced\n\t\t\t// inside function expressions\n\t\t\tconst names = Object.keys( this.body.scope.declarations );\n\n\t\t\tlet i = names.length;\n\t\t\twhile ( i-- ) {\n\t\t\t\tconst name = names[i];\n\t\t\t\tconst declaration = this.body.scope.declarations[ name ];\n\n\t\t\t\tlet j = declaration.instances.length;\n\t\t\t\twhile ( j-- ) {\n\t\t\t\t\tconst instance = declaration.instances[j];\n\t\t\t\t\tconst nearestFunctionExpression = instance.findNearest( /Function/ );\n\n\t\t\t\t\tif ( nearestFunctionExpression && nearestFunctionExpression.depth > this.depth ) {\n\t\t\t\t\t\tthis.shouldRewriteAsFunction = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif ( this.shouldRewriteAsFunction ) break;\n\t\t\t}\n\t\t}\n\t}\n\n\ttranspile ( code, transforms ) {\n\t\tconst needsBlock = this.type != 'ForOfStatement' && (\n\t\t\tthis.body.type !== 'BlockStatement'\n\t\t\t|| this.body.type === 'BlockStatement' && this.body.synthetic );\n\n\t\tif ( this.shouldRewriteAsFunction ) {\n\t\t\tconst i0 = this.getIndentation();\n\t\t\tconst i1 = i0 + code.getIndentString();\n\n\t\t\tconst argString = this.args ? ` ${this.args.join( ', ' )} ` : '';\n\t\t\tconst paramString = this.params ? ` ${this.params.join( ', ' )} ` : '';\n\n\t\t\tconst functionScope = this.findScope( true );\n\t\t\tconst loop = functionScope.createIdentifier( 'loop' );\n\n\t\t\tconst before = `var ${loop} = function (${paramString}) ` + ( this.body.synthetic ? `{\\n${i0}${code.getIndentString()}` : '' );\n\t\t\tconst after = ( this.body.synthetic ? `\\n${i0}}` : '' ) + `;\\n\\n${i0}`;\n\n\t\t\tcode.insertRight( this.body.start, before );\n\t\t\tcode.insertLeft( this.body.end, after );\n\t\t\tcode.move( this.start, this.body.start, this.body.end );\n\n\t\t\tif ( this.canBreak || this.canReturn ) {\n\t\t\t\tconst returned = functionScope.createIdentifier( 'returned' );\n\n\t\t\t\tlet insert = `{\\n${i1}var ${returned} = ${loop}(${argString});\\n`;\n\t\t\t\tif ( this.canBreak ) insert += `\\n${i1}if ( ${returned} === 'break' ) break;`;\n\t\t\t\tif ( this.canReturn ) insert += `\\n${i1}if ( ${returned} ) return ${returned}.v;`;\n\t\t\t\tinsert += `\\n${i0}}`;\n\n\t\t\t\tcode.insertRight( this.body.end, insert );\n\t\t\t} else {\n\t\t\t\tconst callExpression = `${loop}(${argString});`;\n\n\t\t\t\tif ( this.type === 'DoWhileStatement' ) {\n\t\t\t\t\tcode.overwrite( this.start, this.body.start, `do {\\n${i1}${callExpression}\\n${i0}}` );\n\t\t\t\t} else {\n\t\t\t\t\tcode.insertRight( this.body.end, callExpression );\n\t\t\t\t}\n\t\t\t}\n\t\t} else if ( needsBlock ) {\n\t\t\tcode.insertLeft( this.body.start, '{ ' );\n\t\t\tcode.insertRight( this.body.end, ' }' );\n\t\t}\n\n\t\tsuper.transpile( code, transforms );\n\t}\n}\n","export default function extractNames ( node ) {\n\tconst names = [];\n\textractors[ node.type ]( names, node );\n\treturn names;\n}\n\nconst extractors = {\n\tIdentifier ( names, node ) {\n\t\tnames.push( node );\n\t},\n\n\tObjectPattern ( names, node ) {\n\t\tfor ( const prop of node.properties ) {\n\t\t\textractors[ prop.value.type ]( names, prop.value );\n\t\t}\n\t},\n\n\tArrayPattern ( names, node ) {\n\t\tfor ( const element of node.elements )  {\n\t\t\tif ( element ) extractors[ element.type ]( names, element );\n\t\t}\n\t},\n\n\tRestElement ( names, node ) {\n\t\textractors[ node.argument.type ]( names, node.argument );\n\t},\n\n\tAssignmentPattern ( names, node ) {\n\t\textractors[ node.left.type ]( names, node.left );\n\t}\n};\n","import LoopStatement from './shared/LoopStatement.js';\nimport extractNames from '../extractNames.js';\n\nexport default class ForStatement extends LoopStatement {\n\tfindScope ( functionScope ) {\n\t\treturn functionScope || !this.createdScope ? this.parent.findScope( functionScope ) : this.body.scope;\n\t}\n\n\ttranspile ( code, transforms ) {\n\t\tconst i1 = this.getIndentation() + code.getIndentString();\n\n\t\tif ( this.shouldRewriteAsFunction ) {\n\t\t\t// which variables are declared in the init statement?\n\t\t\tconst names = this.init.type === 'VariableDeclaration' ?\n\t\t\t\t[].concat.apply( [], this.init.declarations.map( declarator => extractNames( declarator.id ) ) ) :\n\t\t\t\t[];\n\n\t\t\tconst aliases = this.aliases;\n\n\t\t\tthis.args = names.map( name => name in this.aliases ? this.aliases[ name ].outer : name );\n\t\t\tthis.params = names.map( name => name in this.aliases ? this.aliases[ name ].inner : name );\n\n\t\t\tconst updates = Object.keys( this.reassigned )\n\t\t\t\t.map( name => `${aliases[ name ].outer} = ${aliases[ name ].inner};` );\n\n\t\t\tif ( updates.length ) {\n\t\t\t\tif ( this.body.synthetic ) {\n\t\t\t\t\tcode.insertLeft( this.body.body[0].end, `; ${updates.join(` `)}` );\n\t\t\t\t} else {\n\t\t\t\t\tconst lastStatement = this.body.body[ this.body.body.length - 1 ];\n\t\t\t\t\tcode.insertLeft( lastStatement.end, `\\n\\n${i1}${updates.join(`\\n${i1}`)}` );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tsuper.transpile( code, transforms );\n\t}\n}\n","import LoopStatement from './shared/LoopStatement.js';\nimport extractNames from '../extractNames.js';\n\nexport default class ForInStatement extends LoopStatement {\n\tfindScope ( functionScope ) {\n\t\treturn functionScope || !this.createdScope ? this.parent.findScope( functionScope ) : this.body.scope;\n\t}\n\n\ttranspile ( code, transforms ) {\n\t\tif ( this.shouldRewriteAsFunction ) {\n\t\t\t// which variables are declared in the init statement?\n\t\t\tconst names = this.left.type === 'VariableDeclaration' ?\n\t\t\t\t[].concat.apply( [], this.left.declarations.map( declarator => extractNames( declarator.id ) ) ) :\n\t\t\t\t[];\n\n\t\t\tthis.args = names.map( name => name in this.aliases ? this.aliases[ name ].outer : name );\n\t\t\tthis.params = names.map( name => name in this.aliases ? this.aliases[ name ].inner : name );\n\t\t}\n\n\t\tsuper.transpile( code, transforms );\n\t}\n}\n","import { findIndex } from './array.js';\n\nconst handlers = {\n\tIdentifier: destructureIdentifier,\n\tAssignmentPattern: destructureAssignmentPattern,\n\tArrayPattern: destructureArrayPattern,\n\tObjectPattern: destructureObjectPattern\n};\n\nexport default function destructure ( code, scope, node, ref, inline, statementGenerators ) {\n\thandlers[ node.type ]( code, scope, node, ref, inline, statementGenerators );\n}\n\nfunction destructureIdentifier ( code, scope, node, ref, inline, statementGenerators ) {\n\tstatementGenerators.push( ( start, prefix, suffix ) => {\n\t\tcode.insertRight( node.start, inline ? prefix : `${prefix}var ` );\n\t\tcode.insertLeft( node.end, ` = ${ref}${suffix}` );\n\t\tcode.move( node.start, node.end, start );\n\t});\n}\n\nfunction destructureAssignmentPattern ( code, scope, node, ref, inline, statementGenerators ) {\n\tconst isIdentifier = node.left.type === 'Identifier';\n\tconst name = isIdentifier ? node.left.name : ref;\n\n\tif ( !inline ) {\n\t\tstatementGenerators.push( ( start, prefix, suffix ) => {\n\t\t\tcode.insertRight( node.left.end, `${prefix}if ( ${name} === void 0 ) ${name}` );\n\t\t\tcode.move( node.left.end, node.right.end, start );\n\t\t\tcode.insertLeft( node.right.end, suffix );\n\t\t});\n\t}\n\n\tif ( !isIdentifier ) {\n\t\tdestructure( code, scope, node.left, ref, inline, statementGenerators );\n\t}\n}\n\nfunction destructureArrayPattern ( code, scope, node, ref, inline, statementGenerators ) {\n\tlet c = node.start;\n\n\tnode.elements.forEach( ( element, i ) => {\n\t\tif ( !element ) return;\n\n\t\tif ( element.type === 'RestElement' ) {\n\t\t\thandleProperty( code, scope, c, element.argument, `${ref}.slice(${i})`, inline, statementGenerators );\n\t\t} else {\n\t\t\thandleProperty( code, scope, c, element, `${ref}[${i}]`, inline, statementGenerators );\n\t\t}\n\t\tc = element.end;\n\t});\n\n\tcode.remove( c, node.end );\n}\n\nfunction destructureObjectPattern ( code, scope, node, ref, inline, statementGenerators ) {\n\tlet c = node.start;\n\n\tnode.properties.forEach( prop => {\n\t\tlet value = prop.computed || prop.key.type !== 'Identifier' ? `${ref}[${code.slice(prop.key.start, prop.key.end)}]` : `${ref}.${prop.key.name}`;\n\t\thandleProperty( code, scope, c, prop.value, value, inline, statementGenerators );\n\t\tc = prop.end;\n\t});\n\n\tcode.remove( c, node.end );\n}\n\nfunction handleProperty ( code, scope, c, node, value, inline, statementGenerators ) {\n\tswitch ( node.type ) {\n\t\tcase 'Identifier': {\n\t\t\tcode.remove( c, node.start );\n\t\t\tdestructureIdentifier( code, scope, node, value, inline, statementGenerators );\n\t\t\tbreak;\n\t\t}\n\n\t\tcase 'AssignmentPattern': {\n\t\t\tlet name;\n\n\t\t\tconst isIdentifier = node.left.type === 'Identifier';\n\n\t\t\tif ( isIdentifier ) {\n\t\t\t\tname = node.left.name;\n\t\t\t\tconst declaration = scope.findDeclaration( name );\n\t\t\t\tif ( declaration ) name = declaration.name;\n\t\t\t} else {\n\t\t\t\tname = scope.createIdentifier( value );\n\t\t\t}\n\n\t\t\tstatementGenerators.push( ( start, prefix, suffix ) => {\n\t\t\t\tif ( inline ) {\n\t\t\t\t\tcode.insertRight( node.right.start, `${name} = ${value} === undefined ? ` );\n\t\t\t\t\tcode.insertLeft( node.right.end, ` : ${value}` );\n\t\t\t\t} else {\n\t\t\t\t\tcode.insertRight( node.right.start, `${prefix}var ${name} = ${value}; if ( ${name} === void 0 ) ${name} = ` );\n\t\t\t\t\tcode.insertLeft( node.right.end, suffix );\n\t\t\t\t}\n\n\t\t\t\tcode.move( node.right.start, node.right.end, start );\n\t\t\t});\n\n\t\t\tif ( isIdentifier ) {\n\t\t\t\tcode.remove( c, node.right.start );\n\t\t\t} else {\n\t\t\t\tcode.remove( c, node.left.start );\n\t\t\t\tcode.remove( node.left.end, node.right.start );\n\t\t\t\thandleProperty( code, scope, c, node.left, name, inline, statementGenerators );\n\t\t\t}\n\n\t\t\tbreak;\n\t\t}\n\n\t\tcase 'ObjectPattern': {\n\t\t\tcode.remove( c, c = node.start );\n\n\t\t\tif ( node.properties.length > 1 ) {\n\t\t\t\tconst ref = scope.createIdentifier( value );\n\n\t\t\t\tstatementGenerators.push( ( start, prefix, suffix ) => {\n\t\t\t\t\t// this feels a tiny bit hacky, but we can't do a\n\t\t\t\t\t// straightforward insertLeft and keep correct order...\n\t\t\t\t\tcode.insertRight( node.start, `${prefix}var ${ref} = ` );\n\t\t\t\t\tcode.overwrite( node.start, c = node.start + 1, value );\n\t\t\t\t\tcode.insertLeft( c, suffix );\n\n\t\t\t\t\tcode.move( node.start, c, start );\n\t\t\t\t});\n\n\t\t\t\tnode.properties.forEach( prop => {\n\t\t\t\t\tconst value = prop.computed || prop.key.type !== 'Identifier' ? `${ref}[${code.slice(prop.key.start, prop.key.end)}]` : `${ref}.${prop.key.name}`;\n\t\t\t\t\thandleProperty( code, scope, c, prop.value, value, inline, statementGenerators );\n\t\t\t\t\tc = prop.end;\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tconst prop = node.properties[0];\n\t\t\t\tconst value_suffix = prop.computed || prop.key.type !== 'Identifier' ? `[${code.slice(prop.key.start, prop.key.end)}]` : `.${prop.key.name}`;\n\t\t\t\thandleProperty( code, scope, c, prop.value, `${value}${value_suffix}`, inline, statementGenerators );\n\t\t\t\tc = prop.end;\n\t\t\t}\n\n\t\t\tcode.remove( c, node.end );\n\t\t\tbreak;\n\t\t}\n\n\t\tcase 'ArrayPattern': {\n\t\t\tcode.remove( c, c = node.start );\n\n\t\t\tif ( node.elements.filter( Boolean ).length > 1 ) {\n\t\t\t\tconst ref = scope.createIdentifier( value );\n\n\t\t\t\tstatementGenerators.push( ( start, prefix, suffix ) => {\n\t\t\t\t\tcode.insertRight( node.start, `${prefix}var ${ref} = ` );\n\t\t\t\t\tcode.overwrite( node.start, c = node.start + 1, value );\n\t\t\t\t\tcode.insertLeft( c, suffix );\n\n\t\t\t\t\tcode.move( node.start, c, start );\n\t\t\t\t});\n\n\t\t\t\tnode.elements.forEach( ( element, i ) => {\n\t\t\t\t\tif ( !element ) return;\n\n\t\t\t\t\tif ( element.type === 'RestElement' ) {\n\t\t\t\t\t\thandleProperty( code, scope, c, element.argument, `${ref}.slice(${i})`, inline, statementGenerators );\n\t\t\t\t\t} else {\n\t\t\t\t\t\thandleProperty( code, scope, c, element, `${ref}[${i}]`, inline, statementGenerators );\n\t\t\t\t\t}\n\t\t\t\t\tc = element.end;\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tconst index = findIndex( node.elements, Boolean );\n\t\t\t\tconst element = node.elements[ index ];\n\t\t\t\tif ( element.type === 'RestElement' ) {\n\t\t\t\t\thandleProperty( code, scope, c, element.argument, `${value}.slice(${index})`, inline, statementGenerators );\n\t\t\t\t} else {\n\t\t\t\t\thandleProperty( code, scope, c, element, `${value}[${index}]`, inline, statementGenerators );\n\t\t\t\t}\n\t\t\t\tc = element.end;\n\t\t\t}\n\n\t\t\tcode.remove( c, node.end );\n\t\t\tbreak;\n\t\t}\n\n\t\tdefault: {\n\t\t\tthrow new Error( `Unexpected node type in destructuring (${node.type})` );\n\t\t}\n\t}\n}\n","import LoopStatement from './shared/LoopStatement.js';\nimport CompileError from '../../utils/CompileError.js';\nimport destructure from '../../utils/destructure.js';\n\nexport default class ForOfStatement extends LoopStatement {\n\tinitialise ( transforms ) {\n\t\tif ( transforms.forOf && !transforms.dangerousForOf ) throw new CompileError( this, 'for...of statements are not supported. Use `transforms: { forOf: false }` to skip transformation and disable this error, or `transforms: { dangerousForOf: true }` if you know what you\\'re doing' );\n\t\tsuper.initialise( transforms );\n\t}\n\n\ttranspile ( code, transforms ) {\n\t\tif ( !transforms.dangerousForOf ) {\n\t\t\tsuper.transpile( code, transforms );\n\t\t\treturn;\n\t\t}\n\n\t\t// edge case (#80)\n\t\tif ( !this.body.body[0] ) {\n\t\t\tif ( this.left.type === 'VariableDeclaration' && this.left.kind === 'var' ) {\n\t\t\t\tcode.remove( this.start, this.left.start );\n\t\t\t\tcode.insertLeft( this.left.end, ';' );\n\t\t\t\tcode.remove( this.left.end, this.end );\n\t\t\t} else {\n\t\t\t\tcode.remove( this.start, this.end );\n\t\t\t}\n\n\t\t\treturn;\n\t\t}\n\n\t\tconst scope = this.findScope( true );\n\t\tconst i0 = this.getIndentation();\n\t\tconst i1 = i0 + code.getIndentString();\n\n\t\tconst key = scope.createIdentifier( 'i' );\n\t\tconst list = scope.createIdentifier( 'list' );\n\n\t\tif ( this.body.synthetic ) {\n\t\t\tcode.insertRight( this.left.start, `{\\n${i1}` );\n\t\t\tcode.insertLeft( this.body.body[0].end, `\\n${i0}}` );\n\t\t}\n\n\t\tconst bodyStart = this.body.body[0].start;\n\n\t\tcode.remove( this.left.end, this.right.start );\n\t\tcode.move( this.left.start, this.left.end, bodyStart );\n\n\n\t\tcode.insertRight( this.right.start, `var ${key} = 0, ${list} = ` );\n\t\tcode.insertLeft( this.right.end, `; ${key} < ${list}.length; ${key} += 1` );\n\n\t\t// destructuring. TODO non declaration destructuring\n\t\tconst declarator = this.left.type === 'VariableDeclaration' && this.left.declarations[0];\n\t\tif ( declarator && declarator.id.type !== 'Identifier' ) {\n\t\t\tlet statementGenerators = [];\n\t\t\tconst ref = scope.createIdentifier( 'ref' );\n\t\t\tdestructure( code, scope, declarator.id, ref, false, statementGenerators );\n\n\t\t\tlet suffix = `;\\n${i1}`;\n\t\t\tstatementGenerators.forEach( ( fn, i ) => {\n\t\t\t\tif ( i === statementGenerators.length - 1 ) {\n\t\t\t\t\tsuffix = `;\\n\\n${i1}`;\n\t\t\t\t}\n\n\t\t\t\tfn( bodyStart, '', suffix );\n\t\t\t});\n\n\t\t\tcode.insertLeft( this.left.start + this.left.kind.length + 1, ref );\n\t\t\tcode.insertLeft( this.left.end, ` = ${list}[${key}];\\n${i1}` );\n\t\t} else {\n\t\t\tcode.insertLeft( this.left.end, ` = ${list}[${key}];\\n\\n${i1}` );\n\t\t}\n\n\t\tsuper.transpile( code, transforms );\n\t}\n}\n","import Node from '../Node.js';\nimport CompileError from '../../utils/CompileError.js';\n\nexport default class FunctionDeclaration extends Node {\n\tinitialise ( transforms ) {\n\t\tif ( this.generator && transforms.generator ) {\n\t\t\tthrow new CompileError( this, 'Generators are not supported' );\n\t\t}\n\n\t\tthis.body.createScope();\n\n\t\tthis.findScope( true ).addDeclaration( this.id, 'function' );\n\t\tsuper.initialise( transforms );\n\t}\n}\n","import Node from '../Node.js';\nimport CompileError from '../../utils/CompileError.js';\n\nexport default class FunctionExpression extends Node {\n\tinitialise ( transforms ) {\n\t\tif ( this.generator && transforms.generator ) {\n\t\t\tthrow new CompileError( this, 'Generators are not supported' );\n\t\t}\n\n\t\tthis.body.createScope();\n\n\t\tif ( this.id ) {\n\t\t\t// function expression IDs belong to the child scope...\n\t\t\tthis.body.scope.addDeclaration( this.id, 'function' );\n\t\t}\n\n\t\tsuper.initialise( transforms );\n\n\t\tconst parent = this.parent;\n\t\tlet methodName;\n\n\t\tif ( transforms.conciseMethodProperty\n\t\t\t\t&& parent.type === 'Property'\n\t\t\t\t&& parent.kind === 'init'\n\t\t\t\t&& parent.method\n\t\t\t\t&& parent.key.type === 'Identifier' ) {\n\t\t\t// object literal concise method\n\t\t\tmethodName = parent.key.name;\n\t\t}\n\t\telse if ( transforms.classes\n\t\t\t\t&& parent.type === 'MethodDefinition'\n\t\t\t\t&& parent.kind === 'method'\n\t\t\t\t&& parent.key.type === 'Identifier' ) {\n\t\t\t// method definition in a class\n\t\t\tmethodName = parent.key.name;\n\t\t}\n\t\telse if ( this.id && this.id.type === 'Identifier' ) {\n\t\t\t// naked function expression\n\t\t\tmethodName = this.id.alias || this.id.name;\n\t\t}\n\n\t\tif ( methodName ) {\n\t\t\tfor ( const param of this.params ) {\n\t\t\t\tif ( param.type === 'Identifier' && methodName === param.name ) {\n\t\t\t\t\t// workaround for Safari 9/WebKit bug:\n\t\t\t\t\t// https://gitlab.com/Rich-Harris/buble/issues/154\n\t\t\t\t\t// change parameter name when same as method name\n\n\t\t\t\t\tconst scope = this.body.scope;\n\t\t\t\t\tconst declaration = scope.declarations[ methodName ];\n\n\t\t\t\t\tconst alias = scope.createIdentifier( methodName );\n\t\t\t\t\tparam.alias = alias;\n\n\t\t\t\t\tfor ( const identifier of declaration.instances ) {\n\t\t\t\t\t\tidentifier.alias = alias;\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n","export default function isReference ( node, parent ) {\n\tif ( node.type === 'MemberExpression' ) {\n\t\treturn !node.computed && isReference( node.object, node );\n\t}\n\n\tif ( node.type === 'Identifier' ) {\n\t\t// the only time we could have an identifier node without a parent is\n\t\t// if it's the entire body of a function without a block statement –\n\t\t// i.e. an arrow function expression like `a => a`\n\t\tif ( !parent ) return true;\n\n\t\tif ( /(Function|Class)Expression/.test( parent.type ) ) return false;\n\n\t\tif ( parent.type === 'VariableDeclarator' ) return node === parent.init;\n\n\t\t// TODO is this right?\n\t\tif ( parent.type === 'MemberExpression' || parent.type === 'MethodDefinition' ) {\n\t\t\treturn parent.computed || node === parent.object;\n\t\t}\n\n\t\tif ( parent.type === 'ArrayPattern' ) return false;\n\n\t\t// disregard the `bar` in `{ bar: foo }`, but keep it in `{ [bar]: foo }`\n\t\tif ( parent.type === 'Property' ) {\n\t\t\tif ( parent.parent.type === 'ObjectPattern' ) return false;\n\t\t\treturn parent.computed || node === parent.value;\n\t\t}\n\n\t\t// disregard the `bar` in `class Foo { bar () {...} }`\n\t\tif ( parent.type === 'MethodDefinition' ) return false;\n\n\t\t// disregard the `bar` in `export { foo as bar }`\n\t\tif ( parent.type === 'ExportSpecifier' && node !== parent.local ) return false;\n\n\t\treturn true;\n\t}\n}\n","import Node from '../Node.js';\nimport isReference from '../../utils/isReference.js';\nimport { loopStatement } from '../../utils/patterns.js';\n\nexport default class Identifier extends Node {\n\tfindScope ( functionScope ) {\n\t\tif ( this.parent.params && ~this.parent.params.indexOf( this ) ) {\n\t\t\treturn this.parent.body.scope;\n\t\t}\n\n\t\tif ( this.parent.type === 'FunctionExpression' && this === this.parent.id ) {\n\t\t\treturn this.parent.body.scope;\n\t\t}\n\n\t\treturn this.parent.findScope( functionScope\t);\n\t}\n\n\tinitialise ( transforms ) {\n\t\tif ( transforms.arrow && isReference( this, this.parent ) ) {\n\t\t\tif ( this.name === 'arguments' && !this.findScope( false ).contains( this.name ) ) {\n\t\t\t\tconst lexicalBoundary = this.findLexicalBoundary();\n\t\t\t\tconst arrowFunction = this.findNearest( 'ArrowFunctionExpression' );\n\t\t\t\tconst loop = this.findNearest( loopStatement );\n\n\t\t\t\tif ( arrowFunction && arrowFunction.depth > lexicalBoundary.depth ) {\n\t\t\t\t\tthis.alias = lexicalBoundary.getArgumentsAlias();\n\t\t\t\t}\n\n\t\t\t\tif ( loop && loop.body.contains( this ) && loop.depth > lexicalBoundary.depth ) {\n\t\t\t\t\tthis.alias = lexicalBoundary.getArgumentsAlias();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.findScope( false ).addReference( this );\n\t\t}\n\t}\n\n\ttranspile ( code ) {\n\t\tif ( this.alias ) {\n\t\t\tcode.overwrite( this.start, this.end, this.alias, true );\n\t\t}\n\t}\n}\n","import Node from '../Node.js';\n\nexport default class IfStatement extends Node {\n\tinitialise ( transforms ) {\n\t\tsuper.initialise( transforms );\n\t}\n\n\ttranspile ( code, transforms ) {\n\t\tif ( this.consequent.type !== 'BlockStatement'\n\t\t\t\t|| this.consequent.type === 'BlockStatement' && this.consequent.synthetic ) {\n\t\t\tcode.insertLeft( this.consequent.start, '{ ' );\n\t\t\tcode.insertRight( this.consequent.end, ' }' );\n\t\t}\n\n\t\tif ( this.alternate && this.alternate.type !== 'IfStatement' && (\n\t\t\t\tthis.alternate.type !== 'BlockStatement'\n\t\t\t\t|| this.alternate.type === 'BlockStatement' && this.alternate.synthetic ) ) {\n\t\t\tcode.insertLeft( this.alternate.start, '{ ' );\n\t\t\tcode.insertRight( this.alternate.end, ' }' );\n\t\t}\n\n\t\tsuper.transpile( code, transforms );\n\t}\n}\n","import Node from '../Node.js';\nimport CompileError from '../../utils/CompileError.js';\n\nexport default class ImportDeclaration extends Node {\n\tinitialise ( transforms ) {\n\t\tif ( transforms.moduleImport ) throw new CompileError( this, 'import is not supported' );\n\t\tsuper.initialise( transforms );\n\t}\n}\n","import Node from '../Node.js';\n\nexport default class ImportDefaultSpecifier extends Node {\n\tinitialise ( transforms ) {\n\t\tthis.findScope( true ).addDeclaration( this.local, 'import' );\n\t\tsuper.initialise( transforms );\n\t}\n}\n","import Node from '../Node.js';\n\nexport default class ImportSpecifier extends Node {\n\tinitialise ( transforms ) {\n\t\tthis.findScope( true ).addDeclaration( this.local, 'import' );\n\t\tsuper.initialise( transforms );\n\t}\n}\n","import Node from '../Node.js';\n\nconst hasDashes = val => /-/.test(val);\n\nconst formatKey = key => hasDashes(key) ? `'${key}'` : key;\n\nconst formatVal = val => val ? '' : 'true';\n\nexport default class JSXAttribute extends Node {\n\ttranspile ( code, transforms ) {\n\t\tconst { start, name }\t= this.name;\n\n\t\t// Overwrite equals sign if value is present.\n\t\tconst end = this.value ? this.value.start : this.name.end;\n\n\t\tcode.overwrite( start, end, `${formatKey(name)}: ${formatVal(this.value)}` );\n\n\t\tsuper.transpile( code, transforms );\n\t}\n}\n","import Node from '../Node.js';\n\nfunction containsNewLine ( node ) {\n\treturn node.type === 'Literal' && !/\\S/.test( node.value ) && /\\n/.test( node.value );\n}\n\nexport default class JSXClosingElement extends Node {\n\ttranspile ( code ) {\n\t\tlet spaceBeforeParen = true;\n\n\t\tconst lastChild = this.parent.children[ this.parent.children.length - 1 ];\n\n\t\t// omit space before closing paren if\n\t\t//   a) this is on a separate line, or\n\t\t//   b) there are no children but there are attributes\n\t\tif ( ( lastChild && containsNewLine( lastChild ) ) || ( this.parent.openingElement.attributes.length ) ) {\n\t\t\tspaceBeforeParen = false;\n\t\t}\n\n\t\tcode.overwrite( this.start, this.end, spaceBeforeParen ? ' )' : ')' );\n\t}\n}\n","import Node from '../Node.js';\n\nfunction normalise ( str, removeTrailingWhitespace ) {\n\tif ( removeTrailingWhitespace && /\\n/.test( str ) ) {\n\t\tstr = str.replace( /\\s+$/, '' );\n\t}\n\n\tstr = str\n\t\t.replace( /^\\n\\r?\\s+/, '' )       // remove leading newline + space\n\t\t.replace( /\\s*\\n\\r?\\s*/gm, ' ' ); // replace newlines with spaces\n\n\t// TODO prefer single quotes?\n\treturn JSON.stringify( str );\n}\n\nexport default class JSXElement extends Node {\n\ttranspile ( code, transforms ) {\n\t\tsuper.transpile( code, transforms );\n\n\t\tconst children = this.children.filter( child => {\n\t\t\tif ( child.type !== 'Literal' ) return true;\n\n\t\t\t// remove whitespace-only literals, unless on a single line\n\t\t\treturn /\\S/.test( child.value ) || !/\\n/.test( child.value );\n\t\t});\n\n\t\tif ( children.length ) {\n\t\t\tlet c = this.openingElement.end;\n\n\t\t\tlet i;\n\t\t\tfor ( i = 0; i < children.length; i += 1 ) {\n\t\t\t\tconst child = children[i];\n\n\t\t\t\tif ( child.type === 'JSXExpressionContainer' && child.expression.type === 'JSXEmptyExpression' ) {\n\t\t\t\t\t// empty block is a no op\n\t\t\t\t} else {\n\t\t\t\t\tconst tail = code.original[ c ] === '\\n' && child.type !== 'Literal' ? '' : ' ';\n\t\t\t\t\tcode.insertLeft( c, `,${tail}` );\n\t\t\t\t}\n\n\t\t\t\tif ( child.type === 'Literal' ) {\n\t\t\t\t\tconst str = normalise( child.value, i === children.length - 1 );\n\t\t\t\t\tcode.overwrite( child.start, child.end, str );\n\t\t\t\t}\n\n\t\t\t\tc = child.end;\n\t\t\t}\n\t\t}\n\t}\n}\n","import Node from '../Node.js';\n\nexport default class JSXExpressionContainer extends Node {\n\ttranspile ( code, transforms ) {\n\t\tcode.remove( this.start, this.expression.start );\n\t\tcode.remove( this.expression.end, this.end );\n\n\t\tsuper.transpile( code, transforms );\n\t}\n}\n","import Node from '../Node.js';\nimport CompileError from '../../utils/CompileError.js';\n\nexport default class JSXOpeningElement extends Node {\n\ttranspile ( code, transforms ) {\n\t\tcode.overwrite( this.start, this.name.start, `${this.program.jsx}( ` );\n\n\t\tconst html = this.name.type === 'JSXIdentifier' && this.name.name[0] === this.name.name[0].toLowerCase();\n\t\tif ( html ) code.insertRight( this.name.start, `'` );\n\n\t\tconst len = this.attributes.length;\n\t\tlet c = this.name.end;\n\n\t\tif ( len ) {\n\t\t\tlet i;\n\n\t\t\tlet hasSpread = false;\n\t\t\tfor ( i = 0; i < len; i += 1 ) {\n\t\t\t\tif ( this.attributes[i].type === 'JSXSpreadAttribute' ) {\n\t\t\t\t\thasSpread = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tc = this.attributes[0].end;\n\n\t\t\tfor ( i = 0; i < len; i += 1 ) {\n\t\t\t\tconst attr = this.attributes[i];\n\n\t\t\t\tif ( i > 0 ) {\n\t\t\t\t\tif ( attr.start === c )\n\t\t\t\t\t\tcode.insertRight( c, ', ' );\n\t\t\t\t\telse\n\t\t\t\t\t\tcode.overwrite( c, attr.start, ', ' );\n\t\t\t\t}\n\n\t\t\t\tif ( hasSpread && attr.type !== 'JSXSpreadAttribute' ) {\n\t\t\t\t\tconst lastAttr = this.attributes[ i - 1 ];\n\t\t\t\t\tconst nextAttr = this.attributes[ i + 1 ];\n\n\t\t\t\t\tif ( !lastAttr || lastAttr.type === 'JSXSpreadAttribute' ) {\n\t\t\t\t\t\tcode.insertRight( attr.start, '{ ' );\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( !nextAttr || nextAttr.type === 'JSXSpreadAttribute' ) {\n\t\t\t\t\t\tcode.insertLeft( attr.end, ' }' );\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tc = attr.end;\n\t\t\t}\n\n\t\t\tlet after;\n\t\t\tlet before;\n\t\t\tif ( hasSpread ) {\n\t\t\t\tif ( len === 1 ) {\n\t\t\t\t\tbefore = html ? `',` : ',';\n\t\t\t\t} else {\n\t\t\t\t\tif (!this.program.options.objectAssign) {\n\t\t\t\t\t\tthrow new CompileError( this, 'Mixed JSX attributes ending in spread requires specified objectAssign option with \\'Object.assign\\' or polyfill helper.' );\n\t\t\t\t\t}\n\t\t\t\t\tbefore = html ? `', ${this.program.options.objectAssign}({},` : `, ${this.program.options.objectAssign}({},`;\n\t\t\t\t\tafter = ')';\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tbefore = html ? `', {` : ', {';\n\t\t\t\tafter = ' }';\n\t\t\t}\n\n\t\t\tcode.insertRight( this.name.end, before );\n\n\t\t\tif ( after ) {\n\t\t\t\tcode.insertLeft( this.attributes[ len - 1 ].end, after );\n\t\t\t}\n\t\t} else {\n\t\t\tcode.insertLeft( this.name.end, html ? `', null` : `, null` );\n\t\t\tc = this.name.end;\n\t\t}\n\n\t\tsuper.transpile( code, transforms );\n\n\t\tif ( this.selfClosing ) {\n\t\t\tcode.overwrite( c, this.end, this.attributes.length ? `)` : ` )` );\n\t\t} else {\n\t\t\tcode.remove( c, this.end );\n\t\t}\n\t}\n}\n","import Node from '../Node.js';\n\nexport default class JSXSpreadAttribute extends Node {\n\ttranspile ( code, transforms ) {\n\t\tcode.remove( this.start, this.argument.start );\n\t\tcode.remove( this.argument.end, this.end );\n\n\t\tsuper.transpile( code, transforms );\n\t}\n}\n","/*! https://mths.be/regenerate v1.3.3 by @mathias | MIT license */\n;(function(root) {\n\n\t// Detect free variables `exports`.\n\tvar freeExports = typeof exports == 'object' && exports;\n\n\t// Detect free variable `module`.\n\tvar freeModule = typeof module == 'object' && module &&\n\t\tmodule.exports == freeExports && module;\n\n\t// Detect free variable `global`, from Node.js/io.js or Browserified code,\n\t// and use it as `root`.\n\tvar freeGlobal = typeof global == 'object' && global;\n\tif (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal) {\n\t\troot = freeGlobal;\n\t}\n\n\t/*--------------------------------------------------------------------------*/\n\n\tvar ERRORS = {\n\t\t'rangeOrder': 'A range\\u2019s `stop` value must be greater than or equal ' +\n\t\t\t'to the `start` value.',\n\t\t'codePointRange': 'Invalid code point value. Code points range from ' +\n\t\t\t'U+000000 to U+10FFFF.'\n\t};\n\n\t// https://mathiasbynens.be/notes/javascript-encoding#surrogate-pairs\n\tvar HIGH_SURROGATE_MIN = 0xD800;\n\tvar HIGH_SURROGATE_MAX = 0xDBFF;\n\tvar LOW_SURROGATE_MIN = 0xDC00;\n\tvar LOW_SURROGATE_MAX = 0xDFFF;\n\n\t// In Regenerate output, `\\0` is never preceded by `\\` because we sort by\n\t// code point value, so let’s keep this regular expression simple.\n\tvar regexNull = /\\\\x00([^0123456789]|$)/g;\n\n\tvar object = {};\n\tvar hasOwnProperty = object.hasOwnProperty;\n\tvar extend = function(destination, source) {\n\t\tvar key;\n\t\tfor (key in source) {\n\t\t\tif (hasOwnProperty.call(source, key)) {\n\t\t\t\tdestination[key] = source[key];\n\t\t\t}\n\t\t}\n\t\treturn destination;\n\t};\n\n\tvar forEach = function(array, callback) {\n\t\tvar index = -1;\n\t\tvar length = array.length;\n\t\twhile (++index < length) {\n\t\t\tcallback(array[index], index);\n\t\t}\n\t};\n\n\tvar toString = object.toString;\n\tvar isArray = function(value) {\n\t\treturn toString.call(value) == '[object Array]';\n\t};\n\tvar isNumber = function(value) {\n\t\treturn typeof value == 'number' ||\n\t\t\ttoString.call(value) == '[object Number]';\n\t};\n\n\t// This assumes that `number` is a positive integer that `toString()`s nicely\n\t// (which is the case for all code point values).\n\tvar zeroes = '0000';\n\tvar pad = function(number, totalCharacters) {\n\t\tvar string = String(number);\n\t\treturn string.length < totalCharacters\n\t\t\t? (zeroes + string).slice(-totalCharacters)\n\t\t\t: string;\n\t};\n\n\tvar hex = function(number) {\n\t\treturn Number(number).toString(16).toUpperCase();\n\t};\n\n\tvar slice = [].slice;\n\n\t/*--------------------------------------------------------------------------*/\n\n\tvar dataFromCodePoints = function(codePoints) {\n\t\tvar index = -1;\n\t\tvar length = codePoints.length;\n\t\tvar max = length - 1;\n\t\tvar result = [];\n\t\tvar isStart = true;\n\t\tvar tmp;\n\t\tvar previous = 0;\n\t\twhile (++index < length) {\n\t\t\ttmp = codePoints[index];\n\t\t\tif (isStart) {\n\t\t\t\tresult.push(tmp);\n\t\t\t\tprevious = tmp;\n\t\t\t\tisStart = false;\n\t\t\t} else {\n\t\t\t\tif (tmp == previous + 1) {\n\t\t\t\t\tif (index != max) {\n\t\t\t\t\t\tprevious = tmp;\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tisStart = true;\n\t\t\t\t\t\tresult.push(tmp + 1);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t// End the previous range and start a new one.\n\t\t\t\t\tresult.push(previous + 1, tmp);\n\t\t\t\t\tprevious = tmp;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (!isStart) {\n\t\t\tresult.push(tmp + 1);\n\t\t}\n\t\treturn result;\n\t};\n\n\tvar dataRemove = function(data, codePoint) {\n\t\t// Iterate over the data per `(start, end)` pair.\n\t\tvar index = 0;\n\t\tvar start;\n\t\tvar end;\n\t\tvar length = data.length;\n\t\twhile (index < length) {\n\t\t\tstart = data[index];\n\t\t\tend = data[index + 1];\n\t\t\tif (codePoint >= start && codePoint < end) {\n\t\t\t\t// Modify this pair.\n\t\t\t\tif (codePoint == start) {\n\t\t\t\t\tif (end == start + 1) {\n\t\t\t\t\t\t// Just remove `start` and `end`.\n\t\t\t\t\t\tdata.splice(index, 2);\n\t\t\t\t\t\treturn data;\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// Just replace `start` with a new value.\n\t\t\t\t\t\tdata[index] = codePoint + 1;\n\t\t\t\t\t\treturn data;\n\t\t\t\t\t}\n\t\t\t\t} else if (codePoint == end - 1) {\n\t\t\t\t\t// Just replace `end` with a new value.\n\t\t\t\t\tdata[index + 1] = codePoint;\n\t\t\t\t\treturn data;\n\t\t\t\t} else {\n\t\t\t\t\t// Replace `[start, end]` with `[startA, endA, startB, endB]`.\n\t\t\t\t\tdata.splice(index, 2, start, codePoint, codePoint + 1, end);\n\t\t\t\t\treturn data;\n\t\t\t\t}\n\t\t\t}\n\t\t\tindex += 2;\n\t\t}\n\t\treturn data;\n\t};\n\n\tvar dataRemoveRange = function(data, rangeStart, rangeEnd) {\n\t\tif (rangeEnd < rangeStart) {\n\t\t\tthrow Error(ERRORS.rangeOrder);\n\t\t}\n\t\t// Iterate over the data per `(start, end)` pair.\n\t\tvar index = 0;\n\t\tvar start;\n\t\tvar end;\n\t\twhile (index < data.length) {\n\t\t\tstart = data[index];\n\t\t\tend = data[index + 1] - 1; // Note: the `- 1` makes `end` inclusive.\n\n\t\t\t// Exit as soon as no more matching pairs can be found.\n\t\t\tif (start > rangeEnd) {\n\t\t\t\treturn data;\n\t\t\t}\n\n\t\t\t// Check if this range pair is equal to, or forms a subset of, the range\n\t\t\t// to be removed.\n\t\t\t// E.g. we have `[0, 11, 40, 51]` and want to remove 0-10 → `[40, 51]`.\n\t\t\t// E.g. we have `[40, 51]` and want to remove 0-100 → `[]`.\n\t\t\tif (rangeStart <= start && rangeEnd >= end) {\n\t\t\t\t// Remove this pair.\n\t\t\t\tdata.splice(index, 2);\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// Check if both `rangeStart` and `rangeEnd` are within the bounds of\n\t\t\t// this pair.\n\t\t\t// E.g. we have `[0, 11]` and want to remove 4-6 → `[0, 4, 7, 11]`.\n\t\t\tif (rangeStart >= start && rangeEnd < end) {\n\t\t\t\tif (rangeStart == start) {\n\t\t\t\t\t// Replace `[start, end]` with `[startB, endB]`.\n\t\t\t\t\tdata[index] = rangeEnd + 1;\n\t\t\t\t\tdata[index + 1] = end + 1;\n\t\t\t\t\treturn data;\n\t\t\t\t}\n\t\t\t\t// Replace `[start, end]` with `[startA, endA, startB, endB]`.\n\t\t\t\tdata.splice(index, 2, start, rangeStart, rangeEnd + 1, end + 1);\n\t\t\t\treturn data;\n\t\t\t}\n\n\t\t\t// Check if only `rangeStart` is within the bounds of this pair.\n\t\t\t// E.g. we have `[0, 11]` and want to remove 4-20 → `[0, 4]`.\n\t\t\tif (rangeStart >= start && rangeStart <= end) {\n\t\t\t\t// Replace `end` with `rangeStart`.\n\t\t\t\tdata[index + 1] = rangeStart;\n\t\t\t\t// Note: we cannot `return` just yet, in case any following pairs still\n\t\t\t\t// contain matching code points.\n\t\t\t\t// E.g. we have `[0, 11, 14, 31]` and want to remove 4-20\n\t\t\t\t// → `[0, 4, 21, 31]`.\n\t\t\t}\n\n\t\t\t// Check if only `rangeEnd` is within the bounds of this pair.\n\t\t\t// E.g. we have `[14, 31]` and want to remove 4-20 → `[21, 31]`.\n\t\t\telse if (rangeEnd >= start && rangeEnd <= end) {\n\t\t\t\t// Just replace `start`.\n\t\t\t\tdata[index] = rangeEnd + 1;\n\t\t\t\treturn data;\n\t\t\t}\n\n\t\t\tindex += 2;\n\t\t}\n\t\treturn data;\n\t};\n\n\t var dataAdd = function(data, codePoint) {\n\t\t// Iterate over the data per `(start, end)` pair.\n\t\tvar index = 0;\n\t\tvar start;\n\t\tvar end;\n\t\tvar lastIndex = null;\n\t\tvar length = data.length;\n\t\tif (codePoint < 0x0 || codePoint > 0x10FFFF) {\n\t\t\tthrow RangeError(ERRORS.codePointRange);\n\t\t}\n\t\twhile (index < length) {\n\t\t\tstart = data[index];\n\t\t\tend = data[index + 1];\n\n\t\t\t// Check if the code point is already in the set.\n\t\t\tif (codePoint >= start && codePoint < end) {\n\t\t\t\treturn data;\n\t\t\t}\n\n\t\t\tif (codePoint == start - 1) {\n\t\t\t\t// Just replace `start` with a new value.\n\t\t\t\tdata[index] = codePoint;\n\t\t\t\treturn data;\n\t\t\t}\n\n\t\t\t// At this point, if `start` is `greater` than `codePoint`, insert a new\n\t\t\t// `[start, end]` pair before the current pair, or after the current pair\n\t\t\t// if there is a known `lastIndex`.\n\t\t\tif (start > codePoint) {\n\t\t\t\tdata.splice(\n\t\t\t\t\tlastIndex != null ? lastIndex + 2 : 0,\n\t\t\t\t\t0,\n\t\t\t\t\tcodePoint,\n\t\t\t\t\tcodePoint + 1\n\t\t\t\t);\n\t\t\t\treturn data;\n\t\t\t}\n\n\t\t\tif (codePoint == end) {\n\t\t\t\t// Check if adding this code point causes two separate ranges to become\n\t\t\t\t// a single range, e.g. `dataAdd([0, 4, 5, 10], 4)` → `[0, 10]`.\n\t\t\t\tif (codePoint + 1 == data[index + 2]) {\n\t\t\t\t\tdata.splice(index, 4, start, data[index + 3]);\n\t\t\t\t\treturn data;\n\t\t\t\t}\n\t\t\t\t// Else, just replace `end` with a new value.\n\t\t\t\tdata[index + 1] = codePoint + 1;\n\t\t\t\treturn data;\n\t\t\t}\n\t\t\tlastIndex = index;\n\t\t\tindex += 2;\n\t\t}\n\t\t// The loop has finished; add the new pair to the end of the data set.\n\t\tdata.push(codePoint, codePoint + 1);\n\t\treturn data;\n\t};\n\n\tvar dataAddData = function(dataA, dataB) {\n\t\t// Iterate over the data per `(start, end)` pair.\n\t\tvar index = 0;\n\t\tvar start;\n\t\tvar end;\n\t\tvar data = dataA.slice();\n\t\tvar length = dataB.length;\n\t\twhile (index < length) {\n\t\t\tstart = dataB[index];\n\t\t\tend = dataB[index + 1] - 1;\n\t\t\tif (start == end) {\n\t\t\t\tdata = dataAdd(data, start);\n\t\t\t} else {\n\t\t\t\tdata = dataAddRange(data, start, end);\n\t\t\t}\n\t\t\tindex += 2;\n\t\t}\n\t\treturn data;\n\t};\n\n\tvar dataRemoveData = function(dataA, dataB) {\n\t\t// Iterate over the data per `(start, end)` pair.\n\t\tvar index = 0;\n\t\tvar start;\n\t\tvar end;\n\t\tvar data = dataA.slice();\n\t\tvar length = dataB.length;\n\t\twhile (index < length) {\n\t\t\tstart = dataB[index];\n\t\t\tend = dataB[index + 1] - 1;\n\t\t\tif (start == end) {\n\t\t\t\tdata = dataRemove(data, start);\n\t\t\t} else {\n\t\t\t\tdata = dataRemoveRange(data, start, end);\n\t\t\t}\n\t\t\tindex += 2;\n\t\t}\n\t\treturn data;\n\t};\n\n\tvar dataAddRange = function(data, rangeStart, rangeEnd) {\n\t\tif (rangeEnd < rangeStart) {\n\t\t\tthrow Error(ERRORS.rangeOrder);\n\t\t}\n\t\tif (\n\t\t\trangeStart < 0x0 || rangeStart > 0x10FFFF ||\n\t\t\trangeEnd < 0x0 || rangeEnd > 0x10FFFF\n\t\t) {\n\t\t\tthrow RangeError(ERRORS.codePointRange);\n\t\t}\n\t\t// Iterate over the data per `(start, end)` pair.\n\t\tvar index = 0;\n\t\tvar start;\n\t\tvar end;\n\t\tvar added = false;\n\t\tvar length = data.length;\n\t\twhile (index < length) {\n\t\t\tstart = data[index];\n\t\t\tend = data[index + 1];\n\n\t\t\tif (added) {\n\t\t\t\t// The range has already been added to the set; at this point, we just\n\t\t\t\t// need to get rid of the following ranges in case they overlap.\n\n\t\t\t\t// Check if this range can be combined with the previous range.\n\t\t\t\tif (start == rangeEnd + 1) {\n\t\t\t\t\tdata.splice(index - 1, 2);\n\t\t\t\t\treturn data;\n\t\t\t\t}\n\n\t\t\t\t// Exit as soon as no more possibly overlapping pairs can be found.\n\t\t\t\tif (start > rangeEnd) {\n\t\t\t\t\treturn data;\n\t\t\t\t}\n\n\t\t\t\t// E.g. `[0, 11, 12, 16]` and we’ve added 5-15, so we now have\n\t\t\t\t// `[0, 16, 12, 16]`. Remove the `12,16` part, as it lies within the\n\t\t\t\t// `0,16` range that was previously added.\n\t\t\t\tif (start >= rangeStart && start <= rangeEnd) {\n\t\t\t\t\t// `start` lies within the range that was previously added.\n\n\t\t\t\t\tif (end > rangeStart && end - 1 <= rangeEnd) {\n\t\t\t\t\t\t// `end` lies within the range that was previously added as well,\n\t\t\t\t\t\t// so remove this pair.\n\t\t\t\t\t\tdata.splice(index, 2);\n\t\t\t\t\t\tindex -= 2;\n\t\t\t\t\t\t// Note: we cannot `return` just yet, as there may still be other\n\t\t\t\t\t\t// overlapping pairs.\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// `start` lies within the range that was previously added, but\n\t\t\t\t\t\t// `end` doesn’t. E.g. `[0, 11, 12, 31]` and we’ve added 5-15, so\n\t\t\t\t\t\t// now we have `[0, 16, 12, 31]`. This must be written as `[0, 31]`.\n\t\t\t\t\t\t// Remove the previously added `end` and the current `start`.\n\t\t\t\t\t\tdata.splice(index - 1, 2);\n\t\t\t\t\t\tindex -= 2;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Note: we cannot return yet.\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\telse if (start == rangeEnd + 1) {\n\t\t\t\tdata[index] = rangeStart;\n\t\t\t\treturn data;\n\t\t\t}\n\n\t\t\t// Check if a new pair must be inserted *before* the current one.\n\t\t\telse if (start > rangeEnd) {\n\t\t\t\tdata.splice(index, 0, rangeStart, rangeEnd + 1);\n\t\t\t\treturn data;\n\t\t\t}\n\n\t\t\telse if (rangeStart >= start && rangeStart < end && rangeEnd + 1 <= end) {\n\t\t\t\t// The new range lies entirely within an existing range pair. No action\n\t\t\t\t// needed.\n\t\t\t\treturn data;\n\t\t\t}\n\n\t\t\telse if (\n\t\t\t\t// E.g. `[0, 11]` and you add 5-15 → `[0, 16]`.\n\t\t\t\t(rangeStart >= start && rangeStart < end) ||\n\t\t\t\t// E.g. `[0, 3]` and you add 3-6 → `[0, 7]`.\n\t\t\t\tend == rangeStart\n\t\t\t) {\n\t\t\t\t// Replace `end` with the new value.\n\t\t\t\tdata[index + 1] = rangeEnd + 1;\n\t\t\t\t// Make sure the next range pair doesn’t overlap, e.g. `[0, 11, 12, 14]`\n\t\t\t\t// and you add 5-15 → `[0, 16]`, i.e. remove the `12,14` part.\n\t\t\t\tadded = true;\n\t\t\t\t// Note: we cannot `return` just yet.\n\t\t\t}\n\n\t\t\telse if (rangeStart <= start && rangeEnd + 1 >= end) {\n\t\t\t\t// The new range is a superset of the old range.\n\t\t\t\tdata[index] = rangeStart;\n\t\t\t\tdata[index + 1] = rangeEnd + 1;\n\t\t\t\tadded = true;\n\t\t\t}\n\n\t\t\tindex += 2;\n\t\t}\n\t\t// The loop has finished without doing anything; add the new pair to the end\n\t\t// of the data set.\n\t\tif (!added) {\n\t\t\tdata.push(rangeStart, rangeEnd + 1);\n\t\t}\n\t\treturn data;\n\t};\n\n\tvar dataContains = function(data, codePoint) {\n\t\tvar index = 0;\n\t\tvar length = data.length;\n\t\t// Exit early if `codePoint` is not within `data`’s overall range.\n\t\tvar start = data[index];\n\t\tvar end = data[length - 1];\n\t\tif (length >= 2) {\n\t\t\tif (codePoint < start || codePoint > end) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\t// Iterate over the data per `(start, end)` pair.\n\t\twhile (index < length) {\n\t\t\tstart = data[index];\n\t\t\tend = data[index + 1];\n\t\t\tif (codePoint >= start && codePoint < end) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\tindex += 2;\n\t\t}\n\t\treturn false;\n\t};\n\n\tvar dataIntersection = function(data, codePoints) {\n\t\tvar index = 0;\n\t\tvar length = codePoints.length;\n\t\tvar codePoint;\n\t\tvar result = [];\n\t\twhile (index < length) {\n\t\t\tcodePoint = codePoints[index];\n\t\t\tif (dataContains(data, codePoint)) {\n\t\t\t\tresult.push(codePoint);\n\t\t\t}\n\t\t\t++index;\n\t\t}\n\t\treturn dataFromCodePoints(result);\n\t};\n\n\tvar dataIsEmpty = function(data) {\n\t\treturn !data.length;\n\t};\n\n\tvar dataIsSingleton = function(data) {\n\t\t// Check if the set only represents a single code point.\n\t\treturn data.length == 2 && data[0] + 1 == data[1];\n\t};\n\n\tvar dataToArray = function(data) {\n\t\t// Iterate over the data per `(start, end)` pair.\n\t\tvar index = 0;\n\t\tvar start;\n\t\tvar end;\n\t\tvar result = [];\n\t\tvar length = data.length;\n\t\twhile (index < length) {\n\t\t\tstart = data[index];\n\t\t\tend = data[index + 1];\n\t\t\twhile (start < end) {\n\t\t\t\tresult.push(start);\n\t\t\t\t++start;\n\t\t\t}\n\t\t\tindex += 2;\n\t\t}\n\t\treturn result;\n\t};\n\n\t/*--------------------------------------------------------------------------*/\n\n\t// https://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae\n\tvar floor = Math.floor;\n\tvar highSurrogate = function(codePoint) {\n\t\treturn parseInt(\n\t\t\tfloor((codePoint - 0x10000) / 0x400) + HIGH_SURROGATE_MIN,\n\t\t\t10\n\t\t);\n\t};\n\n\tvar lowSurrogate = function(codePoint) {\n\t\treturn parseInt(\n\t\t\t(codePoint - 0x10000) % 0x400 + LOW_SURROGATE_MIN,\n\t\t\t10\n\t\t);\n\t};\n\n\tvar stringFromCharCode = String.fromCharCode;\n\tvar codePointToString = function(codePoint) {\n\t\tvar string;\n\t\t// https://mathiasbynens.be/notes/javascript-escapes#single\n\t\t// Note: the `\\b` escape sequence for U+0008 BACKSPACE in strings has a\n\t\t// different meaning in regular expressions (word boundary), so it cannot\n\t\t// be used here.\n\t\tif (codePoint == 0x09) {\n\t\t\tstring = '\\\\t';\n\t\t}\n\t\t// Note: IE < 9 treats `'\\v'` as `'v'`, so avoid using it.\n\t\t// else if (codePoint == 0x0B) {\n\t\t// \tstring = '\\\\v';\n\t\t// }\n\t\telse if (codePoint == 0x0A) {\n\t\t\tstring = '\\\\n';\n\t\t}\n\t\telse if (codePoint == 0x0C) {\n\t\t\tstring = '\\\\f';\n\t\t}\n\t\telse if (codePoint == 0x0D) {\n\t\t\tstring = '\\\\r';\n\t\t}\n\t\telse if (codePoint == 0x5C) {\n\t\t\tstring = '\\\\\\\\';\n\t\t}\n\t\telse if (\n\t\t\tcodePoint == 0x24 ||\n\t\t\t(codePoint >= 0x28 && codePoint <= 0x2B) ||\n\t\t\t(codePoint >= 0x2D && codePoint <= 0x2F) ||\n\t\t\tcodePoint == 0x3F ||\n\t\t\t(codePoint >= 0x5B && codePoint <= 0x5E) ||\n\t\t\t(codePoint >= 0x7B && codePoint <= 0x7D)\n\t\t) {\n\t\t\t// The code point maps to an unsafe printable ASCII character;\n\t\t\t// backslash-escape it. Here’s the list of those symbols:\n\t\t\t//\n\t\t\t//     $()*+-./?[\\]^{|}\n\t\t\t//\n\t\t\t// See #7 for more info.\n\t\t\tstring = '\\\\' + stringFromCharCode(codePoint);\n\t\t}\n\t\telse if (codePoint >= 0x20 && codePoint <= 0x7E) {\n\t\t\t// The code point maps to one of these printable ASCII symbols\n\t\t\t// (including the space character):\n\t\t\t//\n\t\t\t//      !\"#%&',/0123456789:;<=>@ABCDEFGHIJKLMNO\n\t\t\t//     PQRSTUVWXYZ_`abcdefghijklmnopqrstuvwxyz~\n\t\t\t//\n\t\t\t// These can safely be used directly.\n\t\t\tstring = stringFromCharCode(codePoint);\n\t\t}\n\t\telse if (codePoint <= 0xFF) {\n\t\t\t// https://mathiasbynens.be/notes/javascript-escapes#hexadecimal\n\t\t\tstring = '\\\\x' + pad(hex(codePoint), 2);\n\t\t}\n\t\telse { // `codePoint <= 0xFFFF` holds true.\n\t\t\t// https://mathiasbynens.be/notes/javascript-escapes#unicode\n\t\t\tstring = '\\\\u' + pad(hex(codePoint), 4);\n\t\t}\n\n\t\t// There’s no need to account for astral symbols / surrogate pairs here,\n\t\t// since `codePointToString` is private and only used for BMP code points.\n\t\t// But if that’s what you need, just add an `else` block with this code:\n\t\t//\n\t\t//     string = '\\\\u' + pad(hex(highSurrogate(codePoint)), 4)\n\t\t//     \t+ '\\\\u' + pad(hex(lowSurrogate(codePoint)), 4);\n\n\t\treturn string;\n\t};\n\n\tvar codePointToStringUnicode = function(codePoint) {\n\t\tif (codePoint <= 0xFFFF) {\n\t\t\treturn codePointToString(codePoint);\n\t\t}\n\t\treturn '\\\\u{' + codePoint.toString(16).toUpperCase() + '}';\n\t};\n\n\tvar symbolToCodePoint = function(symbol) {\n\t\tvar length = symbol.length;\n\t\tvar first = symbol.charCodeAt(0);\n\t\tvar second;\n\t\tif (\n\t\t\tfirst >= HIGH_SURROGATE_MIN && first <= HIGH_SURROGATE_MAX &&\n\t\t\tlength > 1 // There is a next code unit.\n\t\t) {\n\t\t\t// `first` is a high surrogate, and there is a next character. Assume\n\t\t\t// it’s a low surrogate (else it’s invalid usage of Regenerate anyway).\n\t\t\tsecond = symbol.charCodeAt(1);\n\t\t\t// https://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae\n\t\t\treturn (first - HIGH_SURROGATE_MIN) * 0x400 +\n\t\t\t\tsecond - LOW_SURROGATE_MIN + 0x10000;\n\t\t}\n\t\treturn first;\n\t};\n\n\tvar createBMPCharacterClasses = function(data) {\n\t\t// Iterate over the data per `(start, end)` pair.\n\t\tvar result = '';\n\t\tvar index = 0;\n\t\tvar start;\n\t\tvar end;\n\t\tvar length = data.length;\n\t\tif (dataIsSingleton(data)) {\n\t\t\treturn codePointToString(data[0]);\n\t\t}\n\t\twhile (index < length) {\n\t\t\tstart = data[index];\n\t\t\tend = data[index + 1] - 1; // Note: the `- 1` makes `end` inclusive.\n\t\t\tif (start == end) {\n\t\t\t\tresult += codePointToString(start);\n\t\t\t} else if (start + 1 == end) {\n\t\t\t\tresult += codePointToString(start) + codePointToString(end);\n\t\t\t} else {\n\t\t\t\tresult += codePointToString(start) + '-' + codePointToString(end);\n\t\t\t}\n\t\t\tindex += 2;\n\t\t}\n\t\treturn '[' + result + ']';\n\t};\n\n\tvar createUnicodeCharacterClasses = function(data) {\n\t\t// Iterate over the data per `(start, end)` pair.\n\t\tvar result = '';\n\t\tvar index = 0;\n\t\tvar start;\n\t\tvar end;\n\t\tvar length = data.length;\n\t\tif (dataIsSingleton(data)) {\n\t\t\treturn codePointToStringUnicode(data[0]);\n\t\t}\n\t\twhile (index < length) {\n\t\t\tstart = data[index];\n\t\t\tend = data[index + 1] - 1; // Note: the `- 1` makes `end` inclusive.\n\t\t\tif (start == end) {\n\t\t\t\tresult += codePointToStringUnicode(start);\n\t\t\t} else if (start + 1 == end) {\n\t\t\t\tresult += codePointToStringUnicode(start) + codePointToStringUnicode(end);\n\t\t\t} else {\n\t\t\t\tresult += codePointToStringUnicode(start) + '-' + codePointToStringUnicode(end);\n\t\t\t}\n\t\t\tindex += 2;\n\t\t}\n\t\treturn '[' + result + ']';\n\t};\n\n\tvar splitAtBMP = function(data) {\n\t\t// Iterate over the data per `(start, end)` pair.\n\t\tvar loneHighSurrogates = [];\n\t\tvar loneLowSurrogates = [];\n\t\tvar bmp = [];\n\t\tvar astral = [];\n\t\tvar index = 0;\n\t\tvar start;\n\t\tvar end;\n\t\tvar length = data.length;\n\t\twhile (index < length) {\n\t\t\tstart = data[index];\n\t\t\tend = data[index + 1] - 1; // Note: the `- 1` makes `end` inclusive.\n\n\t\t\tif (start < HIGH_SURROGATE_MIN) {\n\n\t\t\t\t// The range starts and ends before the high surrogate range.\n\t\t\t\t// E.g. (0, 0x10).\n\t\t\t\tif (end < HIGH_SURROGATE_MIN) {\n\t\t\t\t\tbmp.push(start, end + 1);\n\t\t\t\t}\n\n\t\t\t\t// The range starts before the high surrogate range and ends within it.\n\t\t\t\t// E.g. (0, 0xD855).\n\t\t\t\tif (end >= HIGH_SURROGATE_MIN && end <= HIGH_SURROGATE_MAX) {\n\t\t\t\t\tbmp.push(start, HIGH_SURROGATE_MIN);\n\t\t\t\t\tloneHighSurrogates.push(HIGH_SURROGATE_MIN, end + 1);\n\t\t\t\t}\n\n\t\t\t\t// The range starts before the high surrogate range and ends in the low\n\t\t\t\t// surrogate range. E.g. (0, 0xDCFF).\n\t\t\t\tif (end >= LOW_SURROGATE_MIN && end <= LOW_SURROGATE_MAX) {\n\t\t\t\t\tbmp.push(start, HIGH_SURROGATE_MIN);\n\t\t\t\t\tloneHighSurrogates.push(HIGH_SURROGATE_MIN, HIGH_SURROGATE_MAX + 1);\n\t\t\t\t\tloneLowSurrogates.push(LOW_SURROGATE_MIN, end + 1);\n\t\t\t\t}\n\n\t\t\t\t// The range starts before the high surrogate range and ends after the\n\t\t\t\t// low surrogate range. E.g. (0, 0x10FFFF).\n\t\t\t\tif (end > LOW_SURROGATE_MAX) {\n\t\t\t\t\tbmp.push(start, HIGH_SURROGATE_MIN);\n\t\t\t\t\tloneHighSurrogates.push(HIGH_SURROGATE_MIN, HIGH_SURROGATE_MAX + 1);\n\t\t\t\t\tloneLowSurrogates.push(LOW_SURROGATE_MIN, LOW_SURROGATE_MAX + 1);\n\t\t\t\t\tif (end <= 0xFFFF) {\n\t\t\t\t\t\tbmp.push(LOW_SURROGATE_MAX + 1, end + 1);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tbmp.push(LOW_SURROGATE_MAX + 1, 0xFFFF + 1);\n\t\t\t\t\t\tastral.push(0xFFFF + 1, end + 1);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t} else if (start >= HIGH_SURROGATE_MIN && start <= HIGH_SURROGATE_MAX) {\n\n\t\t\t\t// The range starts and ends in the high surrogate range.\n\t\t\t\t// E.g. (0xD855, 0xD866).\n\t\t\t\tif (end >= HIGH_SURROGATE_MIN && end <= HIGH_SURROGATE_MAX) {\n\t\t\t\t\tloneHighSurrogates.push(start, end + 1);\n\t\t\t\t}\n\n\t\t\t\t// The range starts in the high surrogate range and ends in the low\n\t\t\t\t// surrogate range. E.g. (0xD855, 0xDCFF).\n\t\t\t\tif (end >= LOW_SURROGATE_MIN && end <= LOW_SURROGATE_MAX) {\n\t\t\t\t\tloneHighSurrogates.push(start, HIGH_SURROGATE_MAX + 1);\n\t\t\t\t\tloneLowSurrogates.push(LOW_SURROGATE_MIN, end + 1);\n\t\t\t\t}\n\n\t\t\t\t// The range starts in the high surrogate range and ends after the low\n\t\t\t\t// surrogate range. E.g. (0xD855, 0x10FFFF).\n\t\t\t\tif (end > LOW_SURROGATE_MAX) {\n\t\t\t\t\tloneHighSurrogates.push(start, HIGH_SURROGATE_MAX + 1);\n\t\t\t\t\tloneLowSurrogates.push(LOW_SURROGATE_MIN, LOW_SURROGATE_MAX + 1);\n\t\t\t\t\tif (end <= 0xFFFF) {\n\t\t\t\t\t\tbmp.push(LOW_SURROGATE_MAX + 1, end + 1);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tbmp.push(LOW_SURROGATE_MAX + 1, 0xFFFF + 1);\n\t\t\t\t\t\tastral.push(0xFFFF + 1, end + 1);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t} else if (start >= LOW_SURROGATE_MIN && start <= LOW_SURROGATE_MAX) {\n\n\t\t\t\t// The range starts and ends in the low surrogate range.\n\t\t\t\t// E.g. (0xDCFF, 0xDDFF).\n\t\t\t\tif (end >= LOW_SURROGATE_MIN && end <= LOW_SURROGATE_MAX) {\n\t\t\t\t\tloneLowSurrogates.push(start, end + 1);\n\t\t\t\t}\n\n\t\t\t\t// The range starts in the low surrogate range and ends after the low\n\t\t\t\t// surrogate range. E.g. (0xDCFF, 0x10FFFF).\n\t\t\t\tif (end > LOW_SURROGATE_MAX) {\n\t\t\t\t\tloneLowSurrogates.push(start, LOW_SURROGATE_MAX + 1);\n\t\t\t\t\tif (end <= 0xFFFF) {\n\t\t\t\t\t\tbmp.push(LOW_SURROGATE_MAX + 1, end + 1);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tbmp.push(LOW_SURROGATE_MAX + 1, 0xFFFF + 1);\n\t\t\t\t\t\tastral.push(0xFFFF + 1, end + 1);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t} else if (start > LOW_SURROGATE_MAX && start <= 0xFFFF) {\n\n\t\t\t\t// The range starts and ends after the low surrogate range.\n\t\t\t\t// E.g. (0xFFAA, 0x10FFFF).\n\t\t\t\tif (end <= 0xFFFF) {\n\t\t\t\t\tbmp.push(start, end + 1);\n\t\t\t\t} else {\n\t\t\t\t\tbmp.push(start, 0xFFFF + 1);\n\t\t\t\t\tastral.push(0xFFFF + 1, end + 1);\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t// The range starts and ends in the astral range.\n\t\t\t\tastral.push(start, end + 1);\n\n\t\t\t}\n\n\t\t\tindex += 2;\n\t\t}\n\t\treturn {\n\t\t\t'loneHighSurrogates': loneHighSurrogates,\n\t\t\t'loneLowSurrogates': loneLowSurrogates,\n\t\t\t'bmp': bmp,\n\t\t\t'astral': astral\n\t\t};\n\t};\n\n\tvar optimizeSurrogateMappings = function(surrogateMappings) {\n\t\tvar result = [];\n\t\tvar tmpLow = [];\n\t\tvar addLow = false;\n\t\tvar mapping;\n\t\tvar nextMapping;\n\t\tvar highSurrogates;\n\t\tvar lowSurrogates;\n\t\tvar nextHighSurrogates;\n\t\tvar nextLowSurrogates;\n\t\tvar index = -1;\n\t\tvar length = surrogateMappings.length;\n\t\twhile (++index < length) {\n\t\t\tmapping = surrogateMappings[index];\n\t\t\tnextMapping = surrogateMappings[index + 1];\n\t\t\tif (!nextMapping) {\n\t\t\t\tresult.push(mapping);\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\thighSurrogates = mapping[0];\n\t\t\tlowSurrogates = mapping[1];\n\t\t\tnextHighSurrogates = nextMapping[0];\n\t\t\tnextLowSurrogates = nextMapping[1];\n\n\t\t\t// Check for identical high surrogate ranges.\n\t\t\ttmpLow = lowSurrogates;\n\t\t\twhile (\n\t\t\t\tnextHighSurrogates &&\n\t\t\t\thighSurrogates[0] == nextHighSurrogates[0] &&\n\t\t\t\thighSurrogates[1] == nextHighSurrogates[1]\n\t\t\t) {\n\t\t\t\t// Merge with the next item.\n\t\t\t\tif (dataIsSingleton(nextLowSurrogates)) {\n\t\t\t\t\ttmpLow = dataAdd(tmpLow, nextLowSurrogates[0]);\n\t\t\t\t} else {\n\t\t\t\t\ttmpLow = dataAddRange(\n\t\t\t\t\t\ttmpLow,\n\t\t\t\t\t\tnextLowSurrogates[0],\n\t\t\t\t\t\tnextLowSurrogates[1] - 1\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\t++index;\n\t\t\t\tmapping = surrogateMappings[index];\n\t\t\t\thighSurrogates = mapping[0];\n\t\t\t\tlowSurrogates = mapping[1];\n\t\t\t\tnextMapping = surrogateMappings[index + 1];\n\t\t\t\tnextHighSurrogates = nextMapping && nextMapping[0];\n\t\t\t\tnextLowSurrogates = nextMapping && nextMapping[1];\n\t\t\t\taddLow = true;\n\t\t\t}\n\t\t\tresult.push([\n\t\t\t\thighSurrogates,\n\t\t\t\taddLow ? tmpLow : lowSurrogates\n\t\t\t]);\n\t\t\taddLow = false;\n\t\t}\n\t\treturn optimizeByLowSurrogates(result);\n\t};\n\n\tvar optimizeByLowSurrogates = function(surrogateMappings) {\n\t\tif (surrogateMappings.length == 1) {\n\t\t\treturn surrogateMappings;\n\t\t}\n\t\tvar index = -1;\n\t\tvar innerIndex = -1;\n\t\twhile (++index < surrogateMappings.length) {\n\t\t\tvar mapping = surrogateMappings[index];\n\t\t\tvar lowSurrogates = mapping[1];\n\t\t\tvar lowSurrogateStart = lowSurrogates[0];\n\t\t\tvar lowSurrogateEnd = lowSurrogates[1];\n\t\t\tinnerIndex = index; // Note: the loop starts at the next index.\n\t\t\twhile (++innerIndex < surrogateMappings.length) {\n\t\t\t\tvar otherMapping = surrogateMappings[innerIndex];\n\t\t\t\tvar otherLowSurrogates = otherMapping[1];\n\t\t\t\tvar otherLowSurrogateStart = otherLowSurrogates[0];\n\t\t\t\tvar otherLowSurrogateEnd = otherLowSurrogates[1];\n\t\t\t\tif (\n\t\t\t\t\tlowSurrogateStart == otherLowSurrogateStart &&\n\t\t\t\t\tlowSurrogateEnd == otherLowSurrogateEnd\n\t\t\t\t) {\n\t\t\t\t\t// Add the code points in the other item to this one.\n\t\t\t\t\tif (dataIsSingleton(otherMapping[0])) {\n\t\t\t\t\t\tmapping[0] = dataAdd(mapping[0], otherMapping[0][0]);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tmapping[0] = dataAddRange(\n\t\t\t\t\t\t\tmapping[0],\n\t\t\t\t\t\t\totherMapping[0][0],\n\t\t\t\t\t\t\totherMapping[0][1] - 1\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t\t// Remove the other, now redundant, item.\n\t\t\t\t\tsurrogateMappings.splice(innerIndex, 1);\n\t\t\t\t\t--innerIndex;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn surrogateMappings;\n\t};\n\n\tvar surrogateSet = function(data) {\n\t\t// Exit early if `data` is an empty set.\n\t\tif (!data.length) {\n\t\t\treturn [];\n\t\t}\n\n\t\t// Iterate over the data per `(start, end)` pair.\n\t\tvar index = 0;\n\t\tvar start;\n\t\tvar end;\n\t\tvar startHigh;\n\t\tvar startLow;\n\t\tvar endHigh;\n\t\tvar endLow;\n\t\tvar surrogateMappings = [];\n\t\tvar length = data.length;\n\t\twhile (index < length) {\n\t\t\tstart = data[index];\n\t\t\tend = data[index + 1] - 1;\n\n\t\t\tstartHigh = highSurrogate(start);\n\t\t\tstartLow = lowSurrogate(start);\n\t\t\tendHigh = highSurrogate(end);\n\t\t\tendLow = lowSurrogate(end);\n\n\t\t\tvar startsWithLowestLowSurrogate = startLow == LOW_SURROGATE_MIN;\n\t\t\tvar endsWithHighestLowSurrogate = endLow == LOW_SURROGATE_MAX;\n\t\t\tvar complete = false;\n\n\t\t\t// Append the previous high-surrogate-to-low-surrogate mappings.\n\t\t\t// Step 1: `(startHigh, startLow)` to `(startHigh, LOW_SURROGATE_MAX)`.\n\t\t\tif (\n\t\t\t\tstartHigh == endHigh ||\n\t\t\t\tstartsWithLowestLowSurrogate && endsWithHighestLowSurrogate\n\t\t\t) {\n\t\t\t\tsurrogateMappings.push([\n\t\t\t\t\t[startHigh, endHigh + 1],\n\t\t\t\t\t[startLow, endLow + 1]\n\t\t\t\t]);\n\t\t\t\tcomplete = true;\n\t\t\t} else {\n\t\t\t\tsurrogateMappings.push([\n\t\t\t\t\t[startHigh, startHigh + 1],\n\t\t\t\t\t[startLow, LOW_SURROGATE_MAX + 1]\n\t\t\t\t]);\n\t\t\t}\n\n\t\t\t// Step 2: `(startHigh + 1, LOW_SURROGATE_MIN)` to\n\t\t\t// `(endHigh - 1, LOW_SURROGATE_MAX)`.\n\t\t\tif (!complete && startHigh + 1 < endHigh) {\n\t\t\t\tif (endsWithHighestLowSurrogate) {\n\t\t\t\t\t// Combine step 2 and step 3.\n\t\t\t\t\tsurrogateMappings.push([\n\t\t\t\t\t\t[startHigh + 1, endHigh + 1],\n\t\t\t\t\t\t[LOW_SURROGATE_MIN, endLow + 1]\n\t\t\t\t\t]);\n\t\t\t\t\tcomplete = true;\n\t\t\t\t} else {\n\t\t\t\t\tsurrogateMappings.push([\n\t\t\t\t\t\t[startHigh + 1, endHigh],\n\t\t\t\t\t\t[LOW_SURROGATE_MIN, LOW_SURROGATE_MAX + 1]\n\t\t\t\t\t]);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Step 3. `(endHigh, LOW_SURROGATE_MIN)` to `(endHigh, endLow)`.\n\t\t\tif (!complete) {\n\t\t\t\tsurrogateMappings.push([\n\t\t\t\t\t[endHigh, endHigh + 1],\n\t\t\t\t\t[LOW_SURROGATE_MIN, endLow + 1]\n\t\t\t\t]);\n\t\t\t}\n\n\t\t\tindex += 2;\n\t\t}\n\n\t\t// The format of `surrogateMappings` is as follows:\n\t\t//\n\t\t//     [ surrogateMapping1, surrogateMapping2 ]\n\t\t//\n\t\t// i.e.:\n\t\t//\n\t\t//     [\n\t\t//       [ highSurrogates1, lowSurrogates1 ],\n\t\t//       [ highSurrogates2, lowSurrogates2 ]\n\t\t//     ]\n\t\treturn optimizeSurrogateMappings(surrogateMappings);\n\t};\n\n\tvar createSurrogateCharacterClasses = function(surrogateMappings) {\n\t\tvar result = [];\n\t\tforEach(surrogateMappings, function(surrogateMapping) {\n\t\t\tvar highSurrogates = surrogateMapping[0];\n\t\t\tvar lowSurrogates = surrogateMapping[1];\n\t\t\tresult.push(\n\t\t\t\tcreateBMPCharacterClasses(highSurrogates) +\n\t\t\t\tcreateBMPCharacterClasses(lowSurrogates)\n\t\t\t);\n\t\t});\n\t\treturn result.join('|');\n\t};\n\n\tvar createCharacterClassesFromData = function(data, bmpOnly, hasUnicodeFlag) {\n\t\tif (hasUnicodeFlag) {\n\t\t\treturn createUnicodeCharacterClasses(data);\n\t\t}\n\t\tvar result = [];\n\n\t\tvar parts = splitAtBMP(data);\n\t\tvar loneHighSurrogates = parts.loneHighSurrogates;\n\t\tvar loneLowSurrogates = parts.loneLowSurrogates;\n\t\tvar bmp = parts.bmp;\n\t\tvar astral = parts.astral;\n\t\tvar hasLoneHighSurrogates = !dataIsEmpty(loneHighSurrogates);\n\t\tvar hasLoneLowSurrogates = !dataIsEmpty(loneLowSurrogates);\n\n\t\tvar surrogateMappings = surrogateSet(astral);\n\n\t\tif (bmpOnly) {\n\t\t\tbmp = dataAddData(bmp, loneHighSurrogates);\n\t\t\thasLoneHighSurrogates = false;\n\t\t\tbmp = dataAddData(bmp, loneLowSurrogates);\n\t\t\thasLoneLowSurrogates = false;\n\t\t}\n\n\t\tif (!dataIsEmpty(bmp)) {\n\t\t\t// The data set contains BMP code points that are not high surrogates\n\t\t\t// needed for astral code points in the set.\n\t\t\tresult.push(createBMPCharacterClasses(bmp));\n\t\t}\n\t\tif (surrogateMappings.length) {\n\t\t\t// The data set contains astral code points; append character classes\n\t\t\t// based on their surrogate pairs.\n\t\t\tresult.push(createSurrogateCharacterClasses(surrogateMappings));\n\t\t}\n\t\t// https://gist.github.com/mathiasbynens/bbe7f870208abcfec860\n\t\tif (hasLoneHighSurrogates) {\n\t\t\tresult.push(\n\t\t\t\tcreateBMPCharacterClasses(loneHighSurrogates) +\n\t\t\t\t// Make sure the high surrogates aren’t part of a surrogate pair.\n\t\t\t\t'(?![\\\\uDC00-\\\\uDFFF])'\n\t\t\t);\n\t\t}\n\t\tif (hasLoneLowSurrogates) {\n\t\t\tresult.push(\n\t\t\t\t// It is not possible to accurately assert the low surrogates aren’t\n\t\t\t\t// part of a surrogate pair, since JavaScript regular expressions do\n\t\t\t\t// not support lookbehind.\n\t\t\t\t'(?:[^\\\\uD800-\\\\uDBFF]|^)' +\n\t\t\t\tcreateBMPCharacterClasses(loneLowSurrogates)\n\t\t\t);\n\t\t}\n\t\treturn result.join('|');\n\t};\n\n\t/*--------------------------------------------------------------------------*/\n\n\t// `regenerate` can be used as a constructor (and new methods can be added to\n\t// its prototype) but also as a regular function, the latter of which is the\n\t// documented and most common usage. For that reason, it’s not capitalized.\n\tvar regenerate = function(value) {\n\t\tif (arguments.length > 1) {\n\t\t\tvalue = slice.call(arguments);\n\t\t}\n\t\tif (this instanceof regenerate) {\n\t\t\tthis.data = [];\n\t\t\treturn value ? this.add(value) : this;\n\t\t}\n\t\treturn (new regenerate).add(value);\n\t};\n\n\tregenerate.version = '1.3.3';\n\n\tvar proto = regenerate.prototype;\n\textend(proto, {\n\t\t'add': function(value) {\n\t\t\tvar $this = this;\n\t\t\tif (value == null) {\n\t\t\t\treturn $this;\n\t\t\t}\n\t\t\tif (value instanceof regenerate) {\n\t\t\t\t// Allow passing other Regenerate instances.\n\t\t\t\t$this.data = dataAddData($this.data, value.data);\n\t\t\t\treturn $this;\n\t\t\t}\n\t\t\tif (arguments.length > 1) {\n\t\t\t\tvalue = slice.call(arguments);\n\t\t\t}\n\t\t\tif (isArray(value)) {\n\t\t\t\tforEach(value, function(item) {\n\t\t\t\t\t$this.add(item);\n\t\t\t\t});\n\t\t\t\treturn $this;\n\t\t\t}\n\t\t\t$this.data = dataAdd(\n\t\t\t\t$this.data,\n\t\t\t\tisNumber(value) ? value : symbolToCodePoint(value)\n\t\t\t);\n\t\t\treturn $this;\n\t\t},\n\t\t'remove': function(value) {\n\t\t\tvar $this = this;\n\t\t\tif (value == null) {\n\t\t\t\treturn $this;\n\t\t\t}\n\t\t\tif (value instanceof regenerate) {\n\t\t\t\t// Allow passing other Regenerate instances.\n\t\t\t\t$this.data = dataRemoveData($this.data, value.data);\n\t\t\t\treturn $this;\n\t\t\t}\n\t\t\tif (arguments.length > 1) {\n\t\t\t\tvalue = slice.call(arguments);\n\t\t\t}\n\t\t\tif (isArray(value)) {\n\t\t\t\tforEach(value, function(item) {\n\t\t\t\t\t$this.remove(item);\n\t\t\t\t});\n\t\t\t\treturn $this;\n\t\t\t}\n\t\t\t$this.data = dataRemove(\n\t\t\t\t$this.data,\n\t\t\t\tisNumber(value) ? value : symbolToCodePoint(value)\n\t\t\t);\n\t\t\treturn $this;\n\t\t},\n\t\t'addRange': function(start, end) {\n\t\t\tvar $this = this;\n\t\t\t$this.data = dataAddRange($this.data,\n\t\t\t\tisNumber(start) ? start : symbolToCodePoint(start),\n\t\t\t\tisNumber(end) ? end : symbolToCodePoint(end)\n\t\t\t);\n\t\t\treturn $this;\n\t\t},\n\t\t'removeRange': function(start, end) {\n\t\t\tvar $this = this;\n\t\t\tvar startCodePoint = isNumber(start) ? start : symbolToCodePoint(start);\n\t\t\tvar endCodePoint = isNumber(end) ? end : symbolToCodePoint(end);\n\t\t\t$this.data = dataRemoveRange(\n\t\t\t\t$this.data,\n\t\t\t\tstartCodePoint,\n\t\t\t\tendCodePoint\n\t\t\t);\n\t\t\treturn $this;\n\t\t},\n\t\t'intersection': function(argument) {\n\t\t\tvar $this = this;\n\t\t\t// Allow passing other Regenerate instances.\n\t\t\t// TODO: Optimize this by writing and using `dataIntersectionData()`.\n\t\t\tvar array = argument instanceof regenerate ?\n\t\t\t\tdataToArray(argument.data) :\n\t\t\t\targument;\n\t\t\t$this.data = dataIntersection($this.data, array);\n\t\t\treturn $this;\n\t\t},\n\t\t'contains': function(codePoint) {\n\t\t\treturn dataContains(\n\t\t\t\tthis.data,\n\t\t\t\tisNumber(codePoint) ? codePoint : symbolToCodePoint(codePoint)\n\t\t\t);\n\t\t},\n\t\t'clone': function() {\n\t\t\tvar set = new regenerate;\n\t\t\tset.data = this.data.slice(0);\n\t\t\treturn set;\n\t\t},\n\t\t'toString': function(options) {\n\t\t\tvar result = createCharacterClassesFromData(\n\t\t\t\tthis.data,\n\t\t\t\toptions ? options.bmpOnly : false,\n\t\t\t\toptions ? options.hasUnicodeFlag : false\n\t\t\t);\n\t\t\tif (!result) {\n\t\t\t\t// For an empty set, return something that can be inserted `/here/` to\n\t\t\t\t// form a valid regular expression. Avoid `(?:)` since that matches the\n\t\t\t\t// empty string.\n\t\t\t\treturn '[]';\n\t\t\t}\n\t\t\t// Use `\\0` instead of `\\x00` where possible.\n\t\t\treturn result.replace(regexNull, '\\\\0$1');\n\t\t},\n\t\t'toRegExp': function(flags) {\n\t\t\tvar pattern = this.toString(\n\t\t\t\tflags && flags.indexOf('u') != -1 ?\n\t\t\t\t\t{ 'hasUnicodeFlag': true } :\n\t\t\t\t\tnull\n\t\t\t);\n\t\t\treturn RegExp(pattern, flags || '');\n\t\t},\n\t\t'valueOf': function() { // Note: `valueOf` is aliased as `toArray`.\n\t\t\treturn dataToArray(this.data);\n\t\t}\n\t});\n\n\tproto.toArray = proto.valueOf;\n\n\t// Some AMD build optimizers, like r.js, check for specific condition patterns\n\t// like the following:\n\tif (\n\t\ttypeof define == 'function' &&\n\t\ttypeof define.amd == 'object' &&\n\t\tdefine.amd\n\t) {\n\t\tdefine(function() {\n\t\t\treturn regenerate;\n\t\t});\n\t}\telse if (freeExports && !freeExports.nodeType) {\n\t\tif (freeModule) { // in Node.js, io.js, or RingoJS v0.8.0+\n\t\t\tfreeModule.exports = regenerate;\n\t\t} else { // in Narwhal or RingoJS v0.7.0-\n\t\t\tfreeExports.regenerate = regenerate;\n\t\t}\n\t} else { // in Rhino or a web browser\n\t\troot.regenerate = regenerate;\n\t}\n\n}(this));\n","// Generated by `/scripts/character-class-escape-sets.js`. Do not edit.\nvar regenerate = require('regenerate');\n\nexports.REGULAR = {\n\t'd': regenerate()\n\t\t.addRange(0x30, 0x39),\n\t'D': regenerate()\n\t\t.addRange(0x0, 0x2F)\n\t\t.addRange(0x3A, 0xFFFF),\n\t's': regenerate(0x20, 0xA0, 0x1680, 0x202F, 0x205F, 0x3000, 0xFEFF)\n\t\t.addRange(0x9, 0xD)\n\t\t.addRange(0x2000, 0x200A)\n\t\t.addRange(0x2028, 0x2029),\n\t'S': regenerate()\n\t\t.addRange(0x0, 0x8)\n\t\t.addRange(0xE, 0x1F)\n\t\t.addRange(0x21, 0x9F)\n\t\t.addRange(0xA1, 0x167F)\n\t\t.addRange(0x1681, 0x1FFF)\n\t\t.addRange(0x200B, 0x2027)\n\t\t.addRange(0x202A, 0x202E)\n\t\t.addRange(0x2030, 0x205E)\n\t\t.addRange(0x2060, 0x2FFF)\n\t\t.addRange(0x3001, 0xFEFE)\n\t\t.addRange(0xFF00, 0xFFFF),\n\t'w': regenerate(0x5F)\n\t\t.addRange(0x30, 0x39)\n\t\t.addRange(0x41, 0x5A)\n\t\t.addRange(0x61, 0x7A),\n\t'W': regenerate(0x60)\n\t\t.addRange(0x0, 0x2F)\n\t\t.addRange(0x3A, 0x40)\n\t\t.addRange(0x5B, 0x5E)\n\t\t.addRange(0x7B, 0xFFFF)\n};\n\nexports.UNICODE = {\n\t'd': regenerate()\n\t\t.addRange(0x30, 0x39),\n\t'D': regenerate()\n\t\t.addRange(0x0, 0x2F)\n\t\t.addRange(0x3A, 0x10FFFF),\n\t's': regenerate(0x20, 0xA0, 0x1680, 0x202F, 0x205F, 0x3000, 0xFEFF)\n\t\t.addRange(0x9, 0xD)\n\t\t.addRange(0x2000, 0x200A)\n\t\t.addRange(0x2028, 0x2029),\n\t'S': regenerate()\n\t\t.addRange(0x0, 0x8)\n\t\t.addRange(0xE, 0x1F)\n\t\t.addRange(0x21, 0x9F)\n\t\t.addRange(0xA1, 0x167F)\n\t\t.addRange(0x1681, 0x1FFF)\n\t\t.addRange(0x200B, 0x2027)\n\t\t.addRange(0x202A, 0x202E)\n\t\t.addRange(0x2030, 0x205E)\n\t\t.addRange(0x2060, 0x2FFF)\n\t\t.addRange(0x3001, 0xFEFE)\n\t\t.addRange(0xFF00, 0x10FFFF),\n\t'w': regenerate(0x5F)\n\t\t.addRange(0x30, 0x39)\n\t\t.addRange(0x41, 0x5A)\n\t\t.addRange(0x61, 0x7A),\n\t'W': regenerate(0x60)\n\t\t.addRange(0x0, 0x2F)\n\t\t.addRange(0x3A, 0x40)\n\t\t.addRange(0x5B, 0x5E)\n\t\t.addRange(0x7B, 0x10FFFF)\n};\n\nexports.UNICODE_IGNORE_CASE = {\n\t'd': regenerate()\n\t\t.addRange(0x30, 0x39),\n\t'D': regenerate()\n\t\t.addRange(0x0, 0x2F)\n\t\t.addRange(0x3A, 0x10FFFF),\n\t's': regenerate(0x20, 0xA0, 0x1680, 0x202F, 0x205F, 0x3000, 0xFEFF)\n\t\t.addRange(0x9, 0xD)\n\t\t.addRange(0x2000, 0x200A)\n\t\t.addRange(0x2028, 0x2029),\n\t'S': regenerate()\n\t\t.addRange(0x0, 0x8)\n\t\t.addRange(0xE, 0x1F)\n\t\t.addRange(0x21, 0x9F)\n\t\t.addRange(0xA1, 0x167F)\n\t\t.addRange(0x1681, 0x1FFF)\n\t\t.addRange(0x200B, 0x2027)\n\t\t.addRange(0x202A, 0x202E)\n\t\t.addRange(0x2030, 0x205E)\n\t\t.addRange(0x2060, 0x2FFF)\n\t\t.addRange(0x3001, 0xFEFE)\n\t\t.addRange(0xFF00, 0x10FFFF),\n\t'w': regenerate(0x5F, 0x17F, 0x212A)\n\t\t.addRange(0x30, 0x39)\n\t\t.addRange(0x41, 0x5A)\n\t\t.addRange(0x61, 0x7A),\n\t'W': regenerate(0x4B, 0x53, 0x60)\n\t\t.addRange(0x0, 0x2F)\n\t\t.addRange(0x3A, 0x40)\n\t\t.addRange(0x5B, 0x5E)\n\t\t.addRange(0x7B, 0x10FFFF)\n};\n","// regjsparser\n//\n// ==================================================================\n//\n// See ECMA-262 Standard: 15.10.1\n//\n// NOTE: The ECMA-262 standard uses the term \"Assertion\" for /^/. Here the\n//   term \"Anchor\" is used.\n//\n// Pattern ::\n//      Disjunction\n//\n// Disjunction ::\n//      Alternative\n//      Alternative | Disjunction\n//\n// Alternative ::\n//      [empty]\n//      Alternative Term\n//\n// Term ::\n//      Anchor\n//      Atom\n//      Atom Quantifier\n//\n// Anchor ::\n//      ^\n//      $\n//      \\ b\n//      \\ B\n//      ( ? = Disjunction )\n//      ( ? ! Disjunction )\n//\n// Quantifier ::\n//      QuantifierPrefix\n//      QuantifierPrefix ?\n//\n// QuantifierPrefix ::\n//      *\n//      +\n//      ?\n//      { DecimalDigits }\n//      { DecimalDigits , }\n//      { DecimalDigits , DecimalDigits }\n//\n// Atom ::\n//      PatternCharacter\n//      .\n//      \\ AtomEscape\n//      CharacterClass\n//      ( Disjunction )\n//      ( ? : Disjunction )\n//\n// PatternCharacter ::\n//      SourceCharacter but not any of: ^ $ \\ . * + ? ( ) [ ] { } |\n//\n// AtomEscape ::\n//      DecimalEscape\n//      CharacterEscape\n//      CharacterClassEscape\n//\n// CharacterEscape[U] ::\n//      ControlEscape\n//      c ControlLetter\n//      HexEscapeSequence\n//      RegExpUnicodeEscapeSequence[?U] (ES6)\n//      IdentityEscape[?U]\n//\n// ControlEscape ::\n//      one of f n r t v\n// ControlLetter ::\n//      one of\n//          a b c d e f g h i j k l m n o p q r s t u v w x y z\n//          A B C D E F G H I J K L M N O P Q R S T U V W X Y Z\n//\n// IdentityEscape ::\n//      SourceCharacter but not IdentifierPart\n//      <ZWJ>\n//      <ZWNJ>\n//\n// DecimalEscape ::\n//      DecimalIntegerLiteral [lookahead ∉ DecimalDigit]\n//\n// CharacterClassEscape ::\n//      one of d D s S w W\n//\n// CharacterClass ::\n//      [ [lookahead ∉ {^}] ClassRanges ]\n//      [ ^ ClassRanges ]\n//\n// ClassRanges ::\n//      [empty]\n//      NonemptyClassRanges\n//\n// NonemptyClassRanges ::\n//      ClassAtom\n//      ClassAtom NonemptyClassRangesNoDash\n//      ClassAtom - ClassAtom ClassRanges\n//\n// NonemptyClassRangesNoDash ::\n//      ClassAtom\n//      ClassAtomNoDash NonemptyClassRangesNoDash\n//      ClassAtomNoDash - ClassAtom ClassRanges\n//\n// ClassAtom ::\n//      -\n//      ClassAtomNoDash\n//\n// ClassAtomNoDash ::\n//      SourceCharacter but not one of \\ or ] or -\n//      \\ ClassEscape\n//\n// ClassEscape ::\n//      DecimalEscape\n//      b\n//      CharacterEscape\n//      CharacterClassEscape\n\n(function() {\n\n  function parse(str, flags) {\n    function addRaw(node) {\n      node.raw = str.substring(node.range[0], node.range[1]);\n      return node;\n    }\n\n    function updateRawStart(node, start) {\n      node.range[0] = start;\n      return addRaw(node);\n    }\n\n    function createAnchor(kind, rawLength) {\n      return addRaw({\n        type: 'anchor',\n        kind: kind,\n        range: [\n          pos - rawLength,\n          pos\n        ]\n      });\n    }\n\n    function createValue(kind, codePoint, from, to) {\n      return addRaw({\n        type: 'value',\n        kind: kind,\n        codePoint: codePoint,\n        range: [from, to]\n      });\n    }\n\n    function createEscaped(kind, codePoint, value, fromOffset) {\n      fromOffset = fromOffset || 0;\n      return createValue(kind, codePoint, pos - (value.length + fromOffset), pos);\n    }\n\n    function createCharacter(matches) {\n      var _char = matches[0];\n      var first = _char.charCodeAt(0);\n      if (hasUnicodeFlag) {\n        var second;\n        if (_char.length === 1 && first >= 0xD800 && first <= 0xDBFF) {\n          second = lookahead().charCodeAt(0);\n          if (second >= 0xDC00 && second <= 0xDFFF) {\n            // Unicode surrogate pair\n            pos++;\n            return createValue(\n                'symbol',\n                (first - 0xD800) * 0x400 + second - 0xDC00 + 0x10000,\n                pos - 2, pos);\n          }\n        }\n      }\n      return createValue('symbol', first, pos - 1, pos);\n    }\n\n    function createDisjunction(alternatives, from, to) {\n      return addRaw({\n        type: 'disjunction',\n        body: alternatives,\n        range: [\n          from,\n          to\n        ]\n      });\n    }\n\n    function createDot() {\n      return addRaw({\n        type: 'dot',\n        range: [\n          pos - 1,\n          pos\n        ]\n      });\n    }\n\n    function createCharacterClassEscape(value) {\n      return addRaw({\n        type: 'characterClassEscape',\n        value: value,\n        range: [\n          pos - 2,\n          pos\n        ]\n      });\n    }\n\n    function createReference(matchIndex) {\n      return addRaw({\n        type: 'reference',\n        matchIndex: parseInt(matchIndex, 10),\n        range: [\n          pos - 1 - matchIndex.length,\n          pos\n        ]\n      });\n    }\n\n    function createGroup(behavior, disjunction, from, to) {\n      return addRaw({\n        type: 'group',\n        behavior: behavior,\n        body: disjunction,\n        range: [\n          from,\n          to\n        ]\n      });\n    }\n\n    function createQuantifier(min, max, from, to) {\n      if (to == null) {\n        from = pos - 1;\n        to = pos;\n      }\n\n      return addRaw({\n        type: 'quantifier',\n        min: min,\n        max: max,\n        greedy: true,\n        body: null, // set later on\n        range: [\n          from,\n          to\n        ]\n      });\n    }\n\n    function createAlternative(terms, from, to) {\n      return addRaw({\n        type: 'alternative',\n        body: terms,\n        range: [\n          from,\n          to\n        ]\n      });\n    }\n\n    function createCharacterClass(classRanges, negative, from, to) {\n      return addRaw({\n        type: 'characterClass',\n        body: classRanges,\n        negative: negative,\n        range: [\n          from,\n          to\n        ]\n      });\n    }\n\n    function createClassRange(min, max, from, to) {\n      // See 15.10.2.15:\n      if (min.codePoint > max.codePoint) {\n        bail('invalid range in character class', min.raw + '-' + max.raw, from, to);\n      }\n\n      return addRaw({\n        type: 'characterClassRange',\n        min: min,\n        max: max,\n        range: [\n          from,\n          to\n        ]\n      });\n    }\n\n    function flattenBody(body) {\n      if (body.type === 'alternative') {\n        return body.body;\n      } else {\n        return [body];\n      }\n    }\n\n    function isEmpty(obj) {\n      return obj.type === 'empty';\n    }\n\n    function incr(amount) {\n      amount = (amount || 1);\n      var res = str.substring(pos, pos + amount);\n      pos += (amount || 1);\n      return res;\n    }\n\n    function skip(value) {\n      if (!match(value)) {\n        bail('character', value);\n      }\n    }\n\n    function match(value) {\n      if (str.indexOf(value, pos) === pos) {\n        return incr(value.length);\n      }\n    }\n\n    function lookahead() {\n      return str[pos];\n    }\n\n    function current(value) {\n      return str.indexOf(value, pos) === pos;\n    }\n\n    function next(value) {\n      return str[pos + 1] === value;\n    }\n\n    function matchReg(regExp) {\n      var subStr = str.substring(pos);\n      var res = subStr.match(regExp);\n      if (res) {\n        res.range = [];\n        res.range[0] = pos;\n        incr(res[0].length);\n        res.range[1] = pos;\n      }\n      return res;\n    }\n\n    function parseDisjunction() {\n      // Disjunction ::\n      //      Alternative\n      //      Alternative | Disjunction\n      var res = [], from = pos;\n      res.push(parseAlternative());\n\n      while (match('|')) {\n        res.push(parseAlternative());\n      }\n\n      if (res.length === 1) {\n        return res[0];\n      }\n\n      return createDisjunction(res, from, pos);\n    }\n\n    function parseAlternative() {\n      var res = [], from = pos;\n      var term;\n\n      // Alternative ::\n      //      [empty]\n      //      Alternative Term\n      while (term = parseTerm()) {\n        res.push(term);\n      }\n\n      if (res.length === 1) {\n        return res[0];\n      }\n\n      return createAlternative(res, from, pos);\n    }\n\n    function parseTerm() {\n      // Term ::\n      //      Anchor\n      //      Atom\n      //      Atom Quantifier\n\n      if (pos >= str.length || current('|') || current(')')) {\n        return null; /* Means: The term is empty */\n      }\n\n      var anchor = parseAnchor();\n\n      if (anchor) {\n        return anchor;\n      }\n\n      var atom = parseAtom();\n      if (!atom) {\n        bail('Expected atom');\n      }\n      var quantifier = parseQuantifier() || false;\n      if (quantifier) {\n        quantifier.body = flattenBody(atom);\n        // The quantifier contains the atom. Therefore, the beginning of the\n        // quantifier range is given by the beginning of the atom.\n        updateRawStart(quantifier, atom.range[0]);\n        return quantifier;\n      }\n      return atom;\n    }\n\n    function parseGroup(matchA, typeA, matchB, typeB) {\n      var type = null, from = pos;\n\n      if (match(matchA)) {\n        type = typeA;\n      } else if (match(matchB)) {\n        type = typeB;\n      } else {\n        return false;\n      }\n\n      var body = parseDisjunction();\n      if (!body) {\n        bail('Expected disjunction');\n      }\n      skip(')');\n      var group = createGroup(type, flattenBody(body), from, pos);\n\n      if (type == 'normal') {\n        // Keep track of the number of closed groups. This is required for\n        // parseDecimalEscape(). In case the string is parsed a second time the\n        // value already holds the total count and no incrementation is required.\n        if (firstIteration) {\n          closedCaptureCounter++;\n        }\n      }\n      return group;\n    }\n\n    function parseAnchor() {\n      // Anchor ::\n      //      ^\n      //      $\n      //      \\ b\n      //      \\ B\n      //      ( ? = Disjunction )\n      //      ( ? ! Disjunction )\n      var res, from = pos;\n\n      if (match('^')) {\n        return createAnchor('start', 1 /* rawLength */);\n      } else if (match('$')) {\n        return createAnchor('end', 1 /* rawLength */);\n      } else if (match('\\\\b')) {\n        return createAnchor('boundary', 2 /* rawLength */);\n      } else if (match('\\\\B')) {\n        return createAnchor('not-boundary', 2 /* rawLength */);\n      } else {\n        return parseGroup('(?=', 'lookahead', '(?!', 'negativeLookahead');\n      }\n    }\n\n    function parseQuantifier() {\n      // Quantifier ::\n      //      QuantifierPrefix\n      //      QuantifierPrefix ?\n      //\n      // QuantifierPrefix ::\n      //      *\n      //      +\n      //      ?\n      //      { DecimalDigits }\n      //      { DecimalDigits , }\n      //      { DecimalDigits , DecimalDigits }\n\n      var res, from = pos;\n      var quantifier;\n      var min, max;\n\n      if (match('*')) {\n        quantifier = createQuantifier(0);\n      }\n      else if (match('+')) {\n        quantifier = createQuantifier(1);\n      }\n      else if (match('?')) {\n        quantifier = createQuantifier(0, 1);\n      }\n      else if (res = matchReg(/^\\{([0-9]+)\\}/)) {\n        min = parseInt(res[1], 10);\n        quantifier = createQuantifier(min, min, res.range[0], res.range[1]);\n      }\n      else if (res = matchReg(/^\\{([0-9]+),\\}/)) {\n        min = parseInt(res[1], 10);\n        quantifier = createQuantifier(min, undefined, res.range[0], res.range[1]);\n      }\n      else if (res = matchReg(/^\\{([0-9]+),([0-9]+)\\}/)) {\n        min = parseInt(res[1], 10);\n        max = parseInt(res[2], 10);\n        if (min > max) {\n          bail('numbers out of order in {} quantifier', '', from, pos);\n        }\n        quantifier = createQuantifier(min, max, res.range[0], res.range[1]);\n      }\n\n      if (quantifier) {\n        if (match('?')) {\n          quantifier.greedy = false;\n          quantifier.range[1] += 1;\n        }\n      }\n\n      return quantifier;\n    }\n\n    function parseAtom() {\n      // Atom ::\n      //      PatternCharacter\n      //      .\n      //      \\ AtomEscape\n      //      CharacterClass\n      //      ( Disjunction )\n      //      ( ? : Disjunction )\n\n      var res;\n\n      // jviereck: allow ']', '}' here as well to be compatible with browser's\n      //   implementations: ']'.match(/]/);\n      // if (res = matchReg(/^[^^$\\\\.*+?()[\\]{}|]/)) {\n      if (res = matchReg(/^[^^$\\\\.*+?(){[|]/)) {\n        //      PatternCharacter\n        return createCharacter(res);\n      }\n      else if (match('.')) {\n        //      .\n        return createDot();\n      }\n      else if (match('\\\\')) {\n        //      \\ AtomEscape\n        res = parseAtomEscape();\n        if (!res) {\n          bail('atomEscape');\n        }\n        return res;\n      }\n      else if (res = parseCharacterClass()) {\n        return res;\n      }\n      else {\n        //      ( Disjunction )\n        //      ( ? : Disjunction )\n        return parseGroup('(?:', 'ignore', '(', 'normal');\n      }\n    }\n\n    function parseUnicodeSurrogatePairEscape(firstEscape) {\n      if (hasUnicodeFlag) {\n        var first, second;\n        if (firstEscape.kind == 'unicodeEscape' &&\n          (first = firstEscape.codePoint) >= 0xD800 && first <= 0xDBFF &&\n          current('\\\\') && next('u') ) {\n          var prevPos = pos;\n          pos++;\n          var secondEscape = parseClassEscape();\n          if (secondEscape.kind == 'unicodeEscape' &&\n            (second = secondEscape.codePoint) >= 0xDC00 && second <= 0xDFFF) {\n            // Unicode surrogate pair\n            firstEscape.range[1] = secondEscape.range[1];\n            firstEscape.codePoint = (first - 0xD800) * 0x400 + second - 0xDC00 + 0x10000;\n            firstEscape.type = 'value';\n            firstEscape.kind = 'unicodeCodePointEscape';\n            addRaw(firstEscape);\n          }\n          else {\n            pos = prevPos;\n          }\n        }\n      }\n      return firstEscape;\n    }\n\n    function parseClassEscape() {\n      return parseAtomEscape(true);\n    }\n\n    function parseAtomEscape(insideCharacterClass) {\n      // AtomEscape ::\n      //      DecimalEscape\n      //      CharacterEscape\n      //      CharacterClassEscape\n\n      var res, from = pos;\n\n      res = parseDecimalEscape();\n      if (res) {\n        return res;\n      }\n\n      // For ClassEscape\n      if (insideCharacterClass) {\n        if (match('b')) {\n          // 15.10.2.19\n          // The production ClassEscape :: b evaluates by returning the\n          // CharSet containing the one character <BS> (Unicode value 0008).\n          return createEscaped('singleEscape', 0x0008, '\\\\b');\n        } else if (match('B')) {\n          bail('\\\\B not possible inside of CharacterClass', '', from);\n        }\n      }\n\n      res = parseCharacterEscape();\n\n      return res;\n    }\n\n\n    function parseDecimalEscape() {\n      // DecimalEscape ::\n      //      DecimalIntegerLiteral [lookahead ∉ DecimalDigit]\n      //      CharacterClassEscape :: one of d D s S w W\n\n      var res, match;\n\n      if (res = matchReg(/^(?!0)\\d+/)) {\n        match = res[0];\n        var refIdx = parseInt(res[0], 10);\n        if (refIdx <= closedCaptureCounter) {\n          // If the number is smaller than the normal-groups found so\n          // far, then it is a reference...\n          return createReference(res[0]);\n        } else {\n          // ... otherwise it needs to be interpreted as a octal (if the\n          // number is in an octal format). If it is NOT octal format,\n          // then the slash is ignored and the number is matched later\n          // as normal characters.\n\n          // Recall the negative decision to decide if the input must be parsed\n          // a second time with the total normal-groups.\n          backrefDenied.push(refIdx);\n\n          // Reset the position again, as maybe only parts of the previous\n          // matched numbers are actual octal numbers. E.g. in '019' only\n          // the '01' should be matched.\n          incr(-res[0].length);\n          if (res = matchReg(/^[0-7]{1,3}/)) {\n            return createEscaped('octal', parseInt(res[0], 8), res[0], 1);\n          } else {\n            // If we end up here, we have a case like /\\91/. Then the\n            // first slash is to be ignored and the 9 & 1 to be treated\n            // like ordinary characters. Create a character for the\n            // first number only here - other number-characters\n            // (if available) will be matched later.\n            res = createCharacter(matchReg(/^[89]/));\n            return updateRawStart(res, res.range[0] - 1);\n          }\n        }\n      }\n      // Only allow octal numbers in the following. All matched numbers start\n      // with a zero (if the do not, the previous if-branch is executed).\n      // If the number is not octal format and starts with zero (e.g. `091`)\n      // then only the zeros `0` is treated here and the `91` are ordinary\n      // characters.\n      // Example:\n      //   /\\091/.exec('\\091')[0].length === 3\n      else if (res = matchReg(/^[0-7]{1,3}/)) {\n        match = res[0];\n        if (/^0{1,3}$/.test(match)) {\n          // If they are all zeros, then only take the first one.\n          return createEscaped('null', 0x0000, '0', match.length + 1);\n        } else {\n          return createEscaped('octal', parseInt(match, 8), match, 1);\n        }\n      } else if (res = matchReg(/^[dDsSwW]/)) {\n        return createCharacterClassEscape(res[0]);\n      }\n      return false;\n    }\n\n    function parseCharacterEscape() {\n      // CharacterEscape ::\n      //      ControlEscape\n      //      c ControlLetter\n      //      HexEscapeSequence\n      //      UnicodeEscapeSequence\n      //      IdentityEscape\n\n      var res;\n      if (res = matchReg(/^[fnrtv]/)) {\n        // ControlEscape\n        var codePoint = 0;\n        switch (res[0]) {\n          case 't': codePoint = 0x009; break;\n          case 'n': codePoint = 0x00A; break;\n          case 'v': codePoint = 0x00B; break;\n          case 'f': codePoint = 0x00C; break;\n          case 'r': codePoint = 0x00D; break;\n        }\n        return createEscaped('singleEscape', codePoint, '\\\\' + res[0]);\n      } else if (res = matchReg(/^c([a-zA-Z])/)) {\n        // c ControlLetter\n        return createEscaped('controlLetter', res[1].charCodeAt(0) % 32, res[1], 2);\n      } else if (res = matchReg(/^x([0-9a-fA-F]{2})/)) {\n        // HexEscapeSequence\n        return createEscaped('hexadecimalEscape', parseInt(res[1], 16), res[1], 2);\n      } else if (res = matchReg(/^u([0-9a-fA-F]{4})/)) {\n        // UnicodeEscapeSequence\n        return parseUnicodeSurrogatePairEscape(\n          createEscaped('unicodeEscape', parseInt(res[1], 16), res[1], 2)\n        );\n      } else if (hasUnicodeFlag && (res = matchReg(/^u\\{([0-9a-fA-F]+)\\}/))) {\n        // RegExpUnicodeEscapeSequence (ES6 Unicode code point escape)\n        return createEscaped('unicodeCodePointEscape', parseInt(res[1], 16), res[1], 4);\n      } else {\n        // IdentityEscape\n        return parseIdentityEscape();\n      }\n    }\n\n    // Taken from the Esprima parser.\n    function isIdentifierPart(ch) {\n      // Generated by `tools/generate-identifier-regex.js`.\n      var NonAsciiIdentifierPart = new RegExp('[\\xAA\\xB5\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0300-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u0483-\\u0487\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u0591-\\u05BD\\u05BF\\u05C1\\u05C2\\u05C4\\u05C5\\u05C7\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0610-\\u061A\\u0620-\\u0669\\u066E-\\u06D3\\u06D5-\\u06DC\\u06DF-\\u06E8\\u06EA-\\u06FC\\u06FF\\u0710-\\u074A\\u074D-\\u07B1\\u07C0-\\u07F5\\u07FA\\u0800-\\u082D\\u0840-\\u085B\\u08A0-\\u08B2\\u08E4-\\u0963\\u0966-\\u096F\\u0971-\\u0983\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BC-\\u09C4\\u09C7\\u09C8\\u09CB-\\u09CE\\u09D7\\u09DC\\u09DD\\u09DF-\\u09E3\\u09E6-\\u09F1\\u0A01-\\u0A03\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A3C\\u0A3E-\\u0A42\\u0A47\\u0A48\\u0A4B-\\u0A4D\\u0A51\\u0A59-\\u0A5C\\u0A5E\\u0A66-\\u0A75\\u0A81-\\u0A83\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABC-\\u0AC5\\u0AC7-\\u0AC9\\u0ACB-\\u0ACD\\u0AD0\\u0AE0-\\u0AE3\\u0AE6-\\u0AEF\\u0B01-\\u0B03\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3C-\\u0B44\\u0B47\\u0B48\\u0B4B-\\u0B4D\\u0B56\\u0B57\\u0B5C\\u0B5D\\u0B5F-\\u0B63\\u0B66-\\u0B6F\\u0B71\\u0B82\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BBE-\\u0BC2\\u0BC6-\\u0BC8\\u0BCA-\\u0BCD\\u0BD0\\u0BD7\\u0BE6-\\u0BEF\\u0C00-\\u0C03\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D-\\u0C44\\u0C46-\\u0C48\\u0C4A-\\u0C4D\\u0C55\\u0C56\\u0C58\\u0C59\\u0C60-\\u0C63\\u0C66-\\u0C6F\\u0C81-\\u0C83\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBC-\\u0CC4\\u0CC6-\\u0CC8\\u0CCA-\\u0CCD\\u0CD5\\u0CD6\\u0CDE\\u0CE0-\\u0CE3\\u0CE6-\\u0CEF\\u0CF1\\u0CF2\\u0D01-\\u0D03\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D-\\u0D44\\u0D46-\\u0D48\\u0D4A-\\u0D4E\\u0D57\\u0D60-\\u0D63\\u0D66-\\u0D6F\\u0D7A-\\u0D7F\\u0D82\\u0D83\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0DCA\\u0DCF-\\u0DD4\\u0DD6\\u0DD8-\\u0DDF\\u0DE6-\\u0DEF\\u0DF2\\u0DF3\\u0E01-\\u0E3A\\u0E40-\\u0E4E\\u0E50-\\u0E59\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB9\\u0EBB-\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EC8-\\u0ECD\\u0ED0-\\u0ED9\\u0EDC-\\u0EDF\\u0F00\\u0F18\\u0F19\\u0F20-\\u0F29\\u0F35\\u0F37\\u0F39\\u0F3E-\\u0F47\\u0F49-\\u0F6C\\u0F71-\\u0F84\\u0F86-\\u0F97\\u0F99-\\u0FBC\\u0FC6\\u1000-\\u1049\\u1050-\\u109D\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u135D-\\u135F\\u1380-\\u138F\\u13A0-\\u13F4\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F8\\u1700-\\u170C\\u170E-\\u1714\\u1720-\\u1734\\u1740-\\u1753\\u1760-\\u176C\\u176E-\\u1770\\u1772\\u1773\\u1780-\\u17D3\\u17D7\\u17DC\\u17DD\\u17E0-\\u17E9\\u180B-\\u180D\\u1810-\\u1819\\u1820-\\u1877\\u1880-\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1920-\\u192B\\u1930-\\u193B\\u1946-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u19D0-\\u19D9\\u1A00-\\u1A1B\\u1A20-\\u1A5E\\u1A60-\\u1A7C\\u1A7F-\\u1A89\\u1A90-\\u1A99\\u1AA7\\u1AB0-\\u1ABD\\u1B00-\\u1B4B\\u1B50-\\u1B59\\u1B6B-\\u1B73\\u1B80-\\u1BF3\\u1C00-\\u1C37\\u1C40-\\u1C49\\u1C4D-\\u1C7D\\u1CD0-\\u1CD2\\u1CD4-\\u1CF6\\u1CF8\\u1CF9\\u1D00-\\u1DF5\\u1DFC-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u200C\\u200D\\u203F\\u2040\\u2054\\u2071\\u207F\\u2090-\\u209C\\u20D0-\\u20DC\\u20E1\\u20E5-\\u20F0\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2160-\\u2188\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D7F-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2DE0-\\u2DFF\\u2E2F\\u3005-\\u3007\\u3021-\\u302F\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u3099\\u309A\\u309D-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FCC\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA62B\\uA640-\\uA66F\\uA674-\\uA67D\\uA67F-\\uA69D\\uA69F-\\uA6F1\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA78E\\uA790-\\uA7AD\\uA7B0\\uA7B1\\uA7F7-\\uA827\\uA840-\\uA873\\uA880-\\uA8C4\\uA8D0-\\uA8D9\\uA8E0-\\uA8F7\\uA8FB\\uA900-\\uA92D\\uA930-\\uA953\\uA960-\\uA97C\\uA980-\\uA9C0\\uA9CF-\\uA9D9\\uA9E0-\\uA9FE\\uAA00-\\uAA36\\uAA40-\\uAA4D\\uAA50-\\uAA59\\uAA60-\\uAA76\\uAA7A-\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEF\\uAAF2-\\uAAF6\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB5F\\uAB64\\uAB65\\uABC0-\\uABEA\\uABEC\\uABED\\uABF0-\\uABF9\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE00-\\uFE0F\\uFE20-\\uFE2D\\uFE33\\uFE34\\uFE4D-\\uFE4F\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF10-\\uFF19\\uFF21-\\uFF3A\\uFF3F\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]');\n\n      return (ch === 36) || (ch === 95) ||  // $ (dollar) and _ (underscore)\n        (ch >= 65 && ch <= 90) ||         // A..Z\n        (ch >= 97 && ch <= 122) ||        // a..z\n        (ch >= 48 && ch <= 57) ||         // 0..9\n        (ch === 92) ||                    // \\ (backslash)\n        ((ch >= 0x80) && NonAsciiIdentifierPart.test(String.fromCharCode(ch)));\n    }\n\n    function parseIdentityEscape() {\n      // IdentityEscape ::\n      //      SourceCharacter but not IdentifierPart\n      //      <ZWJ>\n      //      <ZWNJ>\n\n      var ZWJ = '\\u200C';\n      var ZWNJ = '\\u200D';\n\n      var tmp;\n\n      if (!isIdentifierPart(lookahead())) {\n        tmp = incr();\n        return createEscaped('identifier', tmp.charCodeAt(0), tmp, 1);\n      }\n\n      if (match(ZWJ)) {\n        // <ZWJ>\n        return createEscaped('identifier', 0x200C, ZWJ);\n      } else if (match(ZWNJ)) {\n        // <ZWNJ>\n        return createEscaped('identifier', 0x200D, ZWNJ);\n      }\n\n      return null;\n    }\n\n    function parseCharacterClass() {\n      // CharacterClass ::\n      //      [ [lookahead ∉ {^}] ClassRanges ]\n      //      [ ^ ClassRanges ]\n\n      var res, from = pos;\n      if (res = matchReg(/^\\[\\^/)) {\n        res = parseClassRanges();\n        skip(']');\n        return createCharacterClass(res, true, from, pos);\n      } else if (match('[')) {\n        res = parseClassRanges();\n        skip(']');\n        return createCharacterClass(res, false, from, pos);\n      }\n\n      return null;\n    }\n\n    function parseClassRanges() {\n      // ClassRanges ::\n      //      [empty]\n      //      NonemptyClassRanges\n\n      var res;\n      if (current(']')) {\n        // Empty array means nothing insinde of the ClassRange.\n        return [];\n      } else {\n        res = parseNonemptyClassRanges();\n        if (!res) {\n          bail('nonEmptyClassRanges');\n        }\n        return res;\n      }\n    }\n\n    function parseHelperClassRanges(atom) {\n      var from, to, res;\n      if (current('-') && !next(']')) {\n        // ClassAtom - ClassAtom ClassRanges\n        skip('-');\n\n        res = parseClassAtom();\n        if (!res) {\n          bail('classAtom');\n        }\n        to = pos;\n        var classRanges = parseClassRanges();\n        if (!classRanges) {\n          bail('classRanges');\n        }\n        from = atom.range[0];\n        if (classRanges.type === 'empty') {\n          return [createClassRange(atom, res, from, to)];\n        }\n        return [createClassRange(atom, res, from, to)].concat(classRanges);\n      }\n\n      res = parseNonemptyClassRangesNoDash();\n      if (!res) {\n        bail('nonEmptyClassRangesNoDash');\n      }\n\n      return [atom].concat(res);\n    }\n\n    function parseNonemptyClassRanges() {\n      // NonemptyClassRanges ::\n      //      ClassAtom\n      //      ClassAtom NonemptyClassRangesNoDash\n      //      ClassAtom - ClassAtom ClassRanges\n\n      var atom = parseClassAtom();\n      if (!atom) {\n        bail('classAtom');\n      }\n\n      if (current(']')) {\n        // ClassAtom\n        return [atom];\n      }\n\n      // ClassAtom NonemptyClassRangesNoDash\n      // ClassAtom - ClassAtom ClassRanges\n      return parseHelperClassRanges(atom);\n    }\n\n    function parseNonemptyClassRangesNoDash() {\n      // NonemptyClassRangesNoDash ::\n      //      ClassAtom\n      //      ClassAtomNoDash NonemptyClassRangesNoDash\n      //      ClassAtomNoDash - ClassAtom ClassRanges\n\n      var res = parseClassAtom();\n      if (!res) {\n        bail('classAtom');\n      }\n      if (current(']')) {\n        //      ClassAtom\n        return res;\n      }\n\n      // ClassAtomNoDash NonemptyClassRangesNoDash\n      // ClassAtomNoDash - ClassAtom ClassRanges\n      return parseHelperClassRanges(res);\n    }\n\n    function parseClassAtom() {\n      // ClassAtom ::\n      //      -\n      //      ClassAtomNoDash\n      if (match('-')) {\n        return createCharacter('-');\n      } else {\n        return parseClassAtomNoDash();\n      }\n    }\n\n    function parseClassAtomNoDash() {\n      // ClassAtomNoDash ::\n      //      SourceCharacter but not one of \\ or ] or -\n      //      \\ ClassEscape\n\n      var res;\n      if (res = matchReg(/^[^\\\\\\]-]/)) {\n        return createCharacter(res[0]);\n      } else if (match('\\\\')) {\n        res = parseClassEscape();\n        if (!res) {\n          bail('classEscape');\n        }\n\n        return parseUnicodeSurrogatePairEscape(res);\n      }\n    }\n\n    function bail(message, details, from, to) {\n      from = from == null ? pos : from;\n      to = to == null ? from : to;\n\n      var contextStart = Math.max(0, from - 10);\n      var contextEnd = Math.min(to + 10, str.length);\n\n      // Output a bit of context and a line pointing to where our error is.\n      //\n      // We are assuming that there are no actual newlines in the content as this is a regular expression.\n      var context = '    ' + str.substring(contextStart, contextEnd);\n      var pointer = '    ' + new Array(from - contextStart + 1).join(' ') + '^';\n\n      throw SyntaxError(message + ' at position ' + from + (details ? ': ' + details : '') + '\\n' + context + '\\n' + pointer);\n    }\n\n    var backrefDenied = [];\n    var closedCaptureCounter = 0;\n    var firstIteration = true;\n    var hasUnicodeFlag = (flags || \"\").indexOf(\"u\") !== -1;\n    var pos = 0;\n\n    // Convert the input to a string and treat the empty string special.\n    str = String(str);\n    if (str === '') {\n      str = '(?:)';\n    }\n\n    var result = parseDisjunction();\n\n    if (result.range[1] !== str.length) {\n      bail('Could not parse entire input - got stuck', '', result.range[1]);\n    }\n\n    // The spec requires to interpret the `\\2` in `/\\2()()/` as backreference.\n    // As the parser collects the number of capture groups as the string is\n    // parsed it is impossible to make these decisions at the point when the\n    // `\\2` is handled. In case the local decision turns out to be wrong after\n    // the parsing has finished, the input string is parsed a second time with\n    // the total number of capture groups set.\n    //\n    // SEE: https://github.com/jviereck/regjsparser/issues/70\n    for (var i = 0; i < backrefDenied.length; i++) {\n      if (backrefDenied[i] <= closedCaptureCounter) {\n        // Parse the input a second time.\n        pos = 0;\n        firstIteration = false;\n        return parseDisjunction();\n      }\n    }\n\n    return result;\n  }\n\n  var regjsparser = {\n    parse: parse\n  };\n\n  if (typeof module !== 'undefined' && module.exports) {\n    module.exports = regjsparser;\n  } else {\n    window.regjsparser = regjsparser;\n  }\n\n}());\n","/*!\n * RegJSGen\n * Copyright 2014 Benjamin Tan <https://d10.github.io/>\n * Available under MIT license <http://d10.mit-license.org/>\n */\n;(function() {\n  'use strict';\n\n  /** Used to determine if values are of the language type `Object` */\n  var objectTypes = {\n    'function': true,\n    'object': true\n  };\n\n  /** Used as a reference to the global object */\n  var root = (objectTypes[typeof window] && window) || this;\n\n  /** Backup possible global object */\n  var oldRoot = root;\n\n  /** Detect free variable `exports` */\n  var freeExports = objectTypes[typeof exports] && exports;\n\n  /** Detect free variable `module` */\n  var freeModule = objectTypes[typeof module] && module && !module.nodeType && module;\n\n  /** Detect free variable `global` from Node.js or Browserified code and use it as `root` */\n  var freeGlobal = freeExports && freeModule && typeof global == 'object' && global;\n  if (freeGlobal && (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal || freeGlobal.self === freeGlobal)) {\n    root = freeGlobal;\n  }\n\n  /*--------------------------------------------------------------------------*/\n\n  /*! Based on https://mths.be/fromcodepoint v0.2.0 by @mathias */\n\n  var stringFromCharCode = String.fromCharCode;\n  var floor = Math.floor;\n  function fromCodePoint() {\n    var MAX_SIZE = 0x4000;\n    var codeUnits = [];\n    var highSurrogate;\n    var lowSurrogate;\n    var index = -1;\n    var length = arguments.length;\n    if (!length) {\n      return '';\n    }\n    var result = '';\n    while (++index < length) {\n      var codePoint = Number(arguments[index]);\n      if (\n        !isFinite(codePoint) || // `NaN`, `+Infinity`, or `-Infinity`\n        codePoint < 0 || // not a valid Unicode code point\n        codePoint > 0x10FFFF || // not a valid Unicode code point\n        floor(codePoint) != codePoint // not an integer\n      ) {\n        throw RangeError('Invalid code point: ' + codePoint);\n      }\n      if (codePoint <= 0xFFFF) {\n        // BMP code point\n        codeUnits.push(codePoint);\n      } else {\n        // Astral code point; split in surrogate halves\n        // http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae\n        codePoint -= 0x10000;\n        highSurrogate = (codePoint >> 10) + 0xD800;\n        lowSurrogate = (codePoint % 0x400) + 0xDC00;\n        codeUnits.push(highSurrogate, lowSurrogate);\n      }\n      if (index + 1 == length || codeUnits.length > MAX_SIZE) {\n        result += stringFromCharCode.apply(null, codeUnits);\n        codeUnits.length = 0;\n      }\n    }\n    return result;\n  }\n\n  function assertType(type, expected) {\n    if (expected.indexOf('|') == -1) {\n      if (type == expected) {\n        return;\n      }\n\n      throw Error('Invalid node type: ' + type);\n    }\n\n    expected = assertType.hasOwnProperty(expected)\n      ? assertType[expected]\n      : (assertType[expected] = RegExp('^(?:' + expected + ')$'));\n\n    if (expected.test(type)) {\n      return;\n    }\n\n    throw Error('Invalid node type: ' + type);\n  }\n\n  /*--------------------------------------------------------------------------*/\n\n  function generate(node) {\n    var type = node.type;\n\n    if (generate.hasOwnProperty(type) && typeof generate[type] == 'function') {\n      return generate[type](node);\n    }\n\n    throw Error('Invalid node type: ' + type);\n  }\n\n  /*--------------------------------------------------------------------------*/\n\n  function generateAlternative(node) {\n    assertType(node.type, 'alternative');\n\n    var terms = node.body,\n        length = terms ? terms.length : 0;\n\n    if (length == 1) {\n      return generateTerm(terms[0]);\n    } else {\n      var i = -1,\n          result = '';\n\n      while (++i < length) {\n        result += generateTerm(terms[i]);\n      }\n\n      return result;\n    }\n  }\n\n  function generateAnchor(node) {\n    assertType(node.type, 'anchor');\n\n    switch (node.kind) {\n      case 'start':\n        return '^';\n      case 'end':\n        return '$';\n      case 'boundary':\n        return '\\\\b';\n      case 'not-boundary':\n        return '\\\\B';\n      default:\n        throw Error('Invalid assertion');\n    }\n  }\n\n  function generateAtom(node) {\n    assertType(node.type, 'anchor|characterClass|characterClassEscape|dot|group|reference|value');\n\n    return generate(node);\n  }\n\n  function generateCharacterClass(node) {\n    assertType(node.type, 'characterClass');\n\n    var classRanges = node.body,\n        length = classRanges ? classRanges.length : 0;\n\n    var i = -1,\n        result = '[';\n\n    if (node.negative) {\n      result += '^';\n    }\n\n    while (++i < length) {\n      result += generateClassAtom(classRanges[i]);\n    }\n\n    result += ']';\n\n    return result;\n  }\n\n  function generateCharacterClassEscape(node) {\n    assertType(node.type, 'characterClassEscape');\n\n    return '\\\\' + node.value;\n  }\n\n  function generateCharacterClassRange(node) {\n    assertType(node.type, 'characterClassRange');\n\n    var min = node.min,\n        max = node.max;\n\n    if (min.type == 'characterClassRange' || max.type == 'characterClassRange') {\n      throw Error('Invalid character class range');\n    }\n\n    return generateClassAtom(min) + '-' + generateClassAtom(max);\n  }\n\n  function generateClassAtom(node) {\n    assertType(node.type, 'anchor|characterClassEscape|characterClassRange|dot|value');\n\n    return generate(node);\n  }\n\n  function generateDisjunction(node) {\n    assertType(node.type, 'disjunction');\n\n    var body = node.body,\n        length = body ? body.length : 0;\n\n    if (length == 0) {\n      throw Error('No body');\n    } else if (length == 1) {\n      return generate(body[0]);\n    } else {\n      var i = -1,\n          result = '';\n\n      while (++i < length) {\n        if (i != 0) {\n          result += '|';\n        }\n        result += generate(body[i]);\n      }\n\n      return result;\n    }\n  }\n\n  function generateDot(node) {\n    assertType(node.type, 'dot');\n\n    return '.';\n  }\n\n  function generateGroup(node) {\n    assertType(node.type, 'group');\n\n    var result = '(';\n\n    switch (node.behavior) {\n      case 'normal':\n        break;\n      case 'ignore':\n        result += '?:';\n        break;\n      case 'lookahead':\n        result += '?=';\n        break;\n      case 'negativeLookahead':\n        result += '?!';\n        break;\n      default:\n        throw Error('Invalid behaviour: ' + node.behaviour);\n    }\n\n    var body = node.body,\n        length = body ? body.length : 0;\n\n    if (length == 1) {\n      result += generate(body[0]);\n    } else {\n      var i = -1;\n\n      while (++i < length) {\n        result += generate(body[i]);\n      }\n    }\n\n    result += ')';\n\n    return result;\n  }\n\n  function generateQuantifier(node) {\n    assertType(node.type, 'quantifier');\n\n    var quantifier = '',\n        min = node.min,\n        max = node.max;\n\n    switch (max) {\n      case undefined:\n      case null:\n        switch (min) {\n          case 0:\n            quantifier = '*'\n            break;\n          case 1:\n            quantifier = '+';\n            break;\n          default:\n            quantifier = '{' + min + ',}';\n            break;\n        }\n        break;\n      default:\n        if (min == max) {\n          quantifier = '{' + min + '}';\n        }\n        else if (min == 0 && max == 1) {\n          quantifier = '?';\n        } else {\n          quantifier = '{' + min + ',' + max + '}';\n        }\n        break;\n    }\n\n    if (!node.greedy) {\n      quantifier += '?';\n    }\n\n    return generateAtom(node.body[0]) + quantifier;\n  }\n\n  function generateReference(node) {\n    assertType(node.type, 'reference');\n\n    return '\\\\' + node.matchIndex;\n  }\n\n  function generateTerm(node) {\n    assertType(node.type, 'anchor|characterClass|characterClassEscape|empty|group|quantifier|reference|value');\n\n    return generate(node);\n  }\n\n  function generateValue(node) {\n    assertType(node.type, 'value');\n\n    var kind = node.kind,\n        codePoint = node.codePoint;\n\n    switch (kind) {\n      case 'controlLetter':\n        return '\\\\c' + fromCodePoint(codePoint + 64);\n      case 'hexadecimalEscape':\n        return '\\\\x' + ('00' + codePoint.toString(16).toUpperCase()).slice(-2);\n      case 'identifier':\n        return '\\\\' + fromCodePoint(codePoint);\n      case 'null':\n        return '\\\\' + codePoint;\n      case 'octal':\n        return '\\\\' + codePoint.toString(8);\n      case 'singleEscape':\n        switch (codePoint) {\n          case 0x0008:\n            return '\\\\b';\n          case 0x009:\n            return '\\\\t';\n          case 0x00A:\n            return '\\\\n';\n          case 0x00B:\n            return '\\\\v';\n          case 0x00C:\n            return '\\\\f';\n          case 0x00D:\n            return '\\\\r';\n          default:\n            throw Error('Invalid codepoint: ' + codePoint);\n        }\n      case 'symbol':\n        return fromCodePoint(codePoint);\n      case 'unicodeEscape':\n        return '\\\\u' + ('0000' + codePoint.toString(16).toUpperCase()).slice(-4);\n      case 'unicodeCodePointEscape':\n        return '\\\\u{' + codePoint.toString(16).toUpperCase() + '}';\n      default:\n        throw Error('Unsupported node kind: ' + kind);\n    }\n  }\n\n  /*--------------------------------------------------------------------------*/\n\n  generate.alternative = generateAlternative;\n  generate.anchor = generateAnchor;\n  generate.characterClass = generateCharacterClass;\n  generate.characterClassEscape = generateCharacterClassEscape;\n  generate.characterClassRange = generateCharacterClassRange;\n  generate.disjunction = generateDisjunction;\n  generate.dot = generateDot;\n  generate.group = generateGroup;\n  generate.quantifier = generateQuantifier;\n  generate.reference = generateReference;\n  generate.value = generateValue;\n\n  /*--------------------------------------------------------------------------*/\n\n  // export regjsgen\n  // some AMD build optimizers, like r.js, check for condition patterns like the following:\n  if (typeof define == 'function' && typeof define.amd == 'object' && define.amd) {\n    // define as an anonymous module so, through path mapping, it can be aliased\n    define(function() {\n      return {\n        'generate': generate\n      };\n    });\n  }\n  // check for `exports` after `define` in case a build optimizer adds an `exports` object\n  else if (freeExports && freeModule) {\n    // in Narwhal, Node.js, Rhino -require, or RingoJS\n    freeExports.generate = generate;\n  }\n  // in a browser or Rhino\n  else {\n    root.regjsgen = {\n      'generate': generate\n    };\n  }\n}.call(this));\n","var generate = require('regjsgen').generate;\nvar parse = require('regjsparser').parse;\nvar regenerate = require('regenerate');\nvar iuMappings = require('./data/iu-mappings.json');\nvar ESCAPE_SETS = require('./data/character-class-escape-sets.js');\n\nfunction getCharacterClassEscapeSet(character) {\n\tif (unicode) {\n\t\tif (ignoreCase) {\n\t\t\treturn ESCAPE_SETS.UNICODE_IGNORE_CASE[character];\n\t\t}\n\t\treturn ESCAPE_SETS.UNICODE[character];\n\t}\n\treturn ESCAPE_SETS.REGULAR[character];\n}\n\nvar object = {};\nvar hasOwnProperty = object.hasOwnProperty;\nfunction has(object, property) {\n\treturn hasOwnProperty.call(object, property);\n}\n\n// Prepare a Regenerate set containing all code points, used for negative\n// character classes (if any).\nvar UNICODE_SET = regenerate().addRange(0x0, 0x10FFFF);\n// Without the `u` flag, the range stops at 0xFFFF.\n// https://mths.be/es6#sec-pattern-semantics\nvar BMP_SET = regenerate().addRange(0x0, 0xFFFF);\n\n// Prepare a Regenerate set containing all code points that are supposed to be\n// matched by `/./u`. https://mths.be/es6#sec-atom\nvar DOT_SET_UNICODE = UNICODE_SET.clone() // all Unicode code points\n\t.remove(\n\t\t// minus `LineTerminator`s (https://mths.be/es6#sec-line-terminators):\n\t\t0x000A, // Line Feed <LF>\n\t\t0x000D, // Carriage Return <CR>\n\t\t0x2028, // Line Separator <LS>\n\t\t0x2029  // Paragraph Separator <PS>\n\t);\n// Prepare a Regenerate set containing all code points that are supposed to be\n// matched by `/./` (only BMP code points).\nvar DOT_SET = DOT_SET_UNICODE.clone()\n\t.intersection(BMP_SET);\n\n// Add a range of code points + any case-folded code points in that range to a\n// set.\nregenerate.prototype.iuAddRange = function(min, max) {\n\tvar $this = this;\n\tdo {\n\t\tvar folded = caseFold(min);\n\t\tif (folded) {\n\t\t\t$this.add(folded);\n\t\t}\n\t} while (++min <= max);\n\treturn $this;\n};\n\nfunction assign(target, source) {\n\tfor (var key in source) {\n\t\t// Note: `hasOwnProperty` is not needed here.\n\t\ttarget[key] = source[key];\n\t}\n}\n\nfunction update(item, pattern) {\n\t// TODO: Test if memoizing `pattern` here is worth the effort.\n\tif (!pattern) {\n\t\treturn;\n\t}\n\tvar tree = parse(pattern, '');\n\tswitch (tree.type) {\n\t\tcase 'characterClass':\n\t\tcase 'group':\n\t\tcase 'value':\n\t\t\t// No wrapping needed.\n\t\t\tbreak;\n\t\tdefault:\n\t\t\t// Wrap the pattern in a non-capturing group.\n\t\t\ttree = wrap(tree, pattern);\n\t}\n\tassign(item, tree);\n}\n\nfunction wrap(tree, pattern) {\n\t// Wrap the pattern in a non-capturing group.\n\treturn {\n\t\t'type': 'group',\n\t\t'behavior': 'ignore',\n\t\t'body': [tree],\n\t\t'raw': '(?:' + pattern + ')'\n\t};\n}\n\nfunction caseFold(codePoint) {\n\treturn has(iuMappings, codePoint) ? iuMappings[codePoint] : false;\n}\n\nvar ignoreCase = false;\nvar unicode = false;\nfunction processCharacterClass(characterClassItem) {\n\tvar set = regenerate();\n\tvar body = characterClassItem.body.forEach(function(item) {\n\t\tswitch (item.type) {\n\t\t\tcase 'value':\n\t\t\t\tset.add(item.codePoint);\n\t\t\t\tif (ignoreCase && unicode) {\n\t\t\t\t\tvar folded = caseFold(item.codePoint);\n\t\t\t\t\tif (folded) {\n\t\t\t\t\t\tset.add(folded);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'characterClassRange':\n\t\t\t\tvar min = item.min.codePoint;\n\t\t\t\tvar max = item.max.codePoint;\n\t\t\t\tset.addRange(min, max);\n\t\t\t\tif (ignoreCase && unicode) {\n\t\t\t\t\tset.iuAddRange(min, max);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'characterClassEscape':\n\t\t\t\tset.add(getCharacterClassEscapeSet(item.value));\n\t\t\t\tbreak;\n\t\t\t// The `default` clause is only here as a safeguard; it should never be\n\t\t\t// reached. Code coverage tools should ignore it.\n\t\t\t/* istanbul ignore next */\n\t\t\tdefault:\n\t\t\t\tthrow Error('Unknown term type: ' + item.type);\n\t\t}\n\t});\n\tif (characterClassItem.negative) {\n\t\tset = (unicode ? UNICODE_SET : BMP_SET).clone().remove(set);\n\t}\n\tupdate(characterClassItem, set.toString());\n\treturn characterClassItem;\n}\n\nfunction processTerm(item) {\n\tswitch (item.type) {\n\t\tcase 'dot':\n\t\t\tupdate(\n\t\t\t\titem,\n\t\t\t\t(unicode ? DOT_SET_UNICODE : DOT_SET).toString()\n\t\t\t);\n\t\t\tbreak;\n\t\tcase 'characterClass':\n\t\t\titem = processCharacterClass(item);\n\t\t\tbreak;\n\t\tcase 'characterClassEscape':\n\t\t\tupdate(\n\t\t\t\titem,\n\t\t\t\tgetCharacterClassEscapeSet(item.value).toString()\n\t\t\t);\n\t\t\tbreak;\n\t\tcase 'alternative':\n\t\tcase 'disjunction':\n\t\tcase 'group':\n\t\tcase 'quantifier':\n\t\t\titem.body = item.body.map(processTerm);\n\t\t\tbreak;\n\t\tcase 'value':\n\t\t\tvar codePoint = item.codePoint;\n\t\t\tvar set = regenerate(codePoint);\n\t\t\tif (ignoreCase && unicode) {\n\t\t\t\tvar folded = caseFold(codePoint);\n\t\t\t\tif (folded) {\n\t\t\t\t\tset.add(folded);\n\t\t\t\t}\n\t\t\t}\n\t\t\tupdate(item, set.toString());\n\t\t\tbreak;\n\t\tcase 'anchor':\n\t\tcase 'empty':\n\t\tcase 'group':\n\t\tcase 'reference':\n\t\t\t// Nothing to do here.\n\t\t\tbreak;\n\t\t// The `default` clause is only here as a safeguard; it should never be\n\t\t// reached. Code coverage tools should ignore it.\n\t\t/* istanbul ignore next */\n\t\tdefault:\n\t\t\tthrow Error('Unknown term type: ' + item.type);\n\t}\n\treturn item;\n};\n\nmodule.exports = function(pattern, flags) {\n\tvar tree = parse(pattern, flags);\n\tignoreCase = flags ? flags.indexOf('i') > -1 : false;\n\tunicode = flags ? flags.indexOf('u') > -1 : false;\n\tassign(tree, processTerm(tree));\n\treturn generate(tree);\n};\n","import Node from '../Node.js';\nimport CompileError from '../../utils/CompileError.js';\nimport rewritePattern from 'regexpu-core';\n\nexport default class Literal extends Node {\n\tinitialise () {\n\t\tif ( typeof this.value === 'string' ) {\n\t\t\tthis.program.indentExclusionElements.push( this );\n\t\t}\n\t}\n\n\ttranspile ( code, transforms ) {\n\t\tif ( transforms.numericLiteral ) {\n\t\t\tconst leading = this.raw.slice( 0, 2 );\n\t\t\tif ( leading === '0b' || leading === '0o' ) {\n\t\t\t\tcode.overwrite( this.start, this.end, String( this.value ), true );\n\t\t\t}\n\t\t}\n\n\t\tif ( this.regex ) {\n\t\t\tconst { pattern, flags } = this.regex;\n\n\t\t\tif ( transforms.stickyRegExp && /y/.test( flags ) ) throw new CompileError( this, 'Regular expression sticky flag is not supported' );\n\t\t\tif ( transforms.unicodeRegExp && /u/.test( flags ) ) {\n\t\t\t\tcode.overwrite( this.start, this.end, `/${rewritePattern( pattern, flags )}/${flags.replace( 'u', '' )}` );\n\t\t\t}\n\t\t}\n\t}\n}\n","import Node from '../Node.js';\nimport reserved from '../../utils/reserved.js';\n\nexport default class MemberExpression extends Node {\n\ttranspile ( code, transforms ) {\n\t\tif ( transforms.reservedProperties && reserved[ this.property.name ] ) {\n\t\t\tcode.overwrite( this.object.end, this.property.start, `['` );\n\t\t\tcode.insertLeft( this.property.end, `']` );\n\t\t}\n\n\t\tsuper.transpile( code, transforms );\n\t}\n}\n","import Node from '../Node.js';\nimport spread, { isArguments } from '../../utils/spread.js';\n\nexport default class NewExpression extends Node {\n\tinitialise ( transforms ) {\n\t\tif ( transforms.spreadRest && this.arguments.length ) {\n\t\t\tconst lexicalBoundary = this.findLexicalBoundary();\n\n\t\t\tlet i = this.arguments.length;\n\t\t\twhile ( i-- ) {\n\t\t\t\tconst arg = this.arguments[i];\n\t\t\t\tif ( arg.type === 'SpreadElement' && isArguments( arg.argument ) ) {\n\t\t\t\t\tthis.argumentsArrayAlias = lexicalBoundary.getArgumentsArrayAlias();\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tsuper.initialise( transforms );\n\t}\n\n\ttranspile ( code, transforms ) {\n\t\tif ( transforms.spreadRest && this.arguments.length ) {\n\t\t\tconst firstArgument = this.arguments[0];\n\t\t\tconst isNew = true;\n\t\t\tlet hasSpreadElements = spread( code, this.arguments, firstArgument.start, this.argumentsArrayAlias, isNew );\n\n\t\t\tif ( hasSpreadElements ) {\n\t\t\t\tcode.insertRight( this.start + 'new'.length, ' (Function.prototype.bind.apply(' );\n\t\t\t\tcode.overwrite( this.callee.end, firstArgument.start, ', [ null ].concat( ' );\n\t\t\t\tcode.insertLeft( this.end, ' ))' );\n\t\t\t}\n\t\t}\n\n\t\tsuper.transpile( code, transforms );\n\t}\n}\n","import Node from '../Node.js';\nimport CompileError from '../../utils/CompileError.js';\n\nexport default class ObjectExpression extends Node {\n\ttranspile ( code, transforms ) {\n\t\tsuper.transpile( code, transforms );\n\n\t\tlet firstPropertyStart = this.start + 1;\n\t\tlet regularPropertyCount = 0;\n\t\tlet spreadPropertyCount = 0;\n\t\tlet computedPropertyCount = 0;\n\n\t\tfor ( let prop of this.properties ) {\n\t\t\tif ( prop.type === 'SpreadProperty' ) {\n\t\t\t\tspreadPropertyCount += 1;\n\t\t\t} else if ( prop.computed ) {\n\t\t\t\tcomputedPropertyCount += 1;\n\t\t\t} else if ( prop.type === 'Property' ) {\n\t\t\t\tregularPropertyCount += 1;\n\t\t\t}\n\t\t}\n\n\t\tif ( spreadPropertyCount ) {\n\t\t\tif ( !this.program.options.objectAssign ) {\n\t\t\t\tthrow new CompileError( this, 'Object spread operator requires specified objectAssign option with \\'Object.assign\\' or polyfill helper.' );\n\t\t\t}\n\t\t\t// enclose run of non-spread properties in curlies\n\t\t\tlet i = this.properties.length;\n\t\t\tif ( regularPropertyCount ) {\n\t\t\t\twhile ( i-- ) {\n\t\t\t\t\tconst prop = this.properties[i];\n\n\t\t\t\t\tif ( prop.type === 'Property' && !prop.computed ) {\n\t\t\t\t\t\tconst lastProp = this.properties[ i - 1 ];\n\t\t\t\t\t\tconst nextProp = this.properties[ i + 1 ];\n\n\t\t\t\t\t\tif ( !lastProp || lastProp.type !== 'Property' || lastProp.computed ) {\n\t\t\t\t\t\t\tcode.insertRight( prop.start, '{' );\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( !nextProp || nextProp.type !== 'Property' || nextProp.computed ) {\n\t\t\t\t\t\t\tcode.insertLeft( prop.end, '}' );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// wrap the whole thing in Object.assign\n\t\t\tfirstPropertyStart = this.properties[0].start;\n\t\t\tcode.overwrite( this.start, firstPropertyStart, `${this.program.options.objectAssign}({}, `);\n\t\t\tcode.overwrite( this.properties[ this.properties.length - 1 ].end, this.end, ')' );\n\t\t}\n\n\t\tif ( computedPropertyCount && transforms.computedProperty ) {\n\t\t\tconst i0 = this.getIndentation();\n\n\t\t\tlet isSimpleAssignment;\n\t\t\tlet name;\n\n\t\t\tif ( this.parent.type === 'VariableDeclarator' && this.parent.parent.declarations.length === 1 ) {\n\t\t\t\tisSimpleAssignment = true;\n\t\t\t\tname = this.parent.id.alias || this.parent.id.name; // TODO is this right?\n\t\t\t} else if ( this.parent.type === 'AssignmentExpression' && this.parent.parent.type === 'ExpressionStatement' && this.parent.left.type === 'Identifier' ) {\n\t\t\t\tisSimpleAssignment = true;\n\t\t\t\tname = this.parent.left.alias || this.parent.left.name; // TODO is this right?\n\t\t\t} else if ( this.parent.type === 'AssignmentPattern' && this.parent.left.type === 'Identifier' ) {\n\t\t\t\tisSimpleAssignment = true;\n\t\t\t\tname = this.parent.left.alias || this.parent.left.name; // TODO is this right?\n\t\t\t}\n\n\t\t\t// handle block scoping\n\t\t\tconst declaration = this.findScope( false ).findDeclaration( name );\n\t\t\tif ( declaration ) name = declaration.name;\n\n\t\t\tconst start = firstPropertyStart;\n\t\t\tconst end = this.end;\n\n\t\t\tif ( isSimpleAssignment ) {\n\t\t\t\t// ???\n\t\t\t} else {\n\t\t\t\tname = this.findScope( true ).createIdentifier( 'obj' );\n\n\t\t\t\tconst statement = this.findNearest( /(?:Statement|Declaration)$/ );\n\t\t\t\tcode.insertLeft( statement.end, `\\n${i0}var ${name};` );\n\n\t\t\t\tcode.insertRight( this.start, `( ${name} = ` );\n\t\t\t}\n\n\t\t\tconst len = this.properties.length;\n\t\t\tlet lastComputedProp;\n\t\t\tlet sawNonComputedProperty = false;\n\n\t\t\tfor ( let i = 0; i < len; i += 1 ) {\n\t\t\t\tconst prop = this.properties[i];\n\n\t\t\t\tif ( prop.computed ) {\n\t\t\t\t\tlastComputedProp = prop;\n\t\t\t\t\tlet moveStart = i > 0 ? this.properties[ i - 1 ].end : start;\n\n\t\t\t\t\tconst propId = isSimpleAssignment ? `;\\n${i0}${name}` : `, ${name}`;\n\n\t\t\t\t\tif (moveStart < prop.start) {\n\t\t\t\t\t\tcode.overwrite( moveStart, prop.start, propId );\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcode.insertRight( prop.start, propId );\n\t\t\t\t\t}\n\n\t\t\t\t\tlet c = prop.key.end;\n\t\t\t\t\twhile ( code.original[c] !== ']' ) c += 1;\n\t\t\t\t\tc += 1;\n\n\t\t\t\t\tif ( prop.value.start > c ) code.remove( c, prop.value.start );\n\t\t\t\t\tcode.insertLeft( c, ' = ' );\n\t\t\t\t\tcode.move( moveStart, prop.end, end );\n\n\t\t\t\t\tif ( i < len - 1 && ! sawNonComputedProperty ) {\n\t\t\t\t\t\t// remove trailing comma\n\t\t\t\t\t\tc = prop.end;\n\t\t\t\t\t\twhile ( code.original[c] !== ',' ) c += 1;\n\n\t\t\t\t\t\tcode.remove( prop.end, c + 1 );\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( prop.method && transforms.conciseMethodProperty ) {\n\t\t\t\t\t\tcode.insertRight( prop.value.start, 'function ' );\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tsawNonComputedProperty = true;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// special case\n\t\t\tif ( computedPropertyCount === len ) {\n\t\t\t\tcode.remove( this.properties[ len - 1 ].end, this.end - 1 );\n\t\t\t}\n\n\t\t\tif ( !isSimpleAssignment ) {\n\t\t\t\tcode.insertLeft( lastComputedProp.end, `, ${name} )` );\n\t\t\t}\n\t\t}\n\t}\n}\n","import Node from '../Node.js';\nimport reserved from '../../utils/reserved.js';\n\nexport default class Property extends Node {\n\ttranspile ( code, transforms ) {\n\t\tif ( transforms.conciseMethodProperty && !this.computed && this.parent.type !== 'ObjectPattern' ) {\n\t\t\tif ( this.shorthand ) {\n\t\t\t\tcode.insertRight( this.start, `${this.key.name}: ` );\n\t\t\t} else if ( this.method ) {\n\t\t\t\tlet name = '';\n\t\t\t\tif ( this.program.options.namedFunctionExpressions !== false ) {\n\t\t\t\t\tif ( this.key.type === 'Literal' && typeof this.key.value === 'number' ) {\n\t\t\t\t\t\tname = \"\";\n\t\t\t\t\t} else if ( this.key.type === 'Identifier' ) {\n\t\t\t\t\t\tif ( reserved[ this.key.name ] ||\n\t\t\t\t\t\t\t ! /^[a-z_$][a-z0-9_$]*$/i.test( this.key.name ) ||\n\t\t\t\t\t\t     this.value.body.scope.references[this.key.name] ) {\n\t\t\t\t\t\t\tname = this.findScope( true ).createIdentifier( this.key.name );\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tname = this.key.name;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tname = this.findScope( true ).createIdentifier( this.key.value );\n\t\t\t\t\t}\n\t\t\t\t\tname = ' ' + name;\n\t\t\t\t}\n\n\t\t\t\tif ( this.value.generator ) code.remove( this.start, this.key.start );\n\t\t\t\tcode.insertLeft( this.key.end, `: function${this.value.generator ? '*' : ''}${name}` );\n\t\t\t}\n\t\t}\n\n\t\tif ( transforms.reservedProperties && reserved[ this.key.name ] ) {\n\t\t\tcode.insertRight( this.key.start, `'` );\n\t\t\tcode.insertLeft( this.key.end, `'` );\n\t\t}\n\n\t\tsuper.transpile( code, transforms );\n\t}\n}\n","import Node from '../Node.js';\nimport { loopStatement } from '../../utils/patterns.js';\n\nexport default class ReturnStatement extends Node {\n\tinitialise ( transforms ) {\n\t\tthis.loop = this.findNearest( loopStatement );\n\t\tthis.nearestFunction = this.findNearest( /Function/ );\n\n\t\tif ( this.loop && ( !this.nearestFunction || this.loop.depth > this.nearestFunction.depth ) ) {\n\t\t\tthis.loop.canReturn = true;\n\t\t\tthis.shouldWrap = true;\n\t\t}\n\n\t\tif ( this.argument ) this.argument.initialise( transforms );\n\t}\n\n\ttranspile ( code, transforms ) {\n\t\tconst shouldWrap = this.shouldWrap && this.loop && this.loop.shouldRewriteAsFunction;\n\n\t\tif ( this.argument ) {\n\t\t\tif ( shouldWrap ) code.insertRight( this.argument.start, `{ v: ` );\n\t\t\tthis.argument.transpile( code, transforms );\n\t\t\tif ( shouldWrap ) code.insertLeft( this.argument.end, ` }` );\n\t\t} else if ( shouldWrap ) {\n\t\t\tcode.insertLeft( this.start + 6, ' {}' );\n\t\t}\n\t}\n}\n","import Node from '../Node.js';\n\nexport default class SpreadProperty extends Node {\n\ttranspile ( code, transforms ) {\n\t\tcode.remove( this.start, this.argument.start );\n\t\tcode.remove( this.argument.end, this.end );\n\n\t\tsuper.transpile( code, transforms );\n\t}\n}\n","import Node from '../Node.js';\nimport CompileError from '../../utils/CompileError.js';\nimport { loopStatement } from '../../utils/patterns.js';\n\nexport default class Super extends Node {\n\tinitialise ( transforms ) {\n\t\tif ( transforms.classes ) {\n\t\t\tthis.method = this.findNearest( 'MethodDefinition' );\n\t\t\tif ( !this.method ) throw new CompileError( this, 'use of super outside class method' );\n\n\t\t\tconst parentClass = this.findNearest( 'ClassBody' ).parent;\n\t\t\tthis.superClassName = parentClass.superClass && (parentClass.superClass.name || 'superclass');\n\n\t\t\tif ( !this.superClassName ) throw new CompileError( this, 'super used in base class' );\n\n\t\t\tthis.isCalled = this.parent.type === 'CallExpression' && this === this.parent.callee;\n\n\t\t\tif ( this.method.kind !== 'constructor' && this.isCalled ) {\n\t\t\t\tthrow new CompileError( this, 'super() not allowed outside class constructor' );\n\t\t\t}\n\n\t\t\tthis.isMember = this.parent.type === 'MemberExpression';\n\n\t\t\tif ( !this.isCalled && !this.isMember ) {\n\t\t\t\tthrow new CompileError( this, 'Unexpected use of `super` (expected `super(...)` or `super.*`)' );\n\t\t\t}\n\t\t}\n\n\t\tif ( transforms.arrow ) {\n\t\t\tconst lexicalBoundary = this.findLexicalBoundary();\n\t\t\tconst arrowFunction = this.findNearest( 'ArrowFunctionExpression' );\n\t\t\tconst loop = this.findNearest( loopStatement );\n\n\t\t\tif ( arrowFunction && arrowFunction.depth > lexicalBoundary.depth ) {\n\t\t\t\tthis.thisAlias = lexicalBoundary.getThisAlias();\n\t\t\t}\n\n\t\t\tif ( loop && loop.body.contains( this ) && loop.depth > lexicalBoundary.depth ) {\n\t\t\t\tthis.thisAlias = lexicalBoundary.getThisAlias();\n\t\t\t}\n\t\t}\n\t}\n\n\ttranspile ( code, transforms ) {\n\t\tif ( transforms.classes ) {\n\t\t\tconst expression = ( this.isCalled || this.method.static ) ?\n\t\t\t\tthis.superClassName :\n\t\t\t\t`${this.superClassName}.prototype`;\n\n\t\t\tcode.overwrite( this.start, this.end, expression, true );\n\n\t\t\tconst callExpression = this.isCalled ? this.parent : this.parent.parent;\n\n\t\t\tif ( callExpression && callExpression.type === 'CallExpression' ) {\n\t\t\t\tif ( !this.noCall ) { // special case – `super( ...args )`\n\t\t\t\t\tcode.insertLeft( callExpression.callee.end, '.call' );\n\t\t\t\t}\n\n\t\t\t\tconst thisAlias = this.thisAlias || 'this';\n\n\t\t\t\tif ( callExpression.arguments.length ) {\n\t\t\t\t\tcode.insertLeft( callExpression.arguments[0].start, `${thisAlias}, ` );\n\t\t\t\t} else {\n\t\t\t\t\tcode.insertLeft( callExpression.end - 1, `${thisAlias}` );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n","import Node from '../Node.js';\nimport CompileError from '../../utils/CompileError.js';\n\nexport default class TaggedTemplateExpression extends Node {\n\tinitialise ( transforms ) {\n\t\tif ( transforms.templateString && !transforms.dangerousTaggedTemplateString ) {\n\t\t\tthrow new CompileError( this, 'Tagged template strings are not supported. Use `transforms: { templateString: false }` to skip transformation and disable this error, or `transforms: { dangerousTaggedTemplateString: true }` if you know what you\\'re doing' );\n\t\t}\n\n\t\tsuper.initialise( transforms );\n\t}\n\n\ttranspile ( code, transforms ) {\n\t\tif ( transforms.templateString && transforms.dangerousTaggedTemplateString ) {\n\t\t\tconst ordered = this.quasi.expressions.concat( this.quasi.quasis ).sort( ( a, b ) => a.start - b.start );\n\n\t\t\t// insert strings at start\n\t\t\tconst templateStrings = this.quasi.quasis.map( quasi => JSON.stringify( quasi.value.cooked ) );\n\t\t\tcode.overwrite( this.tag.end, ordered[0].start, `([${templateStrings.join(', ')}]` );\n\n\t\t\tlet lastIndex = ordered[0].start;\n\t\t\tordered.forEach( node => {\n\t\t\t\tif ( node.type === 'TemplateElement' ) {\n\t\t\t\t\tcode.remove( lastIndex, node.end );\n\t\t\t\t} else {\n\t\t\t\t\tcode.overwrite( lastIndex, node.start, ', ' );\n\t\t\t\t}\n\n\t\t\t\tlastIndex = node.end;\n\t\t\t});\n\n\t\t\tcode.overwrite( lastIndex, this.end, ')' );\n\t\t}\n\n\t\tsuper.transpile( code, transforms );\n\t}\n}\n","import Node from '../Node.js';\n\nexport default class TemplateElement extends Node {\n\tinitialise () {\n\t\tthis.program.indentExclusionElements.push( this );\n\t}\n}\n","import Node from '../Node.js';\n\nexport default class TemplateLiteral extends Node {\n\ttranspile ( code, transforms ) {\n\t\tif ( transforms.templateString && this.parent.type !== 'TaggedTemplateExpression' ) {\n\t\t\tlet ordered = this.expressions.concat( this.quasis )\n\t\t\t\t.sort( ( a, b ) => a.start - b.start || a.end - b.end )\n\t\t\t\t.filter( ( node, i ) => {\n\t\t\t\t\t// include all expressions\n\t\t\t\t\tif ( node.type !== 'TemplateElement' ) return true;\n\n\t\t\t\t\t// include all non-empty strings\n\t\t\t\t\tif ( node.value.raw ) return true;\n\n\t\t\t\t\t// exclude all empty strings not at the head\n\t\t\t\t\treturn !i;\n\t\t\t\t});\n\n\t\t\t// special case – we may be able to skip the first element,\n\t\t\t// if it's the empty string, but only if the second and\n\t\t\t// third elements aren't both expressions (since they maybe\n\t\t\t// be numeric, and `1 + 2 + '3' === '33'`)\n\t\t\tif ( ordered.length >= 3 ) {\n\t\t\t\tconst [ first, , third ] = ordered;\n\t\t\t\tif ( first.type === 'TemplateElement' && first.value.raw === '' && third.type === 'TemplateElement' ) {\n\t\t\t\t\tordered.shift();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst parenthesise = ( this.quasis.length !== 1 || this.expressions.length !== 0 ) &&\n\t\t\t                     this.parent.type !== 'AssignmentExpression' &&\n\t\t\t                     this.parent.type !== 'AssignmentPattern' &&\n\t\t\t                     this.parent.type !== 'VariableDeclarator' &&\n\t\t\t                     ( this.parent.type !== 'BinaryExpression' || this.parent.operator !== '+' );\n\n\t\t\tif ( parenthesise ) code.insertRight( this.start, '(' );\n\n\t\t\tlet lastIndex = this.start;\n\n\t\t\tordered.forEach( ( node, i ) => {\n\t\t\t\tif ( node.type === 'TemplateElement' ) {\n\t\t\t\t\tlet replacement = '';\n\t\t\t\t\tif ( i ) replacement += ' + ';\n\t\t\t\t\treplacement += JSON.stringify( node.value.cooked );\n\n\t\t\t\t\tcode.overwrite( lastIndex, node.end, replacement );\n\t\t\t\t} else {\n\t\t\t\t\tconst parenthesise = node.type !== 'Identifier'; // TODO other cases where it's safe\n\n\t\t\t\t\tlet replacement = '';\n\t\t\t\t\tif ( i ) replacement += ' + ';\n\t\t\t\t\tif ( parenthesise ) replacement += '(';\n\n\t\t\t\t\tcode.overwrite( lastIndex, node.start, replacement );\n\n\t\t\t\t\tif ( parenthesise ) code.insertLeft( node.end, ')' );\n\t\t\t\t}\n\n\t\t\t\tlastIndex = node.end;\n\t\t\t});\n\n\t\t\tlet close = '';\n\t\t\tif ( parenthesise ) close += ')';\n\n\t\t\tcode.overwrite( lastIndex, this.end, close );\n\t\t}\n\n\t\tsuper.transpile( code, transforms );\n\t}\n}\n","import Node from '../Node.js';\nimport { loopStatement } from '../../utils/patterns.js';\n\nexport default class ThisExpression extends Node {\n\tinitialise ( transforms ) {\n\t\tif ( transforms.arrow ) {\n\t\t\tconst lexicalBoundary = this.findLexicalBoundary();\n\t\t\tconst arrowFunction = this.findNearest( 'ArrowFunctionExpression' );\n\t\t\tconst loop = this.findNearest( loopStatement );\n\n\t\t\tif ( ( arrowFunction && arrowFunction.depth > lexicalBoundary.depth )\n\t\t\t|| ( loop && loop.body.contains( this ) && loop.depth > lexicalBoundary.depth )\n\t\t\t|| ( loop && loop.right && loop.right.contains( this ) ) ) {\n\t\t\t\tthis.alias = lexicalBoundary.getThisAlias();\n\t\t\t}\n\t\t}\n\t}\n\n\ttranspile ( code ) {\n\t\tif ( this.alias ) {\n\t\t\tcode.overwrite( this.start, this.end, this.alias, true );\n\t\t}\n\t}\n}\n","import Node from '../Node.js';\nimport CompileError from '../../utils/CompileError.js';\n\nexport default class UpdateExpression extends Node {\n\tinitialise ( transforms ) {\n\t\tif ( this.argument.type === 'Identifier' ) {\n\t\t\tconst declaration = this.findScope( false ).findDeclaration( this.argument.name );\n\t\t\tif ( declaration && declaration.kind === 'const' ) {\n\t\t\t\tthrow new CompileError( this, `${this.argument.name} is read-only` );\n\t\t\t}\n\n\t\t\t// special case – https://gitlab.com/Rich-Harris/buble/issues/150\n\t\t\tconst statement = declaration && declaration.node.ancestor( 3 );\n\t\t\tif ( statement && statement.type === 'ForStatement' && statement.body.contains( this ) ) {\n\t\t\t\tstatement.reassigned[ this.argument.name ] = true;\n\t\t\t}\n\t\t}\n\n\t\tsuper.initialise( transforms );\n\t}\n}\n","import Node from '../Node.js';\nimport destructure from '../../utils/destructure.js';\nimport { loopStatement } from '../../utils/patterns.js';\n\nexport default class VariableDeclaration extends Node {\n\tinitialise ( transforms ) {\n\t\tthis.scope = this.findScope( this.kind === 'var' );\n\t\tthis.declarations.forEach( declarator => declarator.initialise( transforms ) );\n\t}\n\n\ttranspile ( code, transforms ) {\n\t\tconst i0 = this.getIndentation();\n\t\tlet kind = this.kind;\n\n\t\tif ( transforms.letConst && kind !== 'var' ) {\n\t\t\tkind = 'var';\n\t\t\tcode.overwrite( this.start, this.start + this.kind.length, kind, true );\n\t\t}\n\n\t\tif ( transforms.destructuring && this.parent.type !== 'ForOfStatement' ) {\n\t\t\tlet c = this.start;\n\t\t\tlet lastDeclaratorIsPattern;\n\n\t\t\tthis.declarations.forEach( ( declarator, i ) => {\n\t\t\t\tif ( declarator.id.type === 'Identifier' ) {\n\t\t\t\t\tif ( i > 0 && this.declarations[ i - 1 ].id.type !== 'Identifier' ) {\n\t\t\t\t\t\tcode.overwrite( c, declarator.id.start, `var ` );\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tconst inline = loopStatement.test( this.parent.type );\n\n\t\t\t\t\tif ( i === 0 ) {\n\t\t\t\t\t\tcode.remove( c, declarator.id.start );\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcode.overwrite( c, declarator.id.start, `;\\n${i0}` );\n\t\t\t\t\t}\n\n\t\t\t\t\tconst simple = declarator.init.type === 'Identifier' && !declarator.init.rewritten;\n\n\t\t\t\t\tconst name = simple ? declarator.init.name : declarator.findScope( true ).createIdentifier( 'ref' );\n\n\t\t\t\t\tlet c = declarator.start;\n\n\t\t\t\t\tlet statementGenerators = [];\n\n\t\t\t\t\tif ( simple ) {\n\t\t\t\t\t\tcode.remove( declarator.id.end, declarator.end );\n\t\t\t\t\t} else {\n\t\t\t\t\t\tstatementGenerators.push( ( start, prefix, suffix ) => {\n\t\t\t\t\t\t\tcode.insertRight( declarator.id.end, `var ${name}` );\n\t\t\t\t\t\t\tcode.insertLeft( declarator.init.end, `${suffix}` );\n\t\t\t\t\t\t\tcode.move( declarator.id.end, declarator.end, start );\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\n\t\t\t\t\tdestructure( code, declarator.findScope( false ), declarator.id, name, inline, statementGenerators );\n\n\t\t\t\t\tlet prefix = inline ? 'var ' : '';\n\t\t\t\t\tlet suffix = inline ? `, ` : `;\\n${i0}`;\n\t\t\t\t\tstatementGenerators.forEach( ( fn, j ) => {\n\t\t\t\t\t\tif ( i === this.declarations.length - 1 && j === statementGenerators.length - 1 ) {\n\t\t\t\t\t\t\tsuffix = inline ? '' : ';';\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tfn( declarator.start, j === 0 ? prefix : '', suffix );\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\tdeclarator.transpile( code, transforms );\n\n\t\t\t\tc = declarator.end;\n\t\t\t\tlastDeclaratorIsPattern = declarator.id.type !== 'Identifier';\n\t\t\t});\n\n\t\t\tif ( lastDeclaratorIsPattern ) {\n\t\t\t\tcode.remove( c, this.end );\n\t\t\t}\n\t\t}\n\n\t\telse {\n\t\t\tthis.declarations.forEach( declarator => {\n\t\t\t\tdeclarator.transpile( code, transforms );\n\t\t\t});\n\t\t}\n\t}\n}\n","import Node from '../Node.js';\n\nexport default class VariableDeclarator extends Node {\n\tinitialise ( transforms ) {\n\t\tlet kind = this.parent.kind;\n\t\tif ( kind === 'let' && this.parent.parent.type === 'ForStatement' ) {\n\t\t\tkind = 'for.let'; // special case...\n\t\t}\n\n\t\tthis.parent.scope.addDeclaration( this.id, kind );\n\t\tsuper.initialise( transforms );\n\t}\n\n\ttranspile ( code, transforms ) {\n\t\tif ( !this.init && transforms.letConst && this.parent.kind !== 'var' ) {\n\t\t\tlet inLoop = this.findNearest( /Function|^For(In|Of)?Statement|^(?:Do)?WhileStatement/ );\n\t\t\tif ( inLoop && ! /Function/.test( inLoop.type ) && ! this.isLeftDeclaratorOfLoop() ) {\n\t\t\t\tcode.insertLeft( this.id.end, ' = (void 0)' );\n\t\t\t}\n\t\t}\n\n\t\tif ( this.id ) this.id.transpile( code, transforms );\n\t\tif ( this.init ) this.init.transpile( code, transforms );\n\t}\n\n\tisLeftDeclaratorOfLoop () {\n\t\treturn this.parent\n\t\t\t&& this.parent.type === 'VariableDeclaration'\n\t\t\t&& this.parent.parent\n\t\t\t&& (this.parent.parent.type === 'ForInStatement'\n\t\t\t\t|| this.parent.parent.type === 'ForOfStatement')\n\t\t\t&& this.parent.parent.left\n\t\t\t&& this.parent.parent.left.declarations[0] === this;\n\t}\n}\n","import ArrayExpression from './ArrayExpression.js';\nimport ArrowFunctionExpression from './ArrowFunctionExpression.js';\nimport AssignmentExpression from './AssignmentExpression.js';\nimport BinaryExpression from './BinaryExpression.js';\nimport BreakStatement from './BreakStatement.js';\nimport CallExpression from './CallExpression.js';\nimport ClassBody from './ClassBody.js';\nimport ClassDeclaration from './ClassDeclaration.js';\nimport ClassExpression from './ClassExpression.js';\nimport ContinueStatement from './ContinueStatement.js';\nimport ExportDefaultDeclaration from './ExportDefaultDeclaration.js';\nimport ExportNamedDeclaration from './ExportNamedDeclaration.js';\nimport ForStatement from './ForStatement.js';\nimport ForInStatement from './ForInStatement.js';\nimport ForOfStatement from './ForOfStatement.js';\nimport FunctionDeclaration from './FunctionDeclaration.js';\nimport FunctionExpression from './FunctionExpression.js';\nimport Identifier from './Identifier.js';\nimport IfStatement from './IfStatement.js';\nimport ImportDeclaration from './ImportDeclaration.js';\nimport ImportDefaultSpecifier from './ImportDefaultSpecifier.js';\nimport ImportSpecifier from './ImportSpecifier.js';\nimport JSXAttribute from './JSXAttribute.js';\nimport JSXClosingElement from './JSXClosingElement.js';\nimport JSXElement from './JSXElement.js';\nimport JSXExpressionContainer from './JSXExpressionContainer.js';\nimport JSXOpeningElement from './JSXOpeningElement.js';\nimport JSXSpreadAttribute from './JSXSpreadAttribute.js';\nimport Literal from './Literal.js';\nimport LoopStatement from './shared/LoopStatement.js';\nimport MemberExpression from './MemberExpression.js';\nimport NewExpression from './NewExpression.js';\nimport ObjectExpression from './ObjectExpression.js';\nimport Property from './Property.js';\nimport ReturnStatement from './ReturnStatement.js';\nimport SpreadProperty from './SpreadProperty.js';\nimport Super from './Super.js';\nimport TaggedTemplateExpression from './TaggedTemplateExpression.js';\nimport TemplateElement from './TemplateElement.js';\nimport TemplateLiteral from './TemplateLiteral.js';\nimport ThisExpression from './ThisExpression.js';\nimport UpdateExpression from './UpdateExpression.js';\nimport VariableDeclaration from './VariableDeclaration.js';\nimport VariableDeclarator from './VariableDeclarator.js';\n\nexport default {\n\tArrayExpression,\n\tArrowFunctionExpression,\n\tAssignmentExpression,\n\tBinaryExpression,\n\tBreakStatement,\n\tCallExpression,\n\tClassBody,\n\tClassDeclaration,\n\tClassExpression,\n\tContinueStatement,\n\tDoWhileStatement: LoopStatement,\n\tExportNamedDeclaration,\n\tExportDefaultDeclaration,\n\tForStatement,\n\tForInStatement,\n\tForOfStatement,\n\tFunctionDeclaration,\n\tFunctionExpression,\n\tIdentifier,\n\tIfStatement,\n\tImportDeclaration,\n\tImportDefaultSpecifier,\n\tImportSpecifier,\n\tJSXAttribute,\n\tJSXClosingElement,\n\tJSXElement,\n\tJSXExpressionContainer,\n\tJSXOpeningElement,\n\tJSXSpreadAttribute,\n\tLiteral,\n\tMemberExpression,\n\tNewExpression,\n\tObjectExpression,\n\tProperty,\n\tReturnStatement,\n\tSpreadProperty,\n\tSuper,\n\tTaggedTemplateExpression,\n\tTemplateElement,\n\tTemplateLiteral,\n\tThisExpression,\n\tUpdateExpression,\n\tVariableDeclaration,\n\tVariableDeclarator,\n\tWhileStatement: LoopStatement\n};\n","import types from './types/index.js';\nimport BlockStatement from './BlockStatement.js';\nimport Node from './Node.js';\nimport keys from './keys.js';\n\nconst statementsWithBlocks = {\n\tIfStatement: 'consequent',\n\tForStatement: 'body',\n\tForInStatement: 'body',\n\tForOfStatement: 'body',\n\tWhileStatement: 'body',\n\tDoWhileStatement: 'body',\n\tArrowFunctionExpression: 'body'\n};\n\nexport default function wrap ( raw, parent ) {\n\tif ( !raw ) return;\n\n\tif ( 'length' in raw ) {\n\t\tlet i = raw.length;\n\t\twhile ( i-- ) wrap( raw[i], parent );\n\t\treturn;\n\t}\n\n\t// with e.g. shorthand properties, key and value are\n\t// the same node. We don't want to wrap an object twice\n\tif ( raw.__wrapped ) return;\n\traw.__wrapped = true;\n\n\tif ( !keys[ raw.type ] ) {\n\t\tkeys[ raw.type ] = Object.keys( raw ).filter( key => typeof raw[ key ] === 'object' );\n\t}\n\n\t// special case – body-less if/for/while statements. TODO others?\n\tconst bodyType = statementsWithBlocks[ raw.type ];\n\tif ( bodyType && raw[ bodyType ].type !== 'BlockStatement' ) {\n\t\tconst expression = raw[ bodyType ];\n\n\t\t// create a synthetic block statement, otherwise all hell\n\t\t// breaks loose when it comes to block scoping\n\t\traw[ bodyType ] = {\n\t\t\tstart: expression.start,\n\t\t\tend: expression.end,\n\t\t\ttype: 'BlockStatement',\n\t\t\tbody: [ expression ],\n\t\t\tsynthetic: true\n\t\t};\n\t}\n\n\tnew Node( raw, parent );\n\n\tconst type = ( raw.type === 'BlockStatement' ? BlockStatement : types[ raw.type ] ) || Node;\n\traw.__proto__ = type.prototype;\n}\n","import extractNames from './extractNames.js';\nimport reserved from '../utils/reserved.js';\nimport CompileError from '../utils/CompileError.js';\n\nconst letConst = /^(?:let|const)$/;\n\nexport default function Scope ( options ) {\n\toptions = options || {};\n\n\tthis.parent = options.parent;\n\tthis.isBlockScope = !!options.block;\n\n\tlet scope = this;\n\twhile ( scope.isBlockScope ) scope = scope.parent;\n\tthis.functionScope = scope;\n\n\tthis.identifiers = [];\n\tthis.declarations = Object.create( null );\n\tthis.references = Object.create( null );\n\tthis.blockScopedDeclarations = this.isBlockScope ? null : Object.create( null );\n\tthis.aliases = this.isBlockScope ? null : Object.create( null );\n}\n\nScope.prototype = {\n\taddDeclaration ( node, kind ) {\n\t\tfor ( const identifier of extractNames( node ) ) {\n\t\t\tconst name = identifier.name;\n\t\t\tconst existingDeclaration = this.declarations[ name ];\n\t\t\tif ( existingDeclaration && ( letConst.test( kind ) || letConst.test( existingDeclaration.kind ) ) ) {\n\t\t\t\t// TODO warn about double var declarations?\n\t\t\t\tthrow new CompileError( identifier, `${name} is already declared` );\n\t\t\t}\n\n\t\t\tconst declaration = { name, node: identifier, kind, instances: [] };\n\t\t\tthis.declarations[ name ] = declaration;\n\n\t\t\tif ( this.isBlockScope ) {\n\t\t\t\tif ( !this.functionScope.blockScopedDeclarations[ name ] ) this.functionScope.blockScopedDeclarations[ name ] = [];\n\t\t\t\tthis.functionScope.blockScopedDeclarations[ name ].push( declaration );\n\t\t\t}\n\t\t}\n\t},\n\n\taddReference ( identifier ) {\n\t\tif ( this.consolidated ) {\n\t\t\tthis.consolidateReference( identifier );\n\t\t} else {\n\t\t\tthis.identifiers.push( identifier );\n\t\t}\n\t},\n\n\tconsolidate () {\n\t\tfor ( let i = 0; i < this.identifiers.length; i += 1 ) { // we might push to the array during consolidation, so don't cache length\n\t\t\tconst identifier = this.identifiers[i];\n\t\t\tthis.consolidateReference( identifier );\n\t\t}\n\n\t\tthis.consolidated = true; // TODO understand why this is necessary... seems bad\n\t},\n\n\tconsolidateReference ( identifier ) {\n\t\tconst declaration = this.declarations[ identifier.name ];\n\t\tif ( declaration ) {\n\t\t\tdeclaration.instances.push( identifier );\n\t\t} else {\n\t\t\tthis.references[ identifier.name ] = true;\n\t\t\tif ( this.parent ) this.parent.addReference( identifier );\n\t\t}\n\t},\n\n\tcontains ( name ) {\n\t\treturn this.declarations[ name ] ||\n\t\t       ( this.parent ? this.parent.contains( name ) : false );\n\t},\n\n\tcreateIdentifier ( base ) {\n\t\tif ( typeof base === 'number' ) base = base.toString();\n\n\t\tbase = base\n\t\t\t.replace( /\\s/g, '' )\n\t\t\t.replace( /\\[([^\\]]+)\\]/g, '_$1' )\n\t\t\t.replace( /[^a-zA-Z0-9_$]/g, '_' )\n\t\t\t.replace( /_{2,}/, '_' );\n\n\t\tlet name = base;\n\t\tlet counter = 1;\n\n\t\twhile ( this.declarations[ name ] || this.references[ name ] || this.aliases[ name ] || name in reserved ) {\n\t\t\tname = `${base}$${counter++}`;\n\t\t}\n\n\t\tthis.aliases[ name ] = true;\n\t\treturn name;\n\t},\n\n\tfindDeclaration ( name ) {\n\t\treturn this.declarations[ name ] ||\n\t\t       ( this.parent && this.parent.findDeclaration( name ) );\n\t}\n};\n","import './wrap.js'; // TODO necessary for ordering. sort it out\nimport Node from './Node.js';\nimport Scope from './Scope.js';\nimport destructure from '../utils/destructure.js';\n\nfunction isUseStrict ( node ) {\n\tif ( !node ) return false;\n\tif ( node.type !== 'ExpressionStatement' ) return false;\n\tif ( node.expression.type !== 'Literal' ) return false;\n\treturn node.expression.value === 'use strict';\n}\n\nexport default class BlockStatement extends Node {\n\tcreateScope () {\n\t\tthis.parentIsFunction = /Function/.test( this.parent.type );\n\t\tthis.isFunctionBlock = this.parentIsFunction || this.parent.type === 'Root';\n\t\tthis.scope = new Scope({\n\t\t\tblock: !this.isFunctionBlock,\n\t\t\tparent: this.parent.findScope( false )\n\t\t});\n\n\t\tif ( this.parentIsFunction ) {\n\t\t\tthis.parent.params.forEach( node => {\n\t\t\t\tthis.scope.addDeclaration( node, 'param' );\n\t\t\t});\n\t\t}\n\t}\n\n\tinitialise ( transforms ) {\n\t\tthis.thisAlias = null;\n\t\tthis.argumentsAlias = null;\n\t\tthis.defaultParameters = [];\n\n\t\t// normally the scope gets created here, during initialisation,\n\t\t// but in some cases (e.g. `for` statements), we need to create\n\t\t// the scope early, as it pertains to both the init block and\n\t\t// the body of the statement\n\t\tif ( !this.scope ) this.createScope();\n\n\t\tthis.body.forEach( node => node.initialise( transforms ) );\n\n\t\tthis.scope.consolidate();\n\t}\n\n\tfindLexicalBoundary () {\n\t\tif ( this.type === 'Program' ) return this;\n\t\tif ( /^Function/.test( this.parent.type ) ) return this;\n\n\t\treturn this.parent.findLexicalBoundary();\n\t}\n\n\tfindScope ( functionScope ) {\n\t\tif ( functionScope && !this.isFunctionBlock ) return this.parent.findScope( functionScope );\n\t\treturn this.scope;\n\t}\n\n\tgetArgumentsAlias () {\n\t\tif ( !this.argumentsAlias ) {\n\t\t\tthis.argumentsAlias = this.scope.createIdentifier( 'arguments' );\n\t\t}\n\n\t\treturn this.argumentsAlias;\n\t}\n\n\tgetArgumentsArrayAlias () {\n\t\tif ( !this.argumentsArrayAlias ) {\n\t\t\tthis.argumentsArrayAlias = this.scope.createIdentifier( 'argsArray' );\n\t\t}\n\n\t\treturn this.argumentsArrayAlias;\n\t}\n\n\tgetThisAlias () {\n\t\tif ( !this.thisAlias ) {\n\t\t\tthis.thisAlias = this.scope.createIdentifier( 'this' );\n\t\t}\n\n\t\treturn this.thisAlias;\n\t}\n\n\tgetIndentation () {\n\t\tif ( this.indentation === undefined ) {\n\t\t\tconst source = this.program.magicString.original;\n\n\t\t\tconst useOuter = this.synthetic || !this.body.length;\n\t\t\tlet c = useOuter ? this.start : this.body[0].start;\n\n\t\t\twhile ( c && source[c] !== '\\n' ) c -= 1;\n\n\t\t\tthis.indentation = '';\n\n\t\t\twhile ( true ) { // eslint-disable-line no-constant-condition\n\t\t\t\tc += 1;\n\t\t\t\tconst char = source[c];\n\n\t\t\t\tif ( char !== ' ' && char !== '\\t' ) break;\n\n\t\t\t\tthis.indentation += char;\n\t\t\t}\n\n\t\t\tconst indentString = this.program.magicString.getIndentString();\n\n\t\t\t// account for dedented class constructors\n\t\t\tlet parent = this.parent;\n\t\t\twhile ( parent ) {\n\t\t\t\tif ( parent.kind === 'constructor' && !parent.parent.parent.superClass ) {\n\t\t\t\t\tthis.indentation = this.indentation.replace( indentString, '' );\n\t\t\t\t}\n\n\t\t\t\tparent = parent.parent;\n\t\t\t}\n\n\t\t\tif ( useOuter ) this.indentation += indentString;\n\t\t}\n\n\t\treturn this.indentation;\n\t}\n\n\ttranspile ( code, transforms ) {\n\t\tconst indentation = this.getIndentation();\n\n\t\tlet introStatementGenerators = [];\n\n\t\tif ( this.argumentsAlias ) {\n\t\t\tintroStatementGenerators.push( ( start, prefix, suffix ) => {\n\t\t\t\tconst assignment = `${prefix}var ${this.argumentsAlias} = arguments${suffix}`;\n\t\t\t\tcode.insertLeft( start, assignment );\n\t\t\t});\n\t\t}\n\n\t\tif ( this.thisAlias ) {\n\t\t\tintroStatementGenerators.push( ( start, prefix, suffix ) => {\n\t\t\t\tconst assignment = `${prefix}var ${this.thisAlias} = this${suffix}`;\n\t\t\t\tcode.insertLeft( start, assignment );\n\t\t\t});\n\t\t}\n\n\t\tif ( this.argumentsArrayAlias ) {\n\t\t\tintroStatementGenerators.push( ( start, prefix, suffix ) => {\n\t\t\t\tconst i = this.scope.createIdentifier( 'i' );\n\t\t\t\tconst assignment = `${prefix}var ${i} = arguments.length, ${this.argumentsArrayAlias} = Array(${i});\\n${indentation}while ( ${i}-- ) ${this.argumentsArrayAlias}[${i}] = arguments[${i}]${suffix}`;\n\t\t\t\tcode.insertLeft( start, assignment );\n\t\t\t});\n\t\t}\n\n\t\tif ( /Function/.test( this.parent.type ) ) {\n\t\t\tthis.transpileParameters( code, transforms, indentation, introStatementGenerators );\n\t\t}\n\n\t\tif ( transforms.letConst && this.isFunctionBlock ) {\n\t\t\tthis.transpileBlockScopedIdentifiers( code );\n\t\t}\n\n\t\tsuper.transpile( code, transforms );\n\n\t\tif ( this.synthetic ) {\n\t\t\tif ( this.parent.type === 'ArrowFunctionExpression' ) {\n\t\t\t\tconst expr = this.body[0];\n\n\t\t\t\tif ( introStatementGenerators.length ) {\n\t\t\t\t\tcode.insertLeft( this.start, `{` ).insertRight( this.end, `${this.parent.getIndentation()}}` );\n\n\t\t\t\t\tcode.insertRight( expr.start, `\\n${indentation}return ` );\n\t\t\t\t\tcode.insertLeft( expr.end, `;\\n` );\n\t\t\t\t} else if ( transforms.arrow ) {\n\t\t\t\t\tcode.insertLeft( expr.start, `{ return ` );\n\t\t\t\t\tcode.insertLeft( expr.end, `; }` );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\telse if ( introStatementGenerators.length ) {\n\t\t\t\tcode.insertLeft( this.start, `{` ).insertRight( this.end, `}` );\n\t\t\t}\n\t\t}\n\n\t\tlet start;\n\t\tif ( isUseStrict( this.body[0] ) ) {\n\t\t\tstart = this.body[0].end;\n\t\t} else if ( this.synthetic || this.parent.type === 'Root' ) {\n\t\t\tstart = this.start;\n\t\t} else {\n\t\t\tstart = this.start + 1;\n\t\t}\n\n\t\tlet prefix = `\\n${indentation}`;\n\t\tlet suffix = ';';\n\t\tintroStatementGenerators.forEach( ( fn, i ) => {\n\t\t\tif ( i === introStatementGenerators.length - 1 ) suffix = `;\\n`;\n\t\t\tfn( start, prefix, suffix );\n\t\t});\n\t}\n\n\ttranspileParameters ( code, transforms, indentation, introStatementGenerators ) {\n\t\tconst params = this.parent.params;\n\n\t\tparams.forEach( param => {\n\t\t\tif ( param.type === 'AssignmentPattern' && param.left.type === 'Identifier' ) {\n\t\t\t\tif ( transforms.defaultParameter ) {\n\t\t\t\t\tintroStatementGenerators.push( ( start, prefix, suffix ) => {\n\t\t\t\t\t\tconst lhs = `${prefix}if ( ${param.left.name} === void 0 ) ${param.left.name}`;\n\n\t\t\t\t\t\tcode\n\t\t\t\t\t\t\t.insertRight( param.left.end, lhs )\n\t\t\t\t\t\t\t.move( param.left.end, param.right.end, start )\n\t\t\t\t\t\t\t.insertLeft( param.right.end, suffix );\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\n\t\t\telse if ( param.type === 'RestElement' ) {\n\t\t\t\tif ( transforms.spreadRest ) {\n\t\t\t\t\tintroStatementGenerators.push( ( start, prefix, suffix ) => {\n\t\t\t\t\t\tconst penultimateParam = params[ params.length - 2 ];\n\n\t\t\t\t\t\tif ( penultimateParam ) {\n\t\t\t\t\t\t\tcode.remove( penultimateParam ? penultimateParam.end : param.start, param.end );\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tlet start = param.start, end = param.end; // TODO https://gitlab.com/Rich-Harris/buble/issues/8\n\n\t\t\t\t\t\t\twhile ( /\\s/.test( code.original[ start - 1 ] ) ) start -= 1;\n\t\t\t\t\t\t\twhile ( /\\s/.test( code.original[ end ] ) ) end += 1;\n\n\t\t\t\t\t\t\tcode.remove( start, end );\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst name = param.argument.name;\n\t\t\t\t\t\tconst len = this.scope.createIdentifier( 'len' );\n\t\t\t\t\t\tconst count = params.length - 1;\n\n\t\t\t\t\t\tif ( count ) {\n\t\t\t\t\t\t\tcode.insertLeft( start, `${prefix}var ${name} = [], ${len} = arguments.length - ${count};\\n${indentation}while ( ${len}-- > 0 ) ${name}[ ${len} ] = arguments[ ${len} + ${count} ]${suffix}` );\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tcode.insertLeft( start, `${prefix}var ${name} = [], ${len} = arguments.length;\\n${indentation}while ( ${len}-- ) ${name}[ ${len} ] = arguments[ ${len} ]${suffix}` );\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\n\t\t\telse if ( param.type !== 'Identifier' ) {\n\t\t\t\tif ( transforms.parameterDestructuring ) {\n\t\t\t\t\tconst ref = this.scope.createIdentifier( 'ref' );\n\t\t\t\t\tdestructure( code, this.scope, param, ref, false, introStatementGenerators );\n\t\t\t\t\tcode.insertLeft( param.start, ref );\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n\ttranspileBlockScopedIdentifiers ( code ) {\n\t\tObject.keys( this.scope.blockScopedDeclarations ).forEach( name => {\n\t\t\tconst declarations = this.scope.blockScopedDeclarations[ name ];\n\n\t\t\tfor ( let declaration of declarations ) {\n\t\t\t\tlet cont = false; // TODO implement proper continue...\n\n\t\t\t\tif ( declaration.kind === 'for.let' ) {\n\t\t\t\t\t// special case\n\t\t\t\t\tconst forStatement = declaration.node.findNearest( 'ForStatement' );\n\n\t\t\t\t\tif ( forStatement.shouldRewriteAsFunction ) {\n\t\t\t\t\t\tconst outerAlias = this.scope.createIdentifier( name );\n\t\t\t\t\t\tconst innerAlias = forStatement.reassigned[ name ] ?\n\t\t\t\t\t\t\tthis.scope.createIdentifier( name ) :\n\t\t\t\t\t\t\tname;\n\n\t\t\t\t\t\tdeclaration.name = outerAlias;\n\t\t\t\t\t\tcode.overwrite( declaration.node.start, declaration.node.end, outerAlias, true );\n\n\t\t\t\t\t\tforStatement.aliases[ name ] = {\n\t\t\t\t\t\t\touter: outerAlias,\n\t\t\t\t\t\t\tinner: innerAlias\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tfor ( const identifier of declaration.instances ) {\n\t\t\t\t\t\t\tconst alias = forStatement.body.contains( identifier ) ?\n\t\t\t\t\t\t\t\tinnerAlias :\n\t\t\t\t\t\t\t\touterAlias;\n\n\t\t\t\t\t\t\tif ( name !== alias ) {\n\t\t\t\t\t\t\t\tcode.overwrite( identifier.start, identifier.end, alias, true );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tcont = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif ( !cont ) {\n\t\t\t\t\tconst alias = this.scope.createIdentifier( name );\n\n\t\t\t\t\tif ( name !== alias ) {\n\t\t\t\t\t\tdeclaration.name = alias;\n\t\t\t\t\t\tcode.overwrite( declaration.node.start, declaration.node.end, alias, true );\n\n\t\t\t\t\t\tfor ( const identifier of declaration.instances ) {\n\t\t\t\t\t\t\tidentifier.rewritten = true;\n\t\t\t\t\t\t\tcode.overwrite( identifier.start, identifier.end, alias, true );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n}\n","import MagicString from 'magic-string';\nimport BlockStatement from './BlockStatement.js';\nimport wrap from './wrap.js';\n\nexport default function Program ( source, ast, transforms, options ) {\n\tthis.type = 'Root';\n\n\t// options\n\tthis.jsx = options.jsx || 'React.createElement';\n\tthis.options = options;\n\n\tthis.source = source;\n\tthis.magicString = new MagicString( source );\n\n\tthis.ast = ast;\n\tthis.depth = 0;\n\n\twrap( this.body = ast, this );\n\tthis.body.__proto__ = BlockStatement.prototype;\n\n\tthis.indentExclusionElements = [];\n\tthis.body.initialise( transforms );\n\n\tthis.indentExclusions = Object.create( null );\n\tfor ( const node of this.indentExclusionElements ) {\n\t\tfor ( let i = node.start; i < node.end; i += 1 ) {\n\t\t\tthis.indentExclusions[ i ] = true;\n\t\t}\n\t}\n\n\tthis.body.transpile( this.magicString, transforms );\n}\n\nProgram.prototype = {\n\texport ( options = {} ) {\n\t\treturn {\n\t\t\tcode: this.magicString.toString(),\n\t\t\tmap: this.magicString.generateMap({\n\t\t\t\tfile: options.file,\n\t\t\t\tsource: options.source,\n\t\t\t\tincludeContent: options.includeContent !== false\n\t\t\t})\n\t\t};\n\t},\n\n\tfindNearest () {\n\t\treturn null;\n\t},\n\n\tfindScope () {\n\t\treturn null;\n\t}\n};\n","export const matrix = {\n\tchrome: {\n\t\t    48: 0b1001111011111100111110101111101,\n\t\t    49: 0b1001111111111100111111111111111,\n\t\t    50: 0b1011111111111100111111111111111,\n\t\t    51: 0b1011111111111100111111111111111,\n\t\t    52: 0b1111111111111100111111111111111\n\t},\n\tfirefox: {\n\t\t    43: 0b1000111111101100000110111011101,\n\t\t    44: 0b1000111111101100000110111011101,\n\t\t    45: 0b1000111111101100000110111011101,\n\t\t    46: 0b1010111111111100000110111011101,\n\t\t    47: 0b1010111111111100111111111011111,\n\t\t    48: 0b1010111111111100111111111011111\n\t},\n\tsafari: {\n\t\t     8: 0b1000000000000000000000000000000,\n\t\t     9: 0b1001111001101100000011101011110\n\t},\n\tie: {\n\t\t     8: 0b0000000000000000000000000000000,\n\t\t     9: 0b1000000000000000000000000000000,\n\t\t    10: 0b1000000000000000000000000000000,\n\t\t    11: 0b1000000000000000111000001100000\n\t},\n\tedge: {\n\t\t    12: 0b1011110110111100011010001011101,\n\t\t    13: 0b1011111110111100011111001011111\n\t},\n\tnode: {\n\t\t'0.10': 0b1000000000101000000000001000000,\n\t\t'0.12': 0b1000001000101000000010001000100,\n\t\t     4: 0b1001111000111100111111001111111,\n\t\t     5: 0b1001111000111100111111001111111,\n\t\t     6: 0b1011111111111100111111111111111\n\t}\n};\n\nexport const features = [\n\t'arrow',\n\t'classes',\n\t'collections',\n\t'computedProperty',\n\t'conciseMethodProperty',\n\t'constLoop',\n\t'constRedef',\n\t'defaultParameter',\n\t'destructuring',\n\t'extendNatives',\n\t'forOf',\n\t'generator',\n\t'letConst',\n\t'letLoop',\n\t'letLoopScope',\n\t'moduleExport',\n\t'moduleImport',\n\t'numericLiteral',\n\t'objectProto',\n\t'objectSuper',\n\t'oldOctalLiteral',\n\t'parameterDestructuring',\n\t'spreadRest',\n\t'stickyRegExp',\n\t'symbol',\n\t'templateString',\n\t'unicodeEscape',\n\t'unicodeIdentifier',\n\t'unicodeRegExp',\n\n\t// ES2016\n\t'exponentiation',\n\n\t// additional transforms, not from\n\t// https://featuretests.io\n\t'reservedProperties'\n];\n","import acorn from 'acorn/dist/acorn.js';\nimport acornJsx from 'acorn-jsx/inject';\nimport acornObjectSpread from 'acorn-object-spread/inject';\nimport Program from './program/Program.js';\nimport { features, matrix } from './support.js';\nimport getSnippet from './utils/getSnippet.js';\n\nconst { parse } = [\n\tacornObjectSpread,\n\tacornJsx\n].reduce( ( final, plugin ) => plugin( final ), acorn );\n\nconst dangerousTransforms = [\n\t'dangerousTaggedTemplateString',\n\t'dangerousForOf'\n];\n\nexport function target ( target ) {\n\tconst targets = Object.keys( target );\n\tlet bitmask = targets.length ?\n\t\t0b1111111111111111111111111111111 :\n\t\t0b1000000000000000000000000000000;\n\n\tObject.keys( target ).forEach( environment => {\n\t\tconst versions = matrix[ environment ];\n\t\tif ( !versions ) throw new Error( `Unknown environment '${environment}'. Please raise an issue at https://gitlab.com/Rich-Harris/buble/issues` );\n\n\t\tconst targetVersion = target[ environment ];\n\t\tif ( !( targetVersion in versions ) ) throw new Error( `Support data exists for the following versions of ${environment}: ${Object.keys( versions ).join( ', ')}. Please raise an issue at https://gitlab.com/Rich-Harris/buble/issues` );\n\t\tconst support = versions[ targetVersion ];\n\n\t\tbitmask &= support;\n\t});\n\n\tlet transforms = Object.create( null );\n\tfeatures.forEach( ( name, i ) => {\n\t\ttransforms[ name ] = !( bitmask & 1 << i );\n\t});\n\n\tdangerousTransforms.forEach( name => {\n\t\ttransforms[ name ] = false;\n\t});\n\n\treturn transforms;\n}\n\nexport function transform ( source, options = {} ) {\n\tlet ast;\n\tlet jsx = null;\n\n\ttry {\n\t\tast = parse( source, {\n\t\t\tecmaVersion: 7,\n\t\t\tpreserveParens: true,\n\t\t\tsourceType: 'module',\n\t\t\tonComment: (block, text) => {\n\t\t\t\tif ( !jsx ) {\n\t\t\t\t\tlet match = /@jsx\\s+([^\\s]+)/.exec( text );\n\t\t\t\t\tif ( match ) jsx = match[1];\n\t\t\t\t}\n\t\t\t},\n\t\t\tplugins: {\n\t\t\t\tjsx: true,\n\t\t\t\tobjectSpread: true\n\t\t\t}\n\t\t});\n\t\toptions.jsx = jsx || options.jsx;\n\t} catch ( err ) {\n\t\terr.snippet = getSnippet( source, err.loc );\n\t\terr.toString = () => `${err.name}: ${err.message}\\n${err.snippet}`;\n\t\tthrow err;\n\t}\n\n\tlet transforms = target( options.target || {} );\n\tObject.keys( options.transforms || {} ).forEach( name => {\n\t\tif ( name === 'modules' ) {\n\t\t\tif ( !( 'moduleImport' in options.transforms ) ) transforms.moduleImport = options.transforms.modules;\n\t\t\tif ( !( 'moduleExport' in options.transforms ) ) transforms.moduleExport = options.transforms.modules;\n\t\t\treturn;\n\t\t}\n\n\t\tif ( !( name in transforms ) ) throw new Error( `Unknown transform '${name}'` );\n\t\ttransforms[ name ] = options.transforms[ name ];\n\t});\n\n\treturn new Program( source, ast, transforms, options ).export( options );\n}\n\nexport { version as VERSION } from '../package.json';\n"],"names":["acorn","let","this","const","toJSON","element","super","target","source","temp","fn","ref","require$$0","require$$2","rewritePattern","prop","i","replacement","start","alias","identifier","0b1001111011111100111110101111101","0b1001111111111100111111111111111","0b1011111111111100111111111111111","0b1111111111111100111111111111111","0b1000111111101100000110111011101","0b1010111111111100000110111011101","0b1010111111111100111111111011111","0b1000000000000000000000000000000","0b1001111001101100000011101011110","0b0000000000000000000000000000000","0b1000000000000000111000001100000","0b1011110110111100011010001011101","0b1011111110111100011111001011111","0b1000000000101000000000001000000","0b1000001000101000000010001000100","0b1001111000111100111111001111111","0b1111111111111111111111111111111"],"mappings":"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
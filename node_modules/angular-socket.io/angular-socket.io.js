(function (angular) {
	'use strict';

	angular.module('angular-socket.io', [])
		.provider('$socket', function $socketProvider() {

			var ioURL 		= '';
			var ioConfig 	= { transports : ['websocket'] };

			this.setConnectionUrl = function (url) {
				if (typeof url === 'string') {
					ioURL = url;
				} else {
					throw new TypeError('url must be a string');
				}
			};

			function setOption(name, value, type) {
				if (typeof value != type) {
					throw new TypeError("'"+ name +"' must be of type '"+ type + "'");
				}

				ioConfig[name] = value;
			}

			this.setResource = function setResource(value) {
				setOption('resource', value, 'string');
			};
			this.setConnectTimeout = function setConnectTimeout(value) {
				setOption('connect timeout', value, 'number');
			};
			this.setTryMultipleTransports = function setTryMultipleTransports(value) {
				setOption('try multiple transports', value, 'boolean');
			};
			this.setReconnect = function setReconnect(value) {
				setOption('reconnect', value, 'boolean');
			};
			this.setReconnectionDelay = function setReconnectionDelay(value) {
				setOption('reconnection delay', value, 'number');
			};
			this.setReconnectionLimit = function setReconnectionLimit(value) {
				setOption('reconnection limit', value, 'number');
			};
			this.setMaxReconnectionAttempts = function setMaxReconnectionAttempts(value) {
				setOption('max reconnection attempts', value, 'number');
			};
			this.setSyncDisconnectOnUnload = function setSyncDisconnectOnUnload(value) {
				setOption('sync disconnect on unload', value, 'boolean');
			};
			this.setAutoConnect = function setAutoConnect(value) {
				setOption('auto connect', value, 'boolean');
			};
			this.setFlashPolicyPort = function setFlashPolicyPort(value) {
				setOption('flash policy port', value, 'number')
			};
			this.setForceNewConnection = function setForceNewConnection(value) {
				setOption('force new connection', value, 'boolean');
			};

			this.$get = function $socketFactory($rootScope, $timeout) {

				var socket = undefined;

				return {
					setUrl : function setUrl(url) {
						if (typeof url !== 'String') {
							ioURL = url;
						} else {
							throw new TypeError('url must be a string');
						}
					},
					setConfig : function setConfig(config) {
						if (typeof config === 'Object') {
							ioConfig = config;
						} else {
							throw new TypeError('config must be an Object');
						}
					},
					connect : function connect() {
						console.log(socket);
						console.log(ioURL);
						console.log(ioConfig);
						if (socket !== undefined) {
							if (!socket.connected) {
								socket = io(ioURL, ioConfig);
							}
						} else {
							socket = io(ioURL, ioConfig);
						}
					},
					disconnect : function disconnect() {
						socket.disconnect();
						socket = undefined;
					},
					isConnected : function isConnected() {
						if (socket !== undefined) {
							return socket.connected;
						} else {
							return false;
						}
					},
					getInstance : function getInstance() {
						return socket;
					},
					on : function on(event, callback) {
						if (socket !== undefined) {
							socket.on(event, function () {
								var args = arguments;

								$timeout(
									function () {
										$rootScope.$apply(function () {
											callback.apply(socket, args);
										});
									}
									,0);

							});
						} else {
							throw new Error('socket is undefined');
						}
					},
					off : function off(event, callback) {
						if (socket !== undefined) {
							if (typeof callback === 'function') {
								socket.removeListener(event, callback);
							} else {
								socket.removeAllListeners(event);
							}
						} else {
							throw new Error('socket is undefined');
						}
					},
					emit : function emit(event, data, callback) {
						if (socket !== undefined) {
							if (typeof callback === 'function') {
								socket.emit(event, data, function () {
									var args = arguments;

									$timeout(
										function () {
											$rootScope.$apply(function () {
												callback.apply(socket, args);
											});
										}
										,0);

								});
							} else {
								socket.emit(event, data);
							}
						} else {
							throw new Error('socket is undefined');
						}
					}
				};

			};

		});
}(angular));